<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: range() | AoboSir 博客]]></title>
  <link href="http://aobojaing.github.io/tags/range/atom.xml" rel="self"/>
  <link href="http://aobojaing.github.io/"/>
  <updated>2017-02-19T01:02:37+08:00</updated>
  <id>http://aobojaing.github.io/</id>
  <author>
    <name><![CDATA[Aobo Jaing]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning Python 018 Python2 和 Python3 中 range()函数的使用]]></title>
    <link href="http://aobojaing.github.io/blog/2016/11/30/python2-python3-range-function/"/>
    <updated>2016-11-30T13:37:04+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/11/30/python2-python3-range-function</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>使用的电脑系统：Windows 10 64位</li>
<li>使用的开发集成环境：PyCharm 2016.1.4</li>
<li>使用的Python的版本：python 2.7.10 和 python 3.5.0</li>
</ul>


<hr />

<h2><code>range()</code> 函数</h2>

<ul>
<li>Python2中：用来创建一个列表（list）。</li>
<li>Python3中：用来创建一个可以生成list或者tuple的生成器。</li>
</ul>


<h2>Python2 <code>range()</code>函数 知识点</h2>

<p>Python2 中的<code>range()</code> 函数可以生成一个list。（分配内存空间）</p>

<pre><code class="python">a = range(10)
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
b = range(4,10)
# [4, 5, 6, 7, 8, 9]
</code></pre>

<hr />

<p>Python2 中的<code>xrange()</code>函数不是生成一个list，而是生成一个生成器，不分配内存。</p>

<pre><code class="python">a = xrange(10)
# xrange(10)
b = list(xrange(10))
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
c = tuple(xrange(10))
# (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
</code></pre>

<hr />

<h2>Python3 <code>range()</code>函数 知识点</h2>

<hr />

<pre><code class="python">a = range(10)
# range(0, 10)
</code></pre>

<p>输出：（打印出来的不是一个列表，而是一个生成器）。</p>

<p>Python3 选择这样做的原因：可以节约内存空间，详情请参考这篇博客：<a href="http://www.aobosir.com/blog/2016/11/30/python2-python3-Memory-release-gc/">Python2和Python3的内存释放</a>。</p>

<p>Python3中的<code>range()</code>函数的功能和Python2中的<code>xrange()</code>函数一样，所以在Python3中没有<code>xrange()</code>函数。</p>

<hr />

<p>要想生成<strong>list</strong>或者<strong>tuple</strong>，这样做：
```python
a = list(range(10))</p>

<h1>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</h1>

<p>b = list(range(4,10))</p>

<h1>[4, 5, 6, 7, 8, 9]</h1>

<p>a = tuple(range(10))</p>

<h1>(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)</h1>

<p>b = tuple(range(4,10))</p>

<h1>(4, 5, 6, 7, 8, 9)</h1>

<pre><code>


----------

## `range()`函数的使用

下面这段代码在Python2 和 Python3中得到的运行结果都是一样的。
</code></pre>

<p>for i in range(10):
    print(i)
```</p>

<p>输出：</p>

<pre><code>0
1
2
3
4
5
6
7
8
9
</code></pre>

<p>运行结果是一样的，但是运行的原理不同：</p>

<ul>
<li>Python2：在第一次执行 <code>range(10)</code>，就生成了一个<code>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</code>列表。</li>
<li>Python3：在每次执行<code>range(10)</code>时，生成一个元素<code>i</code>。</li>
</ul>

]]></content>
  </entry>
  
</feed>
