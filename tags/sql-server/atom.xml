<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: SQL Server | AoboSir 的博客]]></title>
  <link href="http://aobojaing.github.io/tags/sql-server/atom.xml" rel="self"/>
  <link href="http://aobojaing.github.io/"/>
  <updated>2016-10-19T02:01:00+08:00</updated>
  <id>http://aobojaing.github.io/</id>
  <author>
    <name><![CDATA[Aobo Jaing]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SQL 数据库 学习 028 查询-11 having ---  对分组之后的信息进行过滤]]></title>
    <link href="http://aobojaing.github.io/blog/2016/10/19/SQL-Learning-028-Query-11-having-filtering%20information%20after%20grouping/"/>
    <updated>2016-10-19T01:51:13+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/10/19/SQL-Learning-028-Query-11-having-filtering information after grouping</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>我的电脑系统：<strong>Windows  10</strong> 64位</li>
<li><strong>SQL Server</strong> 软件版本： <strong>SQL Server 2014 Express</strong></li>
</ul>


<hr />

<blockquote><p>本篇博客里面使用了 <code>scott</code> 库，如何你现在还没有添加这个库到你的服务器里面，请在查看本篇博客前，访问<a href="http://www.aobosir.com/blog/2016/10/16/SQL-Learning-016-how-to-attach-a-database/">这篇博文</a>来在你的服务器里面附加<code>scott</code>库。</p></blockquote>

<hr />

<h2><code>having</code> &mdash; 对分组之后的信息进行过滤</h2>

<pre><code class="sql">--输出部门平均工资大于2000的部门的部门编号，部门的平均工资
select deptno, avg(sal)
    from emp
    group by deptno
    having avg(sal)&gt;2000;
</code></pre>

<p><img src="/images/2016-10-19-SQL-Learning-028-Query-11-having-filtering%20information%20after%20grouping/1476809752037.png" alt="Alt text" /></p>

<p>加入别名。</p>

<pre><code class="sql">--判断下列sql语句是否正确
select deptno, avg(sal) as "平均工资"
    from emp
    group by deptno
    having avg(sal) &gt; 2000
</code></pre>

<p><img src="/images/2016-10-19-SQL-Learning-028-Query-11-having-filtering%20information%20after%20grouping/1476809774694.png" alt="Alt text" /></p>

<hr />

<pre><code class="sql">--error
select deptno, avg(sal) as "平均工资"
    from emp
    group by deptno
    having "平均工资" &gt; 2000
</code></pre>

<p><img src="/images/2016-10-19-SQL-Learning-028-Query-11-having-filtering%20information%20after%20grouping/1476809816010.png" alt="Alt text" /></p>

<blockquote><p>正确的指令：
<code>sql
select deptno, avg(sal)
    from emp
    where ename not like '%A%'
    group by deptno
    having avg(sal) &gt; 2000
</code></p></blockquote>

<hr />

<pre><code class="sql">--以部门编号分组后，显示组内元组大于3个元组的部门编号和平均工资
select deptno, avg(sal) as "平均工资"
    from emp
    group by deptno
    having count(*) &gt; 3
</code></pre>

<p><img src="/images/2016-10-19-SQL-Learning-028-Query-11-having-filtering%20information%20after%20grouping/1476809854661.png" alt="Alt text" /></p>

<hr />

<pre><code class="sql">--error
select deptno, avg(sal) as "平均工资"
    from emp
    group by deptno
    having ename like '%A%'
</code></pre>

<p><img src="/images/2016-10-19-SQL-Learning-028-Query-11-having-filtering%20information%20after%20grouping/1476810004416.png" alt="Alt text" /></p>

<pre><code class="sql">select deptno, avg(sal) as "平均工资"
    from emp
    group by deptno
    having deptno&gt;1
</code></pre>

<p><img src="/images/2016-10-19-SQL-Learning-028-Query-11-having-filtering%20information%20after%20grouping/1476810222044.png" alt="Alt text" /></p>

<hr />

<h2><code>having</code> 和 <code>where</code> 的异同</h2>

<pre><code class="sql">--把姓名不包含`A`的所有的员工按部门编号分组，
--统计输出部门平均工资大于2000的部门的部门编号、部门的平均工资
select deptno, avg(sal)
    from emp
    where ename not like '%A%'
    group by deptno
    having avg(sal) &gt; 2000
</code></pre>

<p><img src="/images/2016-10-19-SQL-Learning-028-Query-11-having-filtering%20information%20after%20grouping/1476810752203.png" alt="Alt text" /></p>

<pre><code class="sql">--把工资大于2000，
--统计输出部门平均工资大于3000的部门的部门编号、部门的平均工资、部门人数、部门最高工资
select deptno, avg(sal) "平均工资", count(*) "部门人数", max(sal) "部门最高工资"
    from emp
    where sal &gt; 2000    --where是对原始的记录过滤
    group by deptno   
    having avg(sal) &gt; 3000   --对分组之后的记录过滤 
</code></pre>

<p><img src="/images/2016-10-19-SQL-Learning-028-Query-11-having-filtering%20information%20after%20grouping/1476810986375.png" alt="Alt text" /></p>

<p>如果参数的顺序变化了，执行的时候会不会受到影响？执行下面的指令，你就会知道答案。</p>

<pre><code class="sql">--error
select deptno, avg(sal) "平均工资", count(*) "部门人数", max(sal) "部门最高工资"
    from emp
    group by deptno
    having avg(sal) &gt; 3000
    where sal &gt; 2000
</code></pre>

<p><img src="/images/2016-10-19-SQL-Learning-028-Query-11-having-filtering%20information%20after%20grouping/1476811293128.png" alt="Alt text" /></p>

<p><strong>总结：</strong> 所有<code>select</code> 的参数的顺序是不允许变化的（所有的参数的位置都是固定的，你可以省略某个参数，但是不能变。），否则编译时出错。</p>

<hr />

<p><code>having</code> 和 <code>where</code> 的异同：</p>

<ul>
<li><strong>相同：</strong> 都是对数据过滤，只保留有效的数据。<code>where</code> 和 <code>having</code> 一样，都不允许出现字段的别名，只允许出现最原始的字段的名字。</li>
</ul>


<pre><code class="sql">--error where子句不应该出现聚合函数
select deptno, avg(sal)
    from emp
    where avg(sal) &gt; 2000   --error 因为where是对原始的数据过滤，不能使用聚合函数
</code></pre>

<ul>
<li><strong>不同：</strong> <code>where</code> 是对原始的记录过滤，<code>having</code> 是对分组之后的记录过滤。<code>where</code> 必须得写在<code>having</code>的前面，顺序不可颠倒，否则运行出错。</li>
</ul>


<hr />

<h2>总结 <code>having</code> 的用法</h2>

<ol>
<li><code>having</code> 子句是用来对分组之后的数据进行过滤。因此使用<code>having</code>时通常都会先使用 <code>group by</code>。</li>
<li>如果没有使用 <code>group by</code> ，而使用了 <code>having</code>，则意味着 <code>having</code> 把所有的记录当做一组来进行过滤。</li>
</ol>


<pre><code class="sql">select count(*) 
    from emp
    having avg(sal) &gt; 1000
</code></pre>

<ol>
<li><code>having</code> 子句出现的字段必须得是分组之后的组的整体信息。<code>having</code> 子句不允许出现组内的详细信息。</li>
</ol>


<pre><code class="sql">--error
select deptno avg(sal) as "平均工资", job
    from emp
    group by deptno
</code></pre>

<pre><code class="sql">--OK
select deptno avg(sal) as "平均工资", count(*) as "部门人数"
    from emp
    group by deptno
</code></pre>

<ol>
<li><p>尽管 <code>select</code>  字段中可以出现别名。但是<code>having</code> 子句中不能出现字段的别名，只能使用字段最原始的名字。（原因不得而知。）</p></li>
<li><p>就是上面说的：<strong><code>having</code> 和 <code>where</code> 的异同</strong> 。（这里不重复说明了。）</p></li>
</ol>


<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL 数据库 学习 027 查询-10 group by ---  以某字段分组]]></title>
    <link href="http://aobojaing.github.io/blog/2016/10/17/SQL-Learning-027-Query-10-group-by/"/>
    <updated>2016-10-17T13:05:12+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/10/17/SQL-Learning-027-Query-10-group-by</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>我的电脑系统：<strong>Windows  10</strong> 64位</li>
<li><strong>SQL Server</strong> 软件版本： <strong>SQL Server 2014 Express</strong></li>
</ul>


<hr />

<blockquote><p>本篇博客里面使用了 <code>scott</code> 库，如何你现在还没有添加这个库到你的服务器里面，请在查看本篇博客前，访问<a href="http://www.aobosir.com/blog/2016/10/16/SQL-Learning-016-how-to-attach-a-database/">这篇博文</a>来在你的服务器里面附加<code>scott</code>库。</p></blockquote>

<hr />

<h2><code>group by</code> &mdash; 以某字段分组</h2>

<pre><code class="sql">--输出每个部门的编号 和 该部门的平均工资
select deptno, avg(sal) as "部门平均工资"
    from emp
    group by deptno
</code></pre>

<p><img src="/images/2016-10-17-SQL-Learning-027-Query-10-group-by/1476680047590.png" alt="Alt text" /></p>

<hr />

<pre><code class="sql">-- 判断下面语句是否正确
select deptno, avg(sal) as "部门平均工资" ename
    from emp
    group by deptno
</code></pre>

<p><img src="/images/2016-10-17-SQL-Learning-027-Query-10-group-by/1476680188160.png" alt="Alt text" /></p>

<p>总结： 使用了 <code>group by</code> 之后， <code>select</code> 中只能出现分组后的整体信息，不能出现组内的详细信息。</p>

<pre><code class="sql">--error
select *
    from emp
    group by deptno, job
</code></pre>

<p><img src="/images/2016-10-17-SQL-Learning-027-Query-10-group-by/1476680255640.png" alt="Alt text" /></p>

<pre><code class="sql">--error
select deptno, job, sal
    from emp
    group by deptno, job
</code></pre>

<p><img src="/images/2016-10-17-SQL-Learning-027-Query-10-group-by/1476680302040.png" alt="Alt text" /></p>

<pre><code class="sql">select deptno, job, avg(sal)
    from emp
    group by deptno, job
</code></pre>

<p><img src="/images/2016-10-17-SQL-Learning-027-Query-10-group-by/1476680344010.png" alt="Alt text" /></p>

<p>显示的不是很好，我们就对其进行排序。（没有实际的意义，我们就是讲讲语法。）</p>

<pre><code class="sql">select deptno, job, avg(sal)
    from emp
    group by deptno, job
    order by deptno
</code></pre>

<p><img src="/images/2016-10-17-SQL-Learning-027-Query-10-group-by/1476680377389.png" alt="Alt text" /></p>

<p>只要是聚合函数，在这里都可以使用。</p>

<pre><code class="sql">select deptno, job, avg(sal), count(*), sum(sal),  min(sal)
    from emp
    group by deptno, job
    order by deptno
</code></pre>

<p><img src="/images/2016-10-17-SQL-Learning-027-Query-10-group-by/1476680445168.png" alt="Alt text" /></p>

<hr />

<pre><code class="sql">select deptno, job, avg(sal) "平均工资", count(*) "部门人数", sum(sal) "部门总工资",  min(sal) "部门最低工资"
    from emp
    group by deptno, job
    order by deptno
</code></pre>

<p><img src="/images/2016-10-17-SQL-Learning-027-Query-10-group-by/1476680508397.png" alt="Alt text" /></p>

<hr />

<p><strong>总结：</strong></p>

<p> <code>group by</code></p>

<ul>
<li>格式： <code>group by 字段的集合</code></li>
<li>功能：把表中的记录按照字段分成不同的组</li>
<li>注意：理解 <code>group by a, b, c</code> 的用法

<ul>
<li>先按 <code>a</code> 分组，如果 <code>a</code> 相同，再按 <code>b</code> 分组，如果 <code>b</code> 相同，再按 <code>c</code> 分组。最终统计的最小分组的信息。</li>
</ul>
</li>
</ul>


<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL 数据库 学习 026 查询-09 聚合函数 ---  多行记录返回至一个值，通常用于统计分组的信息]]></title>
    <link href="http://aobojaing.github.io/blog/2016/10/17/SQL-Learning-026-Query-09-aggregate-function-fuzzy-query/"/>
    <updated>2016-10-17T11:05:58+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/10/17/SQL-Learning-026-Query-09-aggregate-function-fuzzy-query</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>我的电脑系统：<strong>Windows  10</strong> 64位</li>
<li><strong>SQL Server</strong> 软件版本： <strong>SQL Server 2014 Express</strong></li>
</ul>


<hr />

<blockquote><p>本篇博客里面使用了 <code>scott</code> 库，如何你现在还没有添加这个库到你的服务器里面，请在查看本篇博客前，访问<a href="http://www.aobosir.com/blog/2016/10/16/SQL-Learning-016-how-to-attach-a-database/">这篇博文</a>来在你的服务器里面附加<code>scott</code>库。</p></blockquote>

<hr />

<h2>函数的分类</h2>

<p>单行函数</p>

<ul>
<li>每一行返回一个值</li>
</ul>


<hr />

<p>多行函数</p>

<ul>
<li>多行返回一个值</li>
<li>聚合函数是多行函数</li>
</ul>


<hr />

<p>例子：</p>

<pre><code class="sql">select lower(ename) from emp;
    --最终返回的是14行
</code></pre>

<p><img src="/images/2016-10-17-SQL-Learning-026-Query-09-aggregate-function-fuzzy-query/1476672968757.png" alt="Alt text" /></p>

<hr />

<pre><code class="sql">select max(sal) from emp;
    --返回时1行 max() 是多行函数
</code></pre>

<p><img src="/images/2016-10-17-SQL-Learning-026-Query-09-aggregate-function-fuzzy-query/1476672998766.png" alt="Alt text" /></p>

<hr />

<h2>聚合函数的分类</h2>

<ul>
<li><code>max()</code> 求最大值</li>
<li><code>min()</code> 求最小值</li>
<li><code>avg()</code> 平均值</li>
<li><code>count()</code> 求个数

<ul>
<li><code>count(*)</code> ：返回表中所有的记录的个数</li>
<li><code>count(字段名)</code> : 返回字段值非空的记录的个数， 重复的记录也会被当做有效记录</li>
<li><code>count(distinct 字段名)</code> ：返回字段不重复并且非空的记录的个数</li>
</ul>
</li>
</ul>


<pre><code class="sql">select count(*) from emp;
    --返回emp表所有记录的个数
</code></pre>

<p><img src="/images/2016-10-17-SQL-Learning-026-Query-09-aggregate-function-fuzzy-query/1476673037243.png" alt="Alt text" /></p>

<hr />

<pre><code class="sql">select count(deptno) from emp;
    --返回值是14，这说明deptno重复的记录也被当做有效的记录
</code></pre>

<p><img src="/images/2016-10-17-SQL-Learning-026-Query-09-aggregate-function-fuzzy-query/1476673083683.png" alt="Alt text" /></p>

<hr />

<pre><code class="sql">select count(distinct deptno) from emp;
    --返回值是3， 统计deptno不重复的记录的个数
</code></pre>

<p><img src="/images/2016-10-17-SQL-Learning-026-Query-09-aggregate-function-fuzzy-query/1476673123560.png" alt="Alt text" /></p>

<hr />

<pre><code class="sql">select count(comm) from emp;
    --返回值是4。 这说明comm为null的记录不会被当做有效的记录
</code></pre>

<p><img src="/images/2016-10-17-SQL-Learning-026-Query-09-aggregate-function-fuzzy-query/1476673148684.png" alt="Alt text" /></p>

<hr />

<h2>注意的问题</h2>

<pre><code class="sql">select max(sal), min(sal), count(*) from emp;
</code></pre>

<p><img src="/images/2016-10-17-SQL-Learning-026-Query-09-aggregate-function-fuzzy-query/1476673188904.png" alt="Alt text" /></p>

<hr />

<pre><code class="sql">select max(sal) "最高工资", min(sal) "最低工资", count(*) "员工人数" from emp;
</code></pre>

<p><img src="/images/2016-10-17-SQL-Learning-026-Query-09-aggregate-function-fuzzy-query/1476673238975.png" alt="Alt text" /></p>

<hr />

<pre><code class="sql">select max(sal), lower(ename) from emp;
    --error 单行函数和多行函数不能混用
</code></pre>

<p><img src="/images/2016-10-17-SQL-Learning-026-Query-09-aggregate-function-fuzzy-query/1476673278431.png" alt="Alt text" /></p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL 数据库 学习 025 查询-08 模糊查询 ---  怎样编写模糊查询语句]]></title>
    <link href="http://aobojaing.github.io/blog/2016/10/17/SQL-Learning-025-Query-08-Fuzzy-Query/"/>
    <updated>2016-10-17T06:59:39+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/10/17/SQL-Learning-025-Query-08-Fuzzy-Query</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>我的电脑系统：<strong>Windows  10</strong> 64位</li>
<li><strong>SQL Server</strong> 软件版本： <strong>SQL Server 2014 Express</strong></li>
</ul>


<hr />

<blockquote><p>本篇博客里面使用了 <code>scott</code> 库，如何你现在还没有添加这个库到你的服务器里面，请在查看本篇博客前，访问<a href="http://www.aobosir.com/blog/2016/10/16/SQL-Learning-016-how-to-attach-a-database/">这篇博文</a>来在你的服务器里面附加<code>scott</code>库。</p></blockquote>

<hr />

<h2>怎样编写模糊查询语句</h2>

<pre><code class="sql">select * from emp where ename like '%A%'
    --ename只要含有字母A就输出
select * from emp where ename like 'A%'
    --ename只要首字母是A的就输出
select * from emp where ename like '%A'
    --ename只要尾字母是A的就输出
</code></pre>

<p><img src="/images/2016-10-17-SQL-Learning-025-Query-08-Fuzzy-Query/1476658355448.png" alt="Alt text" /></p>

<p><img src="/images/2016-10-17-SQL-Learning-025-Query-08-Fuzzy-Query/1476658371703.png" alt="Alt text" /></p>

<p><img src="/images/2016-10-17-SQL-Learning-025-Query-08-Fuzzy-Query/1476658389550.png" alt="Alt text" /></p>

<hr />

<pre><code class="sql">select * from emp where ename like '_A%'
    --ename只要第二个字母是A的就输出
</code></pre>

<p><img src="/images/2016-10-17-SQL-Learning-025-Query-08-Fuzzy-Query/1476658413951.png" alt="Alt text" /></p>

<hr />

<pre><code class="sql">select * from emp where ename like '_[A-F]%'
    --把ename中第二个字符是A或者B或者C或者D或者E或者F的记录输出
</code></pre>

<p><img src="/images/2016-10-17-SQL-Learning-025-Query-08-Fuzzy-Query/1476658456248.png" alt="Alt text" /></p>

<hr />

<pre><code class="sql">select * from emp where ename like '_[^A-F]%'
    --把ename中第二个字符不是A也不是B也不是C也不是D也不是E也不是F的记录输出
</code></pre>

<p><img src="/images/2016-10-17-SQL-Learning-025-Query-08-Fuzzy-Query/1476658507717.png" alt="Alt text" /></p>

<hr />

<p>创建一个 <code>student</code> 表。（预备操作）</p>

<pre><code class="sql">create table student
(
    name nvarchar(20) null,
    age int
);

insert into student values ('张三', 68);
insert into student values ('Tom', 66);
insert into student values ('a_b', 22);
insert into student values ('c%d', 44);
insert into student values ('abc_fe', 56);
insert into student values ('haobin', 25);
insert into student values ('HapBin', 88);
insert into student values ('c%', 66);
insert into student values ('long''s', 100)

select * from student;
</code></pre>

<p><img src="/images/2016-10-17-SQL-Learning-025-Query-08-Fuzzy-Query/1476658533004.png" alt="Alt text" /></p>

<hr />

<pre><code class="sql">select * from student where name like '%\%%' escape '\'
    --把name中包含有%的输出
select * from student where name like '%\_%' escape '\'
    --把name中包含有_的输出
</code></pre>

<p><img src="/images/2016-10-17-SQL-Learning-025-Query-08-Fuzzy-Query/1476658590460.png" alt="Alt text" /></p>

<p><img src="/images/2016-10-17-SQL-Learning-025-Query-08-Fuzzy-Query/1476658616954.png" alt="Alt text" /></p>

<hr />

<p><strong>总结：</strong> <strong>通配符：</strong></p>

<p><strong>格式：</strong> <code>select 字段的集合 from 表名 where 某个字段的名字 like 匹配的条件</code></p>

<blockquote><p>匹配的条件通常含有通配符</p></blockquote>

<ul>
<li><code>%</code>

<ul>
<li>表示任意0个或多个字符</li>
</ul>
</li>
<li><code>_</code> （这个是下划线，不是减号）

<ul>
<li>表示任意单个字符</li>
</ul>
</li>
<li><code>[a-f]</code>

<ul>
<li><code>a</code> 到 <code>f</code> 中的任意单个字符。只能是<code>a</code>、<code>b</code>、<code>c</code>、<code>d</code>、<code>e</code>、<code>f</code> 中的任意一个字符</li>
</ul>
</li>
<li><code>[a, f]</code>

<ul>
<li><code>a</code> 或者 <code>f</code></li>
</ul>
</li>
<li><code>[^a-c]</code>

<ul>
<li>不是<code>a</code>、也不是<code>b</code>，也不是<code>c</code>的任意单个字符</li>
</ul>
</li>
</ul>


<hr />

<p><strong>注意：</strong></p>

<ul>
<li>匹配的内容必须使用单引号括起来。不能省略，也不能改用双引号。</li>
<li><code>escape '\'</code> 里面 <code>escape</code> 后面 <code>''</code> 里面的<code>\</code> 字符就自定义的：通配符。它可以替换成其他的字符（比如：<code>a</code>、<code>b</code>、<code>m</code> 等等）。</li>
</ul>


<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL 数据库 学习 024 查询-07 order by 的用法 --- 以某个字段排序]]></title>
    <link href="http://aobojaing.github.io/blog/2016/10/17/SQL-Learning-024-Query-07-order-by-usage-sort/"/>
    <updated>2016-10-17T03:13:40+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/10/17/SQL-Learning-024-Query-07-order-by-usage-sort</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>我的电脑系统：<strong>Windows  10</strong> 64位</li>
<li><strong>SQL Server</strong> 软件版本： <strong>SQL Server 2014 Express</strong></li>
</ul>


<hr />

<blockquote><p>本篇博客里面使用了 <code>scott</code> 库，如何你现在还没有添加这个库到你的服务器里面，请在查看本篇博客前，访问<a href="http://www.aobosir.com/blog/2016/10/16/SQL-Learning-016-how-to-attach-a-database/">这篇博文</a>来在你的服务器里面附加<code>scott</code>库。</p></blockquote>

<hr />

<h2><code>order by</code> &mdash; 以某个字段排序</h2>

<p><strong>例子：</strong></p>

<pre><code class="sql">select * from emp order by sal;
    --默认是按照升序排序
</code></pre>

<p><img src="/images/2016-10-17-SQL-Learning-024-Query-07-order-by-usage-sort/1476644715874.png" alt="Alt text" /></p>

<hr />

<pre><code class="sql">select * from emp order by deptno, sal;
    --先按照deptno排序，然后再按照sal排序
</code></pre>

<p><img src="/images/2016-10-17-SQL-Learning-024-Query-07-order-by-usage-sort/1476644847648.png" alt="Alt text" /></p>

<hr />

<pre><code class="sql">--asc是升序的意思，默认可以不写 desc是降序
select * from emp order by deptno desc, sal;
    --先按照deptno降序排序，如果deptno相同，再按照sal升序排序
    --记住sal是升序不是降序
    --order by a desc, b, c, d   desc只对a产生影响，不会对后面的b, c, d 产生影响
</code></pre>

<p><img src="/images/2016-10-17-SQL-Learning-024-Query-07-order-by-usage-sort/1476644919129.png" alt="Alt text" /></p>

<hr />

<pre><code class="sql">select * from emp order by deptno, sal desc
    --问题：desc是否会对deptno产生影响？
    --答案：不会
    --先按deptno升序，如果deptno相同，再按sal降序排序
</code></pre>

<p><img src="/images/2016-10-17-SQL-Learning-024-Query-07-order-by-usage-sort/1476644983662.png" alt="Alt text" /></p>

<hr />

<p><strong>总结：</strong></p>

<ul>
<li><code>order by a, b                --a和b都是升序</code></li>
<li><code>order by a, b desc           --a升序 b降序</code></li>
<li><code>order by a desc, b           --a降序 b升序</code></li>
<li><code>order by a desc, b desc  --a和b都是降序</code></li>
</ul>


<p>文字描述：</p>

<ul>
<li>如果不制定排序的标准，则默认是升序。升序用<code>asc</code>表示，默认可以不写</li>
<li>为一个字段制定的排序标准并不会对另一个字段产生影响</li>
<li>强烈建议为每一个字段都指定排序的标准</li>
</ul>

]]></content>
  </entry>
  
</feed>
