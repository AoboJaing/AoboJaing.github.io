<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: cross join | AoboSir 博客]]></title>
  <link href="http://aobojaing.github.io/tags/cross-join/atom.xml" rel="self"/>
  <link href="http://aobojaing.github.io/"/>
  <updated>2016-12-21T11:36:28+08:00</updated>
  <id>http://aobojaing.github.io/</id>
  <author>
    <name><![CDATA[Aobo Jaing]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SQL 数据库 学习 031 查询-14 连接查询 ---  左（右）外连接、完全连接、交叉连接、联合]]></title>
    <link href="http://aobojaing.github.io/blog/2016/10/22/SQL-Learning-31-Query-14-Join-Query-Left-Right-Join-Full-Join-Cross-Join-Union/"/>
    <updated>2016-10-22T18:17:33+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/10/22/SQL-Learning-31-Query-14-Join-Query-Left-Right-Join-Full-Join-Cross-Join-Union</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>我的电脑系统：<strong>Windows  10</strong> 64位</li>
<li><strong>SQL Server</strong> 软件版本： <strong>SQL Server 2014 Express</strong></li>
</ul>


<hr />

<blockquote><p>本篇博客里面使用了 <code>scott</code> 库，如何你现在还没有添加这个库到你的服务器里面，请在查看本篇博客前，访问<a href="http://www.aobosir.com/blog/2016/10/16/SQL-Learning-016-how-to-attach-a-database/">这篇博文</a>来在你的服务器里面附加<code>scott</code>库。</p></blockquote>

<hr />

<h1>连接查询</h1>

<p><strong>定义：</strong></p>

<p>将两个表或者两个以上的表以一定的连接条件连接起来。从中检索出满足条件的数据。</p>

<hr />

<h2>内连接 （<code>innor join</code> 或者 <code>join</code>）</h2>

<p>请看这篇博客：<a href="http://www.aobosir.com/blog/2016/10/21/SQL-Learning-029-Query-12-Connection-query-the-connection/">SQL 数据库学习 查询 &mdash; 内连接</a>。</p>

<hr />

<h2>左（右）外连接 （<code>left join</code> 和 <code>right join</code>）</h2>

<pre><code class="sql">select * from emp "E"
    left join dept "D"
    on "E".deptno = "D".deptno
</code></pre>

<p><img src="/images/2016-10-22-SQL-Learning-31-Query-14-Join-Query-Left-Right-Join-Full-Join-Cross-Join-Union/1477131219555.png" alt="Alt text" /></p>

<p>实现的步骤：</p>

<ol>
<li>用左表的第一行分别和右表的所有行进行的连接，如果有匹配的行，则一起输出，如果右表有多行匹配，则结果集输出多行，如果没有匹配行，则结果集中只输出一行，该输出行左边为左表第一行内容，右边全部输出<code>null</code>。</li>
<li>然后再用左表第二行和右边所有行进行连接，如果没有匹配行，则结果集中只输出一行，该输出行左边为左表第二行内容，右边全部输出<code>null</code>。</li>
<li>以此类推，直至左边所有行连接完毕。</li>
<li>因为右边很可能出现有多行和左边的某一行匹配，所以左连接产生的结果集的行数很可能大于 <code>left join</code> 左边表的记录的总数。</li>
<li>帮助文档：左向外连接的结果集包括<code>LEFT OUTER</code> 子句中指定的左表的所有行，而不仅仅是连接列所匹配的行。如果左表的某行在右表中没有匹配行，则在相关联的结果集行中右表的所有选择列表均为空值。</li>
</ol>


<hr />

<p>左外连接的实际意义</p>

<ul>
<li>返回一个事情及其该事物的相关信息，如果该事物没有相关信息，则输出<code>null</code></li>
<li>例子：

<ul>
<li>已知条件： <code>productStocks</code> 货物库存表、 <code>orderform</code> 订单表、<code>pID</code> 是产品的编号</li>
<li><strong>sql语句</strong></li>
<li><code>select productStocks.*, orderform.* from productStocks left join orderform on productStocks.pID=orderform.pID</code></li>
<li>实际意义： 返回仓库中现存货物的信息及其该货物的订单信息，如果该货物没有订单信息，在把该货物的订单信息全部输出为<code>null</code>。</li>
</ul>
</li>
</ul>


<hr />

<h2>完全连接（<code>full join</code>）</h2>

<pre><code class="sql">select * from productStocks
    full join orderform
    on productStocks.pid = orderform.pid
</code></pre>

<p><img src="/images/2016-10-22-SQL-Learning-31-Query-14-Join-Query-Left-Right-Join-Full-Join-Cross-Join-Union/1477131238849.png" alt="Alt text" /></p>

<p>结果集中包含三部分内容：</p>

<ol>
<li>两个表中匹配的所有行记录</li>
<li>左表中那些在右表中找不到匹配的行的记录。这些记录的右边全为<code>null</code></li>
<li>右表中那些在左表中找不到匹配的行的记录。这些记录的左边全为<code>null</code></li>
</ol>


<hr />

<h2>交叉连接（<code>cross join</code>）</h2>

<pre><code class="sql">select *
    from emp
    cross join dept
</code></pre>

<p>等价于：</p>

<pre><code class="sql">select * from emp, dept
</code></pre>

<p>效果都是将两个表进行笛卡尔积。</p>

<p><img src="/images/2016-10-22-SQL-Learning-31-Query-14-Join-Query-Left-Right-Join-Full-Join-Cross-Join-Union/1477131282846.png" alt="Alt text" /></p>

<hr />

<h2>自连接</h2>

<p><strong>定义：</strong> 一张表自己和自己连接起来查询数据。</p>

<p>例子：不准用聚合函数 求薪水最高的员工的信息。</p>

<pre><code class="sql">--用聚合函数 求出薪水最高的员工的信息
select * 
    from emp
    where sal = (select max(sal) from emp)
</code></pre>

<pre><code class="sql">--不准用聚合函数 求出薪水最高的员工的信息
select * from emp 
    where empno not in (
        select distinct "E1".empno
        from emp "E1"
        join emp "E2"
        on "E1".sal &lt; "E2".sal
    )
</code></pre>

<p><img src="/images/2016-10-22-SQL-Learning-31-Query-14-Join-Query-Left-Right-Join-Full-Join-Cross-Join-Union/1477063139982.png" alt="Alt text" /></p>

<hr />

<h2>联合（<code>union</code>）</h2>

<p><strong>例子：</strong></p>

<p>输出每一个员工的姓名、工资、上司的姓名。</p>

<pre><code class="sql">select "E1".ename as "员工姓名","E1".sal as "员工工资", "E2".ename as "上司姓名" 
    from emp "E1", emp "E2"
    where "E1".mgr = "E2".EMPNO 
union
select ename, sal, '已是最大老板' from emp where mgr is null
</code></pre>

<p><img src="/images/2016-10-22-SQL-Learning-31-Query-14-Join-Query-Left-Right-Join-Full-Join-Cross-Join-Union/1477130066693.png" alt="Alt text" /></p>

<hr />

<p><strong>定义：</strong></p>

<p>表和表之间的数据以纵向的方式连接在一起。注意：我们以前讲的所有的连接是以横向的方式连接在一起的。</p>

<p><strong>注意：</strong></p>

<p>联合就是：若干个<code>select</code> 子句要联合成功的话，必须得满足两个条件：</p>

<ol>
<li>这若干个 <code>select</code> 子句输出的列数必须是相等的。</li>
<li>这若干个 <code>select</code> 子句输出列的数据类型至少是兼容的。</li>
</ol>


<hr />
]]></content>
  </entry>
  
</feed>
