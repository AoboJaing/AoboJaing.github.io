<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | AoboSir 博客]]></title>
  <link href="http://aobojaing.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://aobojaing.github.io/"/>
  <updated>2016-11-29T20:14:57+08:00</updated>
  <id>http://aobojaing.github.io/</id>
  <author>
    <name><![CDATA[Aobo Jaing]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning Python 016 写文件时，将其用指定的编码方式保存（比如：UTF-8无BOM编码方式）]]></title>
    <link href="http://aobojaing.github.io/blog/2016/11/29/python-open-save-file-specify-encoding-utf-8/"/>
    <updated>2016-11-29T20:13:51+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/11/29/python-open-save-file-specify-encoding-utf-8</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>使用的电脑系统：Windows 10 64位</li>
<li>使用的开发集成环境：PyCharm 2016.1.4</li>
<li>使用的Python的版本：python 3.5.0</li>
</ul>


<hr />

<h2>学习这个知识点的原因</h2>

<p>举一个实例：</p>

<p><strong>Octopress</strong>站点路径里面博文文件（<code>.markdown</code>后缀文件）必须要是以UTF-8无BOM编码方式编码的文件，否则执行<code>rake generate</code>命令会出现下面这个错误：</p>

<p><img src="/images/2016-11-29-python-open-save-file-specify-encoding-utf-8/1480419391696.png" alt="Alt text" /></p>

<pre><code>Error reading file F:/octopress/source/_posts/xxxx.markdown: invalid byte sequence in UTF-8
  Liquid Exception: invalid byte sequence in UTF-8 in _posts/xxxx.markdown/#excerpt
</code></pre>

<p>所以，为了解决不要出现这个问题，我们需要将文件指定你希望的编码方式保存。</p>

<h2>将其用指定的编码方式保存（比如：UTF-8无BOM编码方式）</h2>

<p>其实很简单，我们只需要这样做：</p>

<pre><code class="python">file = open(file_path, 'w', encoding='utf-8')
</code></pre>

<p>这样<code>file</code>文件就是以<strong>Utf-8无BOM编码方式</strong>编码的文件。</p>

<blockquote><p>我们也看到了，其实不是将<code>file</code>保存为以<strong>Utf-8无BOM编码方式</strong>编码的文件，而是创建这个一个以<strong>Utf-8无BOM编码方式</strong>编码的文件 <code>file</code>。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Python 015 解决问题：读取文件时，出现乱码或者“UnicodeDecodeError 'Gbk' Codec Can't Decode Byte 0xXX in Position XX: Incomplete Multibyte Sequence” 错误]]></title>
    <link href="http://aobojaing.github.io/blog/2016/11/29/Python-read-file-Garbled-UnicodeDecodeError-gbk-codec-cant-decode-error/"/>
    <updated>2016-11-29T19:18:27+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/11/29/Python-read-file-Garbled-UnicodeDecodeError-gbk-codec-cant-decode-error</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>使用的电脑系统：Windows 10 64位</li>
<li>使用的开发集成环境：PyCharm 2016.1.4</li>
<li>使用的Python的版本：python 3.5.0</li>
</ul>


<hr />

<h2>出现的错误</h2>

<p>读取文件时，出现<strong>乱码</strong>或者<code>UnicodeDecodeError: 'gbk' codec can't decode byte 0xXX in position XX: incomplete multibyte sequence</code> 错误</p>

<hr />

<h2>出现错误的原因</h2>

<p>这两个错误可能会出现一个，两个错误的出现的原因是一样的：当我们使用了一个不正确的编码方式去读取一个不是用这个编码方式编码的文件时，轻者出现乱码，重者出现<code>UnicodeDecodeError</code>错误。</p>

<hr />

<h2>模拟错误发生现场</h2>

<pre><code class="python">file = open('newfile.txt', 'w', encoding='utf-8')
file.write('你好，AoboSir.')
file.close()
file = open('newfile.txt', 'r')
print(file.read())
file.close()
</code></pre>

<p>运行输出：</p>

<pre><code>浣犲ソ锛孉oboSir.
</code></pre>

<hr />

<pre><code class="python">file = open('newfile.txt', 'w', encoding='utf-8')
file.write('你好，AoboSir。')
file.close()
file = open('newfile.txt', 'r')
print(file.read())
file.close()
</code></pre>

<p>运行输出：</p>

<pre><code>Traceback (most recent call last):
  File "D:/WorkSpace/test_ws/demo/learning_python_15.py", line 6, in &lt;module&gt;
    print(file.read())
UnicodeDecodeError: 'gbk' codec can't decode byte 0x82 in position 35: incomplete multibyte sequence
</code></pre>

<hr />

<h2>解决办法</h2>

<p>读取文件时，指定正确的编码方式：</p>

<pre><code class="python">file = open('newfile.txt', 'r', encoding='utf-8')
</code></pre>

<p>现在再运行，就正常了：</p>

<pre><code>你好，AoboSir。
</code></pre>

<hr />

<h2>搞定</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Python 014 使用 Pip 工具的注意事项 --- 混淆的python2 和 Python3]]></title>
    <link href="http://aobojaing.github.io/blog/2016/11/23/pip-install-python2-python3/"/>
    <updated>2016-11-23T00:24:01+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/11/23/pip-install-python2-python3</id>
    <content type="html"><![CDATA[<hr />

<p><strong>Q : </strong> 如果你的电脑之前安装了Python2，那么Python2 有自己的pip工具，Python3 也是有自己的pip工具，所以，如果你在DOS命令行上执行<code>pip install some-package-name</code>命令的时候，系统会使用哪个pip工具呢？是python2的pip，还是python3的pip？</p>

<p><strong>A : </strong> 如果你先安装的是python2，后安装的python3，那么系统默认使用python2的pip；反之，如果你先安装的是python3，后安装的python2，那么系统默认安装的是python3的pip。</p>

<p><strong>解决方法 ： </strong> 为了避开这个问题，我们在使用 pip 工具时，使用绝对路径：</p>

<p><strong>使用 python2 的 pip</strong></p>

<pre><code>cd C:\Python27\Scripts
pip.exe install some-package-name
</code></pre>

<p><strong>使用 python3 的 pip</strong></p>

<pre><code>cd C:\Users\AOBO\AppData\Local\Programs\Python\Python35\Scripts
pip.exe install some-package-name
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Python 013 按行读取文件（逐行读取） --- 按行写入文件（逐行写入） --- 实战：从字幕文件中提取字幕内容]]></title>
    <link href="http://aobojaing.github.io/blog/2016/11/18/Learning-python-013-read-and-write-one-line/"/>
    <updated>2016-11-18T04:41:50+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/11/18/Learning-python-013-read-and-write-one-line</id>
    <content type="html"><![CDATA[<hr />

<p>使用的开发集成环境：PyCharm 2016.1.4
使用的Python的版本：python 2.7.10</p>

<hr />

<h2>知识点：Python 按行读取文件</h2>

<h3>读取整个文件的内容</h3>

<pre><code class="python">f = open('filename.txt', 'r')
text = f.read()
f.close()

print text
</code></pre>

<h3>读取一行的内容（按行读文件的内容）</h3>

<p>参考网站：</p>

<p>Python逐行读取文件内容
<a href="http://www.cnblogs.com/sysuoyj/archive/2012/03/14/2395789.html">http://www.cnblogs.com/sysuoyj/archive/2012/03/14/2395789.html</a></p>

<pre><code class="python">f = open('filename.txt', 'r')

while 1:
    line = f.readline()
    if not line:
        break
    print text
    pass

f.close()
</code></pre>

<p>缺点：它依赖于前后文的关系，所以不能获取指定行的内容。</p>

<h3>读取一行的内容 和 行号</h3>

<p>参考网站：</p>

<p>python读取文件同时输出行号和内容
<a href="http://outofmemory.cn/code-snippet/3222/python-duqu-file-tongshi-output-xinghao-content">http://outofmemory.cn/code-snippet/3222/python-duqu-file-tongshi-output-xinghao-content</a></p>

<pre><code class="python">f = open('filename.txt', 'r')
for (num,value) in enumerate(f):
    print "line number", num, "is:", value
f.close()
</code></pre>

<p>缺点：虽然这段代码可以获取到指定行的内容，但是，使用<code>enumerate()</code>函数获取指定行内容的代价是：需要对所有<strong>行</strong>依次进行编号，可想运算量之大。</p>

<h3>读取指定行的内容</h3>

<p>参考网站：</p>

<p>Python 从指定行读取数据
<a href="http://blog.163.com/xiaowei_090513/blog/static/11771835920140251257802">http://blog.163.com/xiaowei_090513/blog/static/11771835920140251257802</a></p>

<pre><code class="python">import linecache

num = 20
linecache.getline('filename.txt', num)
</code></pre>

<p>优点：读取的是缓存内的数据，速度快，并且代码简单。</p>

<hr />

<h2>知识点：Python 按行写入文件</h2>

<p>参考网站：</p>

<p>Python文件读写
<a href="http://cxymrzero.github.io/blog/2015/03/19/python-file/">http://cxymrzero.github.io/blog/2015/03/19/python-file/</a>
Python读写文件
<a href="http://blog.csdn.net/adupt/article/details/4435615">http://blog.csdn.net/adupt/article/details/4435615</a></p>

<h3>写一行（新建文件、替换现有文件）</h3>

<pre><code class="python">f = open('namefile.txt', 'w')
f.write('the first line: hello world in the new file.\n')
f.write('the sencond line: ')
f.write('this is also the second line.\n')
f.close()

f = open('namefile.txt', 'r')
text = f.read()
f.close()
print text
</code></pre>

<p>执行输出：</p>

<pre><code>the first line: hello world in the new file.
the sencond line: this is also the second line.
</code></pre>

<p><code>f = open('namefile.txt', 'w')</code>这段代码的执行：如果有这个<code>namefile.txt</code>文件，那就将现有的<code>namefile.txt</code>文件里面的内容全部自动清空；如果没有这个<code>namefile.txt</code>文件，那就自动新建一个<code>namefile.txt</code>文件。</p>

<h3>写一行（在原有文件后面追加写入）</h3>

<pre><code class="python">f = open('namefile.txt', 'w+')
f.write('the last line: hello world in the new file.\n')
f.close()

f = open('namefile.txt', 'r')
text = f.read()
f.close()
print text
</code></pre>

<p>输出：</p>

<pre><code>the first line: hello world in the new file.
the sencond line: this is also the second line.
the last line: hello world in the new file.
</code></pre>

<hr />

<h2>实战：从字幕文件中提取字幕内容</h2>

<p>github源代码网址：<a href="https://github.com/AoboJaing/youtube-srt-to-txt">https://github.com/AoboJaing/youtube-srt-to-txt</a></p>

<h3>如何获取字幕文件</h3>

<p>参考网站：<a href="https://www.youtube.com/watch?v=d9ctCc2AXCw">https://www.youtube.com/watch?v=d9ctCc2AXCw</a></p>

<p>视频网站： <a href="https://www.youtube.com/">https://www.youtube.com/</a></p>

<p>字幕提取网站：<a href="http://mo.dbxdb.com/setting.html">http://mo.dbxdb.com/setting.html</a></p>

<h3>设计思路</h3>

<p>输入是英文字幕文件和中文字幕文件，输出是英文配中文的txt文件</p>

<p>英文字幕文件</p>

<p><img src="/images/2016-11-18-Learning-python-013-read-and-write-one-line/1479414135007.png" alt="Alt text" /></p>

<p>中文字幕文件</p>

<p><img src="/images/2016-11-18-Learning-python-013-read-and-write-one-line/1479414161811.png" alt="Alt text" /></p>

<p>输出：英文配中文的txt文件</p>

<p><img src="/images/2016-11-18-Learning-python-013-read-and-write-one-line/1479414198952.png" alt="Alt text" /></p>

<h3>代码</h3>

<pre><code class="python"># coding : utf-8

import linecache

file_srt = open('Servos - working principle and homemade types.srt', 'r')
file_txt = open('newfile.txt', 'w')

cout=1
for (num, value) in enumerate(file_srt):
    if cout == 5:
        cout = 1
    if cout == 3:
        file_txt.write(linecache.getline('en-Servos - working principle and homemade types.srt', num+1))
        file_txt.write(value)
    cout += 1

file_srt.close()
file_txt.close()
</code></pre>

<h3>运行输出</h3>

<pre><code>Youtube subtitles download by mo.dbxdb.com 
Youtube subtitles download by mo.dbxdb.com 
In this video I would like to explain the functionality of servos and how to convert conventional DC motors into homebuilt servos.
在这部影片中，我想解释一下舵机以及如何传统的直流电动机转换成自制伺服系统的功能。 
A servo is a device that produces motion accordant to a command signal from a control system.
伺服是，从一个控制系统产生运动一致来的命令信号的装置。 
Usually an electric motor is used to create a mechanical force and the servomechanism rotates at a velocity that approximates the command signal.
一般的电动机被用来创建一个机械力和伺服机构在近似于指令信号的速度旋转。 
...
...
</code></pre>
]]></content>
  </entry>
  
</feed>
