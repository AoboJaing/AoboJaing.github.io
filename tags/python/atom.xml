<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Python | AoboSir 博客]]></title>
  <link href="http://aobojaing.github.io/tags/python/atom.xml" rel="self"/>
  <link href="http://aobojaing.github.io/"/>
  <updated>2016-12-01T04:13:19+08:00</updated>
  <id>http://aobojaing.github.io/</id>
  <author>
    <name><![CDATA[Aobo Jaing]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning Python 020 pass 的用法]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/01/python-pass/"/>
    <updated>2016-12-01T04:12:13+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/01/python-pass</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>使用的电脑系统：Windows 10 64位</li>
<li>使用的开发集成环境：PyCharm 2016.1.4</li>
<li>使用的Python的版本：python 2.7.10 和 python 3.5.0</li>
</ul>


<hr />

<h2>pass 的用法</h2>

<p>参考网站：<a href="http://www.runoob.com/python/python-pass-statement.html">Python pass 语句</a></p>

<blockquote><p>Python2 和 Python3 中 pass 的用法都是一样的。</p></blockquote>

<p><code>pass</code> 就是一个空语句，没有任何实际意义，作用是保存程序结构的完整性。</p>

<p>因为Python不像C/C++语言那样，定义一个代码块使用 <code>{}</code>。Python是使用<strong>缩进</strong>的形式来表述一个代码块的。</p>

<p>比如说想C语言里面的下面这段代码，如果换成Python，怎么写呢？</p>

<pre><code class="cpp">while(1){
}
</code></pre>

<p>换成Python，这样写：</p>

<pre><code class="python">while True:
    pass
</code></pre>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Python 019 生成器（Generators）和 yield]]></title>
    <link href="http://aobojaing.github.io/blog/2016/11/30/python2-python3-Generators-yield/"/>
    <updated>2016-11-30T23:17:17+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/11/30/python2-python3-Generators-yield</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>使用的电脑系统：Windows 10 64位</li>
<li>使用的开发集成环境：PyCharm 2016.1.4</li>
<li>使用的Python的版本：python 2.7.10 和 python 3.5.0</li>
</ul>


<hr />

<h2>知识点：生成器</h2>

<p><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c04/p03_create_new_iteration_with_generators.html">生成器只能用于迭代操作。</a></p>

<p>一个函数，其中带 <code>yield</code>    关键字的代码，它不会执行，只是记下有这个操作；其他代码正常的执行。而被记下的这些操作会像队列一样存起来，这个“队列”就是 <strong>生成器</strong>，并且会类似于<code>return</code>一样返回。</p>

<p>一个函数的代码里面有 <code>yield</code> 关键字，那么这个函数就是一个<strong>制造生成器的函数</strong>。</p>

<blockquote><p>生成器是Python中的高级特性。我之前学习过，还写了一个博客：<a href="http://blog.csdn.net/github_35160620/article/details/51985596?locationNum=1&amp;fps=1">Learning Python 011 高级特性 2</a></p></blockquote>

<hr />

<h2>Python3 例子</h2>

<pre><code class="python">&gt;&gt;&gt; def f():
...     yield 1
...     yield 2
...     yield 3
...
</code></pre>

<pre><code class="python">&gt;&gt;&gt; g = f()
&gt;&gt;&gt; g
&lt;generator object f at 0x0000023B63151258&gt;
&gt;&gt;&gt; type(g)
&lt;class 'generator'&gt;
&gt;&gt;&gt; next(g)
1
&gt;&gt;&gt; next(g)
2
&gt;&gt;&gt; next(g)
3
&gt;&gt;&gt; next(g)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
&gt;&gt;&gt; list(g)
[]
&gt;&gt;&gt; g = f()
&gt;&gt;&gt; list(g)
[1, 2, 3]
&gt;&gt;&gt; list(g)
[]
&gt;&gt;&gt;
</code></pre>

<hr />

<pre><code class="python">&gt;&gt;&gt; def counter(num):
...     print('Run to the ' + str(num) + ' yield')
...
&gt;&gt;&gt; def f():
...     print('start!')
...     yield counter(1)
...     yield counter(2)
...     yield counter(3)
...     print('Done!')
...
</code></pre>

<pre><code class="python">&gt;&gt;&gt; g = f()
&gt;&gt;&gt; g
&lt;generator object f at 0x000001D4843E1258&gt;
&gt;&gt;&gt; next(g)
start!
Run to the 1 yield
&gt;&gt;&gt; next(g)
Run to the 2 yield
&gt;&gt;&gt; next(g)
Run to the 3 yield
&gt;&gt;&gt; next(g)
Done!
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
&gt;&gt;&gt; list(g)
[]
&gt;&gt;&gt; g = f()
&gt;&gt;&gt; list(g)
start!
Run to the 1 yield
Run to the 2 yield
Run to the 3 yield
Done!
[None, None, None]
&gt;&gt;&gt;
</code></pre>

<hr />

<h2>Python2 实例</h2>

<p>生成器在 python2 的用法和在python3中的用法一样，唯一的区别是：</p>

<ul>
<li>python2 中 可以使用<code>next(g)</code> 或者 <code>g.next()</code>。 这样两个等价</li>
<li>python3 中 只有<code>next(g)</code>，没有<code>g.next()</code>。</li>
</ul>


<hr />

<p>参考网站：<a href="http://wiki.jikexueyuan.com/project/start-learning-python/215.html">生成器</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Python 018 Python2 和 Python3 中 range()函数的使用]]></title>
    <link href="http://aobojaing.github.io/blog/2016/11/30/python2-python3-range-function/"/>
    <updated>2016-11-30T13:37:04+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/11/30/python2-python3-range-function</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>使用的电脑系统：Windows 10 64位</li>
<li>使用的开发集成环境：PyCharm 2016.1.4</li>
<li>使用的Python的版本：python 2.7.10 和 python 3.5.0</li>
</ul>


<hr />

<h2><code>range()</code> 函数</h2>

<ul>
<li>Python2中：用来创建一个列表（list）。</li>
<li>Python3中：用来创建一个可以生成list或者tuple的生成器。</li>
</ul>


<h2>Python2 <code>range()</code>函数 知识点</h2>

<p>Python2 中的<code>range()</code> 函数可以生成一个list。（分配内存空间）</p>

<pre><code class="python">a = range(10)
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
b = range(4,10)
# [4, 5, 6, 7, 8, 9]
</code></pre>

<hr />

<p>Python2 中的<code>xrange()</code>函数不是生成一个list，而是生成一个生成器，不分配内存。</p>

<pre><code class="python">a = xrange(10)
# xrange(10)
b = list(xrange(10))
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
c = tuple(xrange(10))
# (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
</code></pre>

<hr />

<h2>Python3 <code>range()</code>函数 知识点</h2>

<hr />

<pre><code class="python">a = range(10)
# range(0, 10)
</code></pre>

<p>输出：（打印出来的不是一个列表，而是一个生成器）。</p>

<p>Python3 选择这样做的原因：可以节约内存空间，详情请参考这篇博客：<a href="http://www.aobosir.com/blog/2016/11/30/python2-python3-Memory-release-gc/">Python2和Python3的内存释放</a>。</p>

<p>Python3中的<code>range()</code>函数的功能和Python2中的<code>xrange()</code>函数一样，所以在Python3中没有<code>xrange()</code>函数。</p>

<hr />

<p>要想生成<strong>list</strong>或者<strong>tuple</strong>，这样做：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">b</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">10</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">a</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">b</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">10</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">----------</span>
</span><span class='line'>
</span><span class='line'><span class="c">## `range()`函数的使用</span>
</span><span class='line'>
</span><span class='line'><span class="err">下面这段代码在</span><span class="n">Python2</span> <span class="err">和</span> <span class="n">Python3</span><span class="err">中得到的运行结果都是一样的。</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>输出：</p>

<pre><code>0
1
2
3
4
5
6
7
8
9
</code></pre>

<p>运行结果是一样的，但是运行的原理不同：</p>

<ul>
<li>Python2：在第一次执行 <code>range(10)</code>，就生成了一个<code>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</code>列表。</li>
<li>Python3：在每次执行<code>range(10)</code>时，生成一个元素<code>i</code>。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Python 017 — Python2 和 Python3 的内存释放]]></title>
    <link href="http://aobojaing.github.io/blog/2016/11/30/python2-python3-Memory-release-gc/"/>
    <updated>2016-11-30T13:34:56+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/11/30/python2-python3-Memory-release-gc</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>使用的电脑系统：Windows 10 64位</li>
<li>使用的开发集成环境：PyCharm 2016.1.4</li>
<li>使用的Python的版本：python 2.7.10 和 python 3.5.0</li>
</ul>


<hr />

<h2>学习Python的内存释放知识点的动机</h2>

<p>之前我学过很多Python的程序，偶然的一次，我打开任务管理器，看到我写的程序，运行时占用了大量的内存，所以，我希望学会如何释放内存，来优化我的程序，也不给电脑照成太大的负担，所以，我想学会：Python的内存释放这个知识点。</p>

<hr />

<p>参考网站： <a href="http://qinqianshan.com/python-memory-the-gc-module-released/">gc模块–Python内存释放</a></p>

<p>下面写几个实验程序，里面都是使用<code>range()</code> 函数来分配内存空间的。<code>range()</code>函数的详细介绍，请见这篇博客：<a href="http://www.aobosir.com/blog/2016/11/30/python2-python3-range-function/">range()函数在python2 和 python3中的使用介绍</a>。</p>

<h2>Python2 内存释放</h2>

<p>未优化前的代码：</p>

<pre><code class="python">a = range(1000*10000)
while True:
    pass
</code></pre>

<p><img src="/images/2016-11-30-python2-python3-Memory-release-gc/1480424648330.png" alt="Alt text" /></p>

<hr />

<p>优化内存的代码：</p>

<p>使用手动释放内存的方法来优化内存。</p>

<pre><code class="python">import gc
a = range(1000*10000)
del a
gc.collect()
while True:
    pass
</code></pre>

<p>可以看出，占用的内存空间明显减小了。</p>

<p><img src="/images/2016-11-30-python2-python3-Memory-release-gc/1480424705571.png" alt="Alt text" /></p>

<hr />

<p>既优化了内存，也优化了CPU 的代码</p>

<p>使用睡眠来优化CPU运行。</p>

<pre><code class="python">import gc
import time

a = range(1000*10000)
del a
gc.collect()
while True:
    time.sleep(1.0)
    pass
</code></pre>

<p><img src="/images/2016-11-30-python2-python3-Memory-release-gc/1480424877933.png" alt="Alt text" /></p>

<hr />

<h2>Python3 内存释放</h2>

<p>未优化前的代码：</p>

<pre><code class="python">a = range(1000*10000)
while True:
    pass
</code></pre>

<p>使用Python3库运行未优化的代码，所需要的消耗的内存空间和使用Python2运行优化内存的代码消耗的内存空间 差不多。</p>

<p><img src="/images/2016-11-30-python2-python3-Memory-release-gc/1480433041923.png" alt="Alt text" /></p>

<hr />

<p>优化内存的代码：</p>

<pre><code class="python">import gc
a = range(1000*10000)
del a
gc.collect()
while True:
    pass
</code></pre>

<p>可以看出，所暂用的内存空间没有任何增减。</p>

<p><img src="/images/2016-11-30-python2-python3-Memory-release-gc/1480432975323.png" alt="Alt text" /></p>

<hr />

<p>既优化了内存，也优化了CPU 的代码：</p>

<pre><code class="python">import gc
import time

a = range(1000*10000)
del a
gc.collect()
while True:
    time.sleep(1.0)
    pass
</code></pre>

<p><img src="/images/2016-11-30-python2-python3-Memory-release-gc/1480432888777.png" alt="Alt text" /></p>

<hr />

<h2>总结</h2>

<p>Python3 真的是比 Python2 更加的完善了，从这一点上也可以看出来，Python语言是第4代语言里面非常杰出的语言。随着它的不断发展，它会运行速度慢和内存消耗大的缺点会慢慢的消失（因为：<a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/chapters/p15_c_extensions.html">许多Python内置库是用C语言写的</a>）。我看好Python。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Python 016 写文件时，将其用指定的编码方式保存（比如：UTF-8无BOM编码方式）]]></title>
    <link href="http://aobojaing.github.io/blog/2016/11/29/python-open-save-file-specify-encoding-utf-8/"/>
    <updated>2016-11-29T20:13:51+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/11/29/python-open-save-file-specify-encoding-utf-8</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>使用的电脑系统：Windows 10 64位</li>
<li>使用的开发集成环境：PyCharm 2016.1.4</li>
<li>使用的Python的版本：python 3.5.0</li>
</ul>


<hr />

<h2>学习这个知识点的原因</h2>

<p>举一个实例：</p>

<p><strong>Octopress</strong>站点路径里面博文文件（<code>.markdown</code>后缀文件）必须要是以UTF-8无BOM编码方式编码的文件，否则执行<code>rake generate</code>命令会出现下面这个错误：</p>

<p><img src="/images/2016-11-29-python-open-save-file-specify-encoding-utf-8/1480419391696.png" alt="Alt text" /></p>

<pre><code>Error reading file F:/octopress/source/_posts/xxxx.markdown: invalid byte sequence in UTF-8
  Liquid Exception: invalid byte sequence in UTF-8 in _posts/xxxx.markdown/#excerpt
</code></pre>

<p>所以，为了解决不要出现这个问题，我们需要将文件指定你希望的编码方式保存。</p>

<h2>将其用指定的编码方式保存（比如：UTF-8无BOM编码方式）</h2>

<p>其实很简单，我们只需要这样做：</p>

<pre><code class="python">file = open(file_path, 'w', encoding='utf-8')
</code></pre>

<p>这样<code>file</code>文件就是以<strong>Utf-8无BOM编码方式</strong>编码的文件。</p>

<blockquote><p>我们也看到了，其实不是将<code>file</code>保存为以<strong>Utf-8无BOM编码方式</strong>编码的文件，而是创建这个一个以<strong>Utf-8无BOM编码方式</strong>编码的文件 <code>file</code>。</p></blockquote>
]]></content>
  </entry>
  
</feed>
