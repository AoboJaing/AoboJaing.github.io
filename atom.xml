<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[AoboSir 博客]]></title>
  <link href="http://aobojaing.github.io/atom.xml" rel="self"/>
  <link href="http://aobojaing.github.io/"/>
  <updated>2016-12-08T07:26:52+08:00</updated>
  <id>http://aobojaing.github.io/</id>
  <author>
    <name><![CDATA[Aobo Jaing]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning Python 008 正则表达式-006 正则表达式中如果有换行，代码要怎么写]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/08/python-Regular-Expressions-Line-feed/"/>
    <updated>2016-12-08T07:24:18+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/08/python-Regular-Expressions-Line-feed</id>
    <content type="html"><![CDATA[<hr />

<h2>开发环境</h2>

<ul>
<li>Python第三方库：lxml、Twisted、pywin32、scrapy</li>
<li>Python 版本：python-3.5.0-amd64</li>
<li>PyCharm软件版本：pycharm-professional-2016.1.4</li>
<li>电脑系统：Windows 10 64位</li>
</ul>


<p>如果你还没有搭建好开发环境，请到<a href="http://www.aobosir.com/blog/2016/11/26/python3-large-web-crawler-001-Build-development-environment/">这篇博客</a>。</p>

<hr />

<p>当我在使用正则表达式去提取网页源代码中的有效数据的时候。发现：我要提取的有效数据所需要使用的正则表达式中有换行。那么这个时候，正则表达式要怎么写？</p>

<p>目标网站：<a href="http://blog.csdn.net/github_35160620/article/details/53512977">http://blog.csdn.net/github_35160620/article/details/53512977</a></p>

<p>要提取的有效信息：访问的数量</p>

<p><img src="http://aobojaing.github.io/images/2016-12-8-python-Regular-Expressions-Line-feed/1481152435523.png" alt="Alt text" /></p>

<p>查看网页源代码：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-8-python-Regular-Expressions-Line-feed/1481152530825.png" alt="Alt text" /></p>

<p>所以，如果我们想提取出访问数量，需要使用的正则表达式中会存在换行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'''&lt;dt class="item"&gt;(.^?)&lt;/dt&gt;
</span><span class='line'>            &lt;dd class="item_name"&gt;访问'''</span></code></pre></td></tr></table></div></figure>


<p>但是这样是不能匹配到结果。而正确的正则表达式是下面这样的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'&lt;dt class="item"&gt;(.*?)&lt;/dt&gt;\r\n            &lt;dd class="item_name"&gt;访问'</span></code></pre></td></tr></table></div></figure>


<blockquote><p>使用转义字符 <code>\r\n</code> 来表示换行。</p></blockquote>

<p>代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def next(self, response):
</span><span class='line'>    pattam_visits = '&lt;dt class="item"&gt;(.*?)&lt;/dt&gt;\r\n            &lt;dd class="item_name"&gt;访问'
</span><span class='line'>    # print('response.body type is ', type(response.body))
</span><span class='line'>    # print('response.body.decode type is ', type(response.body.decode('utf-8', 'ignore')))
</span><span class='line'>
</span><span class='line'>    body_data = response.body.decode('utf-8', 'ignore') # .replace(u'\xa9', u'')
</span><span class='line'>    visits = re.compile(pattam_visits).findall(body_data)[0]
</span><span class='line'>    print('当前访问量为：', visits)
</span><span class='line'>    print('-------------------')
</span><span class='line'>    pass</span></code></pre></td></tr></table></div></figure>


<blockquote><p><code>compile()</code> 函数的使用方法<a href="http://www.aobosir.com/blog/2016/12/08/python-compile-Regular-Expressions-pattam/">在这里</a>可以了解。</p></blockquote>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Python 008 正则表达式-005 Compile模板的使用]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/08/python-compile-Regular-Expressions-pattam/"/>
    <updated>2016-12-08T07:05:09+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/08/python-compile-Regular-Expressions-pattam</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>使用的电脑系统：Windows 10 64位</li>
<li>使用的开发集成环境：PyCharm 2016.1.4</li>
<li>使用的Python的版本：python 2.7.10 和 python 3.5.0</li>
</ul>


<hr />

<h2>compile()函数的用法</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'><span class="nb">str</span> <span class="o">=</span> <span class="s">&#39;fdfgdrthxxi--gdfgexxlove--dsdfwesdxxyou--dfgdf&#39;</span>
</span><span class='line'><span class="n">pattam_str</span> <span class="o">=</span> <span class="s">&#39;xx(.*?)--&#39;</span>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">pattam_str</span><span class="p">)</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;</span><span class="n">python</span> <span class="n">learningpython29</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;i&#39;</span><span class="p">,</span> <span class="s">&#39;love&#39;</span><span class="p">,</span> <span class="s">&#39;you&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>解释：</p>

<ul>
<li>其中<code>pattam_str</code> 就是<strong>正则表达式</strong>字符串。</li>
<li><code>str</code> 就是目标字符串</li>
<li><code>result</code> 就是得到的结果</li>
</ul>


<p>代码中的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">pattam_str</span><span class="p">)</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>等价于：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">pattam_str</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行输出的结果是一样的。</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python3 解决编码问题： UnicodeEncodeError: 'Gbk' Codec Can't Encode Character '\xa9' in Position Xxx: Illegal Multibyte Sequence --- 当执行爬虫将爬取信息打印到终端时出现的编码错误]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/08/python3-UnicodeEncodeError-gbk-codec-can't-encode-character-xa9/"/>
    <updated>2016-12-08T06:38:45+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/08/python3-UnicodeEncodeError-gbk-codec-can't-encode-character-xa9</id>
    <content type="html"><![CDATA[<hr />

<h2>开发环境</h2>

<ul>
<li>Python第三方库：lxml、Twisted、pywin32、scrapy</li>
<li>Python 版本：python-3.5.0-amd64</li>
<li>PyCharm软件版本：pycharm-professional-2016.1.4</li>
<li>电脑系统：Windows 10 64位</li>
</ul>


<p>如果你还没有搭建好开发环境，请到<a href="http://www.aobosir.com/blog/2016/11/26/python3-large-web-crawler-001-Build-development-environment/">这篇博客</a>。</p>

<hr />

<p>当使用Scrapy写爬虫项目的时候，当我们爬取某些中文网站，然后在DOS终端中打印爬取的网页源代码的时候，会出现各式各样的编码错误，今天，我又遇到一种编码错误，下面我将这个错误和对应的解决办法记录下来。</p>

<p>爬取的目标网址：<a href="http://blog.csdn.net/github_35160620/article/details/53353672">http://blog.csdn.net/github_35160620/article/details/53353672</a></p>

<p>出现错误的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">next</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
</span><span class='line'>    <span class="n">body_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">,</span> <span class="s">&#39;ignore&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">body_data</span><span class="p">)</span>
</span><span class='line'>    <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行：来到对应的爬虫项目路径下，执行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">scrapy</span> <span class="n">crawl</span> <span class="err">爬虫名字</span>
</span></code></pre></td></tr></table></div></figure>


<p>在出现的调试信息中你可以看到一个编码错误：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">body_data</span><span class="p">)</span>
</span><span class='line'><span class="ne">UnicodeEncodeError</span><span class="p">:</span> <span class="s">&#39;gbk&#39;</span> <span class="n">codec</span> <span class="n">can</span><span class="s">&#39;t encode character &#39;</span>\<span class="n">xa9</span><span class="s">&#39; in position 6732: illegal multibyte sequence</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过查看，这个<a href="http://www.codetable.net/hex/a9"><code>u'xa9'</code> Unicode编码所表示的字符是：<code>©</code></a>。</p>

<p><img src="http://aobojaing.github.io/images/2016-12-8-python3-UnicodeEncodeError-gbk-codec-can't-encode-character-xa9/1481149755580.png" alt="Alt text" /></p>

<p>可以解决这个错误的方法：</p>

<p>将上面的代码修改为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">next</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
</span><span class='line'>    <span class="n">body_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">,</span> <span class="s">&#39;ignore&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">u&#39;</span><span class="se">\xa9</span><span class="s">&#39;</span><span class="p">,</span> <span class="s">u&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">body_data</span><span class="p">)</span>
</span><span class='line'>    <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在运行这个程序<code>scrapy crawl 爬虫名字 --nolog</code>，上面的编码错误就没有。成功的输出了爬取的网页的源代码。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intel RealSense 001 Windows安装 Intel RealSense SDK]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/07/Intel-RealSense-Windows-download-install-intel-RealSense-SDK/"/>
    <updated>2016-12-07T12:18:38+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/07/Intel-RealSense-Windows-download-install-intel-RealSense-SDK</id>
    <content type="html"><![CDATA[<hr />

<p>我使用的Intel RealSense 硬件：SR300 摄像头</p>

<p>参考网站：</p>

<ul>
<li><a href="https://www.youtube.com/watch?v=dFVUiwyWyFo&amp;list=PLg-UKERBljNwbHO7R9t0mnIA52xd65LUT&amp;index=6">Downloading and Installing the Intel® RealSense SDK</a></li>
<li><a href="https://software.intel.com/blogs/2015/09/13/detailed-instructions-for-getting-started-with-intel-realsense-app-development?utm_source=ISTV&amp;utm_medium=Video&amp;utm_campaign=ISTV_2016&amp;utm_content=Video">Getting Started with Intel® RealSense™ App Development: Step-by-Step Install Instructions</a></li>
</ul>


<h2><a href="https://software.intel.com/zh-cn/intel-realsense-sdk/download">下载</a> 并安装</h2>

<p><strong>Step 0 . </strong> 先将SR300摄像头通过USB3.0接口插到电脑上。</p>

<blockquote><p>注意：</p>

<ol>
<li>必须要将SR300摄像头连接到USB3.0接口上。（这是一个非常重要的步骤）</li>
<li>不要通过USB延长线连接。</li>
</ol>
</blockquote>

<p><img src="http://aobojaing.github.io/images/2016-12-7-Intel-RealSense-Windows-download-install-intel-RealSense-SDK/1481009695299.png" alt="Alt text" /></p>

<p>等待大约5分钟，驱动就自动安装完成了。</p>

<p><img src="http://aobojaing.github.io/images/2016-12-7-Intel-RealSense-Windows-download-install-intel-RealSense-SDK/1481009996712.png" alt="Alt text" /></p>

<blockquote><p>如果电脑没有帮你自动安装，你需要手动安装：<strong>Step 1</strong>。电脑帮你自动安装了SR300 摄像头的驱动程序，你就可以跳过<strong>Step 1</strong>。</p></blockquote>

<p><strong>Step 1 . </strong> 下载<a href="https://software.intel.com/zh-cn/intel-realsense-sdk/download">SR300 深度摄像头管理程序</a>（intel_rs_dcm_sr300_3.3.27.5718.exe）</p>

<blockquote><p><strong>DCM</strong> 是全称：Depth Camera Manager</p></blockquote>

<p>安装：按照提示，一步一步的进行操作即可。</p>

<blockquote><p>如果你需要这个问题：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-7-Intel-RealSense-Windows-download-install-intel-RealSense-SDK/1481008202698.png" alt="Alt text" /></p>

<p>说明：SR300 摄像头没有与电脑连接，请先将SR300 摄像头于电脑通过USB3.0接口连接。</p></blockquote>

<p><strong>Step 2 . </strong> 下载 <a href="https://software.intel.com/zh-cn/intel-realsense-sdk/download">英特尔® 实感™ 软件开发套件（必备）</a>（Intel® RealSense™ SDK for Windows*）</p>

<blockquote><p>下载这里，你需要先注册一个inteld的用户，才能下载它。</p></blockquote>

<p>安装：intel_rs_sdk_offline_package_10.0.26.0396.exe</p>

<p>一步一步的安装，即可。</p>

<blockquote><p>如果你在安装的时候遇到这个问题：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-7-Intel-RealSense-Windows-download-install-intel-RealSense-SDK/1481021331695.png" alt="Alt text" /></p>

<p><strong>The Installer failed to detect OpenCL™ 1.2 support on your system. Certain SDK samples/modules may not be functional. Please upgrade your graphics driver for full SDK functionalities.</strong></p>

<p>点击<strong>Next</strong> 按钮忽略即可。</p>

<h2>出现这个问题的原因：</h2>

<p>你先下载 <a href="http://www.ozone3d.net/gpu_caps_viewer/">GPU Caps Viewer</a> 软件来查看<strong>我当前的电脑安装的OpenCL的版本</strong>和<strong>我的电脑有没有GPU</strong>。</p>

<p><img src="http://aobojaing.github.io/images/2016-12-7-Intel-RealSense-Windows-download-install-intel-RealSense-SDK/1481048947084.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-12-7-Intel-RealSense-Windows-download-install-intel-RealSense-SDK/1481048958442.png" alt="Alt text" /> <img src="http://aobojaing.github.io/images/2016-12-7-Intel-RealSense-Windows-download-install-intel-RealSense-SDK/1481049035444.png" alt="Alt text" /></p>

<p>通过GPU Caps Viewer软件得到的结果，我知道了：</p>

<ul>
<li>我的电脑里面是有GPU的：(NVIDIA CUDA公司的)<a href="http://www.geforce.com/hardware/notebook-gpus/geforce-705m/specifications">GeForce GT 705</a>。</li>
<li>这个显卡（GPU）支持的OpenCL版本是1.1</li>
</ul>


<p>现在你应该大概知道了：安装的 Intel RealSense SDK 提示的安装问题的原因了吧：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-7-Intel-RealSense-Windows-download-install-intel-RealSense-SDK/1481049133289.png" alt="Alt text" /></p>

<p>它说：您当前电脑的显卡太喽了，Intel RealSense SDK需要的是OpenCL1.2，而你的电脑里面没有，你电脑里面的显卡所支持的OpenCL版本是OpenCL1.1。</p>

<h2>解决办法</h2>

<p>没有办法，唯一可以解决下面这个问题的办法就是：提升（换一个好的）图形驱动硬件。（即：支持OpenCL1.2以上的显卡）。我们直接直接忽略这个问题也可以。对后面基本没有什么影响。</p></blockquote>

<hr />

<blockquote><p><strong>总结：</strong> 对于你的电脑，你想检测是否有GPU（显卡）（不管是<strong>NVIDIA CUDA 公司</strong>的还是 <strong>Intel公司</strong>的 都可以）。然后查看GPU（显卡）支持的OpenCL版本，必须要大于等于OpenCL1.2，否则 Intel RealSense SDK 安装不能成功。</p></blockquote>

<hr />

<p>注意安装的时候要连着网，因为在安装的时候会从网上下载一下安装包。</p>

<p><img src="http://aobojaing.github.io/images/2016-12-7-Intel-RealSense-Windows-download-install-intel-RealSense-SDK/1481072982805.png" alt="Alt text" /></p>

<p>如果你想要拥有 <strong>China</strong> 的语音识别和合成包，可以将下面的选项勾选。</p>

<p><img src="http://aobojaing.github.io/images/2016-12-7-Intel-RealSense-Windows-download-install-intel-RealSense-SDK/1481073189997.png" alt="Alt text" /></p>

<hr />

<h2>搞定</h2>

<h2>测试</h2>

<p>启动 <strong>Intel RealSense SDK Sample Browser</strong></p>

<p><img src="http://aobojaing.github.io/images/2016-12-7-Intel-RealSense-Windows-download-install-intel-RealSense-SDK/1481083199264.png" alt="Alt text" /></p>

<p>里面有很多的示例可以运行：（每个程序都运行一下，试试看。）</p>

<p><img src="http://aobojaing.github.io/images/2016-12-7-Intel-RealSense-Windows-download-install-intel-RealSense-SDK/1481083256629.png" alt="Alt text" /></p>

<hr />

<p>学习文档：<a href="https://software.intel.com/zh-cn/intel-realsense-sdk/documentation">英特尔® 实感™ SDK 文档</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arduino 004 Windows上给Arduino IDE添加模块库]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/06/Arduino-Windows-add-module-libraries/"/>
    <updated>2016-12-06T13:54:54+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/06/Arduino-Windows-add-module-libraries</id>
    <content type="html"><![CDATA[<hr />

<p>在我的Windows电脑里面，Arduino IDE软件安装在<code>C:\Program Files (x86)\Arduino</code>路径里面。</p>

<p>我们以一个例子来说明，如果将模块库添加到Arduino IDE软件中。</p>

<h2>添加 I2Cdev 及其相关模块库到Arduino IDE软件里面</h2>

<p><strong>Step 0 . </strong> 关闭 Arduino IDE 软件</p>

<p><strong>Step 1 . </strong> 下载 i2cdev 及其相关的模块库</p>

<p>到<a href="https://github.com/jrowberg/i2cdevlib">这个网址</a>里面下载所有i2cdev相关的模块库。</p>

<p><strong>Step 2 . </strong> 下载后，解压，将<code>/Arduino/</code>路径里面的所有文件夹复制，并拷贝到：<code>C:\Program Files (x86)\Arduino\libraries</code>路径里面。</p>

<p><img src="http://aobojaing.github.io/images/2016-12-6-Arduino-Windows-add-module-libraries/1481001787595.png" alt="Alt text" /></p>

<p><strong>Step 3 . </strong> 启动Arduino IDE 软件。在 <strong>文件</strong> -> <strong>示例</strong> 里面就可以看到刚刚添加到Arduino IDE的模块库。（现在就可以正常使用了）</p>

<p><img src="http://aobojaing.github.io/images/2016-12-6-Arduino-Windows-add-module-libraries/1481001851166.png" alt="Alt text" /></p>

<hr />

<blockquote><p>注意：</p>

<p>如果是Ubuntu系统，Arduino IDE 一般被安装在：<code>/opt/arduino/</code></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arduino 003 Ubuntu（Linux） 系统下，如何给板子烧写程序]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/06/Arduino-Ubuntu-Linux-board-upload-program/"/>
    <updated>2016-12-06T13:51:56+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/06/Arduino-Ubuntu-Linux-board-upload-program</id>
    <content type="html"><![CDATA[<ul>
<li>使用的虚拟机软件：<strong>VMware 11</strong></li>
<li>我的<strong>Ubuntu</strong>系统：<strong>Ubuntu 14.04.10 TLS</strong></li>
<li><strong>Arduino</strong> 软件的版本：<strong>Arduino 1.6.11</strong></li>
<li><strong>Arduino</strong> 板子的型号：<strong>Arduino UNO R3</strong></li>
</ul>


<p><strong>Step 0 . </strong> 来到 <strong>VMware</strong> 虚拟机里的<strong>Ubuntu </strong>系统的界面。</p>

<p><strong>Step 1 . </strong> 将 <strong>Arduino</strong> 板子通过USB线插到电脑上。</p>

<p><strong>Step 2 . </strong> 在终端中执行下面的命令，来启动 <strong>Arduino</strong> 软件。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>arduino</span></code></pre></td></tr></table></div></figure>


<p><strong>Step 3 . </strong> 随便打开一个程序。我们以 <strong>Blink</strong> 程序为例，打开它：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-6-Arduino-Ubuntu-Linux-board-upload-program/1472659956768.png" alt="Alt text" /></p>

<p><strong>Step 4 . </strong> 选择 <strong>板卡型号</strong></p>

<p><img src="http://aobojaing.github.io/images/2016-12-6-Arduino-Ubuntu-Linux-board-upload-program/1472660070620.png" alt="Alt text" /></p>

<p><strong>Step 5 . </strong> 选择当前 <strong>端口号</strong></p>

<p><img src="http://aobojaing.github.io/images/2016-12-6-Arduino-Ubuntu-Linux-board-upload-program/1472660146798.png" alt="Alt text" /></p>

<blockquote><p>你可以看到：<strong>Arduino</strong> 软件右下角有当前被选中的端口号和被选中的<strong>Arduino</strong>板卡的信息。</p>

<p><img src="http://aobojaing.github.io/images/2016-12-6-Arduino-Ubuntu-Linux-board-upload-program/1472660193423.png" alt="Alt text" /></p></blockquote>

<p><strong>Step 6 . </strong> 给端口添加权限。</p>

<blockquote><p>如果，这时你给 <strong>Arduino</strong> 开发板下载程序，发现下载出错。原因就是没有给端口添加权限。</p>

<p><img src="http://aobojaing.github.io/images/2016-12-6-Arduino-Ubuntu-Linux-board-upload-program/1472660225037.png" alt="Alt text" /></p>

<p>输出的 <strong>error</strong> 提示：</p>

<pre><code>avrdude: ser_open(): can't open device "/dev/ttyACM0": Permission denied
</code></pre></blockquote>

<p>在终端中执行下面的命令，来给当前选中的端口添加权限。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo chmod a+rw /dev/ttyACM0</span></code></pre></td></tr></table></div></figure>


<blockquote><p>端口号都在<code>/dev/</code> 目录里面。执行下面的命令可以查看：
<code>
cd /dev/
ls
</code>
输出 如下图所示：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-6-Arduino-Ubuntu-Linux-board-upload-program/1472660593893.png" alt="Alt text" /></p></blockquote>

<hr />

<blockquote><p><strong>注意：</strong> 如果你将<strong>Arduino</strong> 板子插到电脑上了，但是在<strong>/dev/</strong> 目录里面没有在到类似 <code>ttyACM0</code> 这样的端口号。</p>

<p>解决办法，将<strong>Arduino</strong>板子从电脑的USB口拔出，将当前屏幕界面切换到<strong>VMware</strong> 虚拟机里的<strong>Ubuntu </strong>系统的界面，这时，再将<strong>Arduino</strong> 板子插到电脑上。你就可以在<code>/dev/</code>路径里面找到类似 <code>ttyACM0</code> 这样的端口号了。</p></blockquote>

<p><strong>Step 6 . </strong> 点击 <strong>编译</strong> 按钮</p>

<p><img src="http://aobojaing.github.io/images/2016-12-6-Arduino-Ubuntu-Linux-board-upload-program/1472660394610.png" alt="Alt text" /></p>

<p><strong>Step 7 . </strong> 点击 <strong>上传</strong> 按钮</p>

<p><img src="http://aobojaing.github.io/images/2016-12-6-Arduino-Ubuntu-Linux-board-upload-program/1472660434092.png" alt="Alt text" /></p>

<blockquote><p>其实，可以不用点击 <strong>编译</strong> 按钮，直接点击 <strong>上传</strong> 按钮就可以。因为点击完 <strong>上传</strong> 按钮后，它会再编译一遍，在将程序烧写到板子上。</p></blockquote>

<p>现在提示 <strong>Done uploading</strong>，表示程序已经成功烧写到板子里面。</p>

<p><img src="http://aobojaing.github.io/images/2016-12-6-Arduino-Ubuntu-Linux-board-upload-program/1472660284963.png" alt="Alt text" /></p>

<h2>搞定</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arduino 002 — 在Ubuntu（Linux） 中搭建Arduino开发环境]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/06/Arduino-Ubuntu-Linux-install-Arduino-IDE/"/>
    <updated>2016-12-06T13:46:35+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/06/Arduino-Ubuntu-Linux-install-Arduino-IDE</id>
    <content type="html"><![CDATA[<ul>
<li>我的<strong>Ubuntu</strong>系统：<strong>Ubuntu 14.04.10 TLS 32位</strong></li>
<li>需要安装的<strong>Arduino</strong>的版本：<strong>Arduino 1.6.11（最新版本） Linux 32位</strong></li>
</ul>


<h2>1. 下载 最新的 <strong>Arduino</strong> 开发软件</h2>

<p><strong>Step 1 . </strong> 到<strong>Arduino</strong>官网下载 <strong>linux 32位</strong> 的 <strong>Arduino</strong> 开发软件：</p>

<p>Web：<a href="https://www.arduino.cc/en/Main/Software">https://www.arduino.cc/en/Main/Software</a></p>

<h2>2. 解压</h2>

<p><strong>Step 2 . </strong> 解压<strong>arduino-1.6.11-linux32.tar.xz</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ~/Downloads
</span><span class='line'>tar -xvJf arduino-1.6.11-linux32.tar.xz</span></code></pre></td></tr></table></div></figure>


<p><img src="http://aobojaing.github.io/images/2016-12-6-Arduino-Ubuntu-Linux-install-Arduino-IDE/1472642224393.png" alt="Alt text" /></p>

<p><strong>Step 3 . </strong> 将解压后的文件（<code>arduino-1.6.11</code>）移动到 <code>/opt</code>  目录下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ~/Downloads
</span><span class='line'>sudo mv arduino-1.6.6 /opt</span></code></pre></td></tr></table></div></figure>


<p><strong>Step 4 . </strong> 进入 <code>/opt/arduino-1.6.11</code> 文件夹，将<strong>Files</strong>窗口最大化。选中 <strong>arduino</strong> 文件，再在<strong>菜单栏</strong>中选择：<strong>Edits</strong> -> <strong>Preferences</strong></p>

<p><img src="http://aobojaing.github.io/images/2016-12-6-Arduino-Ubuntu-Linux-install-Arduino-IDE/1472642888060.png" alt="Alt text" /></p>

<p><strong>Step 5 . </strong> 这时弹出下面的窗口。选择：<strong>Behavior</strong> 选项卡，将<strong>Executable Text Files</strong>项里面，勾选：<strong>Ask each time</strong> 单选框。</p>

<p><img src="http://aobojaing.github.io/images/2016-12-6-Arduino-Ubuntu-Linux-install-Arduino-IDE/1472642984839.png" alt="Alt text" /></p>

<h2>3. 运行 <strong>Arduino</strong></h2>

<p>现在你有两种方法运行 <strong>Arduino</strong> 软件：</p>

<p><strong>方法一：</strong> 双击 <strong>arduino</strong> 文件： 弹出一个对话框，点击<strong>Run</strong></p>

<p><img src="http://aobojaing.github.io/images/2016-12-6-Arduino-Ubuntu-Linux-install-Arduino-IDE/1472555757325.png" alt="Alt text" /></p>

<p><strong>方法二：</strong>打开一个终端：路径切换到<strong>arduino</strong>文件所在路径（<code>/opt/arduino-1.6.11/</code>），运行它：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /opt/arduino-1.6.11/
</span><span class='line'>./arduino</span></code></pre></td></tr></table></div></figure>


<p>现在，恭喜你，已经安装成功了：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-6-Arduino-Ubuntu-Linux-install-Arduino-IDE/1472555815898.png" alt="Alt text" /></p>

<h2>4. 做一些配置，实现在终端的任何路径下，都可以运行 <strong>Arduino</strong> 软件</h2>

<p>使用<code>ln</code> 命令(给文件创建软链接文件) Web：<a href="http://roclinux.cn/?p=752">http://roclinux.cn/?p=752</a></p>

<p>我们希望在终端的任何路径下，输入 <code>arduino</code> 都可以启动 <strong>Arduino</strong> 软件：</p>

<p><strong>Step 6 . </strong> 操作如下，打开一个终端，执行下面的命令。将 <code>/opt/arduino-1.6.6/arduino</code> 文件在 <code>/bin/</code> 路径下创建一个软链接文件。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo ln -s /opt/arduino-1.6.11/arduino /bin/</span></code></pre></td></tr></table></div></figure>


<p>搞定，这样就可以在终端中，不管当前路径是什么，都可以启动<strong>Arduino</strong>了。</p>

<p>试试看。现在，在终端中直接执行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>arduino</span></code></pre></td></tr></table></div></figure>


<h2>5. 如何给 <strong>Arduino</strong> 板子，烧写程序</h2>

<p>请见博客：Arduino 003 Ubuntu（Linux） 系统下，如何给板子烧写程序 。</p>

<h2>搞定</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arduino 001 Windows 10 安装Arduino IDE软件 和 驱动]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/06/Arduino-Windows-10-install-Arduino-IDE-and-drive/"/>
    <updated>2016-12-06T13:37:20+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/06/Arduino-Windows-10-install-Arduino-IDE-and-drive</id>
    <content type="html"><![CDATA[<hr />

<blockquote><p>在Win10 上安装最新的Arduino IDE （1.6.9安装包）很简单，并且不行要手动安装Arduino板子的驱动，整个安装过程都当前的简单，我以前在我的Win7系统上安装Arduino1.1.0时，需要手动安装板卡驱动，步骤相当繁琐。</p></blockquote>

<h2>1. 先连接<strong>Arduino</strong>与电脑。</h2>

<h2>2. 下载Arduino IDE软件</h2>

<p>然后，到<a href="https://www.arduino.cc/en/Main/Software">这个网址</a> （这个网站打开时，有点慢。）下载最新的Arduino IDE 软件。（记住安装路径，因为后面要用上。）
<img src="http://aobojaing.github.io/images/2016-12-6-Arduino-Windows-10-install-Arduino-IDE-and-drive/1469421628198.png" alt="Alt text" /></p>

<h2>3. 安装驱动</h2>

<p>打开<strong>控制面板</strong> -> 设备管理器 -> 端口</p>

<p><img src="http://aobojaing.github.io/images/2016-12-6-Arduino-Windows-10-install-Arduino-IDE-and-drive/1469421740222.png" alt="Alt text" /></p>

<p>驱动已经安装成功。</p>

<h2>4. 测试Arduino IDE软件是否可以使用：</h2>

<h3>选择办卡：Arduino/Genuino Uno</h3>

<p><img src="http://aobojaing.github.io/images/2016-12-6-Arduino-Windows-10-install-Arduino-IDE-and-drive/1469421799260.png" alt="Alt text" /></p>

<h3>然后，选择端口：</h3>

<p><img src="http://aobojaing.github.io/images/2016-12-6-Arduino-Windows-10-install-Arduino-IDE-and-drive/1469421867289.png" alt="Alt text" /></p>

<h3>测试：随便导入一个程序：<code>Blink</code></h3>

<p><img src="http://aobojaing.github.io/images/2016-12-6-Arduino-Windows-10-install-Arduino-IDE-and-drive/1469421937550.png" alt="Alt text" /></p>

<h3>点击：<strong>验证</strong></h3>

<p><img src="http://aobojaing.github.io/images/2016-12-6-Arduino-Windows-10-install-Arduino-IDE-and-drive/1469421954757.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-12-6-Arduino-Windows-10-install-Arduino-IDE-and-drive/1469422001208.png" alt="Alt text" /></p>

<h3>点击：<strong>上传</strong></h3>

<p><img src="http://aobojaing.github.io/images/2016-12-6-Arduino-Windows-10-install-Arduino-IDE-and-drive/1469422032515.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-12-6-Arduino-Windows-10-install-Arduino-IDE-and-drive/1469422051312.png" alt="Alt text" /></p>

<h2>实验现象</h2>

<p>现在看到的实验现象就是：板子上的A13的LED在闪烁。</p>

<h1>搞定</h1>

<hr />

<p>参考网站：</p>

<p><a href="https://www.arduino.cc/en/Guide/Windows?setlang=cn">https://www.arduino.cc/en/Guide/Windows?setlang=cn</a></p>

<p>其他网站，没有用上：</p>

<p><a href="http://www.arduino.cn/thread-1008-1-1.html">http://www.arduino.cn/thread-1008-1-1.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python3 大型网络爬虫实战 — 给 Scrapy 爬虫项目设置为防反爬]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/06/python3-large-web-crawler-scrapy-project-Anti-reptile-settings/"/>
    <updated>2016-12-06T00:04:35+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/06/python3-large-web-crawler-scrapy-project-Anti-reptile-settings</id>
    <content type="html"><![CDATA[<hr />

<h2>开发环境</h2>

<ul>
<li>Python第三方库：lxml、Twisted、pywin32、scrapy</li>
<li>Python 版本：python-3.5.0-amd64</li>
<li>PyCharm软件版本：pycharm-professional-2016.1.4</li>
<li>电脑系统：Windows 10 64位</li>
</ul>


<p>如果你还没有搭建好开发环境，请到<a href="http://www.aobosir.com/blog/2016/11/26/python3-large-web-crawler-001-Build-development-environment/">这篇博客</a>。</p>

<hr />

<p>所有的设置都是在scrapy爬虫项目中的<code>settings.py</code> 文件中进行设置。</p>

<p><strong>Step 1 . </strong> 设置爬虫不遵循 <code>robots.txt</code>协议</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Obey robots.txt rules
</span><span class='line'>ROBOTSTXT_OBEY = False</span></code></pre></td></tr></table></div></figure>


<p><img src="http://aobojaing.github.io/images/2016-12-6-python3-large-web-crawler-scrapy-project-Anti-reptile-settings/1480952600971.png" alt="Alt text" /></p>

<blockquote><p>想要了解什么是<code>robots.txt</code>协议，请访问这篇博客：<a href="http://blog.csdn.net/github_35160620/article/details/52586126">解析 robots.txt 文件</a>。</p></blockquote>

<p><strong>Step 2 . </strong> 设置取消<strong>Cookies</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Disable cookies (enabled by default)</span>
</span><span class='line'><span class="n">COOKIES_ENABLED</span> <span class="o">=</span> <span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://aobojaing.github.io/images/2016-12-6-python3-large-web-crawler-scrapy-project-Anti-reptile-settings/1480952959564.png" alt="Alt text" /></p>

<blockquote><p><strong>Cookies</strong>：</p>

<p> 简单的说，Cookie就是服务器暂存放在你计算机上的一笔资料，好让服务器用来辨认你的计算机。当你在浏览网站的时候，Web服务器会先送一小小资料放在你的计算机上，Cookie 会帮你在网站上所打的文字或是一些选择，都记录下来。当下次你再光临同一个网站，Web服务器会先看看有没有它上次留下的Cookie资料，有的话，就会依据Cookie里的内容来判断使用者，送出特定的网页内容给你。</p></blockquote>

<p><strong>Step 3 . </strong> 设置用户代理值（<code>USER_AGENT</code>）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Crawl responsibly by identifying yourself (and your website) on the user-agent</span>
</span><span class='line'><span class="n">USER_AGENT</span> <span class="o">=</span> <span class="s">&#39;Mozilla/xxx (Windows xxx; Winxx; xxx) AppleWebKit/xxx (KHTML, like Gecko) Chrome/xxxx Safari/xxx&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://aobojaing.github.io/images/2016-12-6-python3-large-web-crawler-scrapy-project-Anti-reptile-settings/1480953048379.png" alt="Alt text" /></p>

<p>这个 用户代理可以在浏览器里面找到：</p>

<p>随便浏览一个网页，按<strong>F12</strong> -> <strong>Network</strong> -> <strong>F5</strong>，随便点击一项，你都能看到有 <strong>User-agent</strong> 这一项，将这里面的内容拷贝就可以。</p>

<p><img src="http://aobojaing.github.io/images/2016-12-6-python3-large-web-crawler-scrapy-project-Anti-reptile-settings/1480953359818.png" alt="Alt text" /></p>

<p><strong>Step 4 . </strong> 设置IP</p>

<p>对于这一步，如果你没有做什么违法的事情，可以不用设置。仅仅上面的三个步骤，就可以将那些具有反爬虫机制的网站可以正常爬取了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Pcduino 002 给pcduino烧写系统 — 之 烧写Ubuntu 14系统]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/05/pcduino-programming-system-ubuntu-14/"/>
    <updated>2016-12-05T22:19:23+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/05/pcduino-programming-system-ubuntu-14</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>我使用的pcduino板卡型号：<a href="http://www.aobosir.com/blog/2016/12/05/pcduino-3B-Board-Introduction/">pcduino 3B</a></li>
<li>我使用的TF卡大小：32G</li>
</ul>


<hr />

<p>参考网站：</p>

<ul>
<li><a href="https://www.youtube.com/watch?v=XXauYnwElpQ">Installing Ubuntu 14 on a pcDuino3B</a></li>
</ul>


<hr />

<h2>下载需要的东西</h2>

<p>下载 系统镜像文件 和 必要的烧写工具。（我使用的下载软件是迅雷，不是浏览器自带的下载器）</p>

<p>以我现在使用的板子（pcduino3B）为例，所以在<a href="http://www.linksprite.com/image-for-pcduino3-nano-pcduino3b/">这个网站</a>里面下载。需要现在三个东西：</p>

<ol>
<li>一个是系统镜像文件。</li>
<li>一个烧写工具。</li>
</ol>


<blockquote><p>如果你使用的不是pcduino3B板子，那么请到 <a href="http://www.linksprite.com/pcduino-download/">这个网站</a>里选择你使用的板子，到对应的板子链接里下载对应板子的内核镜像文件、系统镜像文件和必要的烧写工具。</p></blockquote>

<p><strong>Step 1 . </strong> 下载镜像文件</p>

<p>镜像文件选择下面的 Ubuntu 14 下载：（注意，这个Ubuntu 14 只需要下载这个文件即可，因为它是一个 <strong>内核+系统</strong> 的镜像文件。）</p>

<p><img src="http://aobojaing.github.io/images/2016-12-5-pcduino-programming-system-ubuntu-14/1480946917168.png" alt="Alt text" /></p>

<p><strong>Step 2 . </strong> 下载烧写工具</p>

<p>所以，我下载 <strong>PhoenixCard</strong> 烧写工具：（烧写工具在网页的下面，往下滚就能看到。）</p>

<p><img src="http://aobojaing.github.io/images/2016-12-5-pcduino-programming-system-ubuntu-14/1480947440669.png" alt="Alt text" /></p>

<blockquote><p>注意：注意它的下载提示。如果是给pcduino3系列使用，必须要使用 Phonenix card这个 软件的 V309 版本。很不错的是：这个下载链接默认下载的就是 Phonenix card V309。</p></blockquote>

<hr />

<h2>给pcduino板子烧写Ubuntu 14系统</h2>

<p><strong>Step 1 . </strong> 用读卡器将TF卡（小型的SD卡）连接到电脑。（必须）使用<strong>SD Formatter</strong>工具（专业格式化SD卡的软件）对TF卡进行格式化。</p>

<blockquote><p><strong>SD Formatter</strong>工具具体的下载、安装和使用，请到<a href="http://blog.csdn.net/github_35160620/article/details/52038918">这篇博客</a>中进行了解。</p></blockquote>

<p><strong>Step 2 . </strong> 烧写工具 <strong>PhoenixCard</strong> 下载完，解压后，直接双击<strong>PhoenixCard.exe</strong>就可以启动 <strong>PhoenixCard</strong>烧写软件。</p>

<p>点击<strong>镜像文件</strong>按钮，选择刚刚下载解压后的镜像文件。</p>

<p>然后点击 <strong>烧录</strong> 按钮，进行烧录。（大于5分钟时间。）</p>

<p><strong>Step 3 . </strong> 将TF卡插到pcduino板子上，只给板子供电即可。</p>

<blockquote><p>注意：</p>

<ul>
<li>pcduino板子只需要插上TF卡和接通电源即可，其他的什么设备都不需要连接。</li>
<li>接通电源一定要是5V2A，最好是使用充电宝或者充电头直接给板子供电。<strong>不可以使用电脑USB接口给板子供电。因为电流不够。</strong></li>
<li>如果你真的使用电脑的USB接口给板子供电，后面板子安装系统镜像的时候，是不会成功的。</li>
</ul>
</blockquote>

<p><img src="http://aobojaing.github.io/images/2016-12-5-pcduino-programming-system-ubuntu-14/1480947234663.png" alt="Alt text" /></p>

<p>中间的LED4（TX）一1秒的间隔闪烁，说明正在烧写内核和系统程序（pcduino板子全自动烧写），大约不到3分钟左右，中间这个LED不再闪烁（熄灭），说明：内核和系统烧写完成。这时拔下TF卡，再将pcduino板子断开电源。</p>

<p><strong>Step 4 . </strong> 给pcduino板子连接显示器，再接通电源：（这时pcduino板子还不插TF卡）</p>

<p>Ubuntu 14系统成功运行。</p>

<h2>搞定</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Pcduino 001 给pcduino烧写系统 — 之 烧写Ubuntu NAND系统]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/05/pcduino-programming-sysytem-Ubuntu-NAND-image/"/>
    <updated>2016-12-05T21:50:42+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/05/pcduino-programming-sysytem-Ubuntu-NAND-image</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>我使用的pcduino板卡型号：<a href="http://www.aobosir.com/blog/2016/12/05/pcduino-3B-Board-Introduction/">pcduino 3B</a></li>
<li>我使用的TF卡大小：32G</li>
</ul>


<hr />

<p>参考网站：</p>

<ul>
<li><a href="http://learn.linksprite.com/pcduino/quick-start/pcduino3/video-run-built-in-arduino-ide-on-pcduino3/">[Video] Run built-in Arduino IDE on pcDuino3</a></li>
</ul>


<h2>下载需要的东西</h2>

<p>下载 内核镜像文件、系统镜像文件 和 必要的烧写工具。（我使用的下载软件是迅雷，不是浏览器自带的下载器）</p>

<p>以我现在使用的板子（pcduino3B）为例，所以在<a href="http://www.linksprite.com/image-for-pcduino3-nano-pcduino3b/">这个网站</a>里面下载。需要现在三个东西：</p>

<ol>
<li>一个内核文件镜像文件。</li>
<li>一个是系统镜像文件。</li>
<li>一个烧写工具。</li>
</ol>


<blockquote><p>如果你使用的不是pcduino3B板子，那么请到 <a href="http://www.linksprite.com/pcduino-download/">这个网站</a>里选择你使用的板子，到对应的板子链接里下载对应板子的内核镜像文件、系统镜像文件和必要的烧写工具。</p></blockquote>

<p><strong>Step 1 . </strong> 下载Kernel(内核)镜像文件</p>

<p>下面的4个都是同一个内核文件，随便点击一个下载即可。（这里面说的：<strong>PhoenixCard</strong> 就是烧写工具）</p>

<p><img src="http://aobojaing.github.io/images/2016-12-5-pcduino-programming-sysytem-Ubuntu-NAND-image/1480777105671.png" alt="Alt text" /></p>

<blockquote><p>注意：如果你给pcduino板子连接的是<strong>LVDS Screen</strong>显示屏，那么你需要下载的是上面图片中的<strong>LVDS Screen</strong>的<strong>Kernel</strong>内核文件。</p>

<p><img src="http://aobojaing.github.io/images/2016-12-5-pcduino-programming-sysytem-Ubuntu-NAND-image/1480938335315.png" alt="Alt text" /></p></blockquote>

<p><strong>Step 2 . </strong> 下载烧写工具</p>

<p>所以，我下载 <strong>PhoenixCard</strong> 烧写工具：（烧写工具在网页的下面，往下滚就能看到。）</p>

<p><img src="http://aobojaing.github.io/images/2016-12-5-pcduino-programming-sysytem-Ubuntu-NAND-image/1480744828441.png" alt="Alt text" /></p>

<blockquote><p>注意：注意它的下载提示。如果是给pcduino3系列使用，必须要使用 Phonenix card这个 软件的 V309 版本。很不错的是：这个下载链接默认下载的就是 Phonenix card V309。</p></blockquote>

<p><strong>Step 3 . </strong> 下载镜像文件</p>

<p>镜像文件随便选择一个 Ubuntu NAND 下载即可：（注意，要对应上面下载的内核文件。）</p>

<p><img src="http://aobojaing.github.io/images/2016-12-5-pcduino-programming-sysytem-Ubuntu-NAND-image/1480938647531.png" alt="Alt text" /></p>

<hr />

<h2>给pcduino板子烧写内核</h2>

<p><strong>Step 1 . </strong> 用读卡器将TF卡（小型的SD卡）连接到电脑。（必须）使用<strong>SD Formatter</strong>工具（专业格式化SD卡的软件）对TF卡进行格式化。</p>

<p><img src="http://aobojaing.github.io/images/2016-12-5-pcduino-programming-sysytem-Ubuntu-NAND-image/1480939221029.png" alt="Alt text" /></p>

<blockquote><p><strong>SD Formatter</strong>工具具体的下载、安装和使用，请到<a href="http://blog.csdn.net/github_35160620/article/details/52038918">这篇博客</a>中进行了解。</p></blockquote>

<p><strong>Step 2 . </strong> 烧写工具 <strong>PhoenixCard</strong> 下载完，解压后，直接双击<strong>PhoenixCard.exe</strong>就可以启动 <strong>PhoenixCard</strong>烧写软件：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-5-pcduino-programming-sysytem-Ubuntu-NAND-image/1480745667635.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-12-5-pcduino-programming-sysytem-Ubuntu-NAND-image/1480745770272.png" alt="Alt text" /></p>

<p><strong>Step 3 . </strong> 给TF卡烧写Kernel(内核)镜像</p>

<p><img src="http://aobojaing.github.io/images/2016-12-5-pcduino-programming-sysytem-Ubuntu-NAND-image/1480939466523.png" alt="Alt text" /></p>

<p><strong>Step 4 . </strong> 将TF卡从电脑上拔下来，将TF卡插到pcduino板子上，给pcduino板子上电。</p>

<blockquote><p>注意：</p>

<ul>
<li>pcduino板子只需要插上TF卡和接通电源即可，其他的什么设备都不需要连接。</li>
<li>接通电源一定要是5V2A，最好是使用充电宝或者充电头直接给板子供电。<strong>不可以使用电脑USB接口给板子供电。因为电流不够。</strong></li>
<li>如果你真的使用电脑的USB接口给板子供电，后面板子安装系统镜像的时候，是不会成功的。</li>
</ul>
</blockquote>

<p><img src="http://aobojaing.github.io/images/2016-12-5-pcduino-programming-sysytem-Ubuntu-NAND-image/1480781160131.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-12-5-pcduino-programming-sysytem-Ubuntu-NAND-image/1480779553594.png" alt="Alt text" /></p>

<p>中间的LED4（TX）一1秒的间隔闪烁，说明正在烧写内核程序（pcduino板子全自动烧写），大约不到23秒钟左右，中间这个LED不在闪烁，说明：内核文件烧写完成。这时拔下TF卡，再将pcduino板子断开电源。</p>

<hr />

<h2>给pcduino板子烧写Ubuntu NAND系统</h2>

<p><strong>Step 1 . </strong> 再将TF卡通过读卡器连接到电脑，然后使用上面同样的方法（用<strong>SD Formatter</strong>软件）对TF卡进行格式化操作。</p>

<p><strong>Step 2 . </strong> 选择要烧写的镜像文件</p>

<p>将解压后的系统镜像文件（<code>pcduino3_ubuntu_20140807.img</code> 和 <code>update.sh</code>）直接拷贝到TF卡上。</p>

<p><img src="http://aobojaing.github.io/images/2016-12-5-pcduino-programming-sysytem-Ubuntu-NAND-image/1480782215024.png" alt="Alt text" /></p>

<p><strong>Step 3 . </strong> 检查 <code>update.sh</code> 文件</p>

<p>如果你下载的这个：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-5-pcduino-programming-sysytem-Ubuntu-NAND-image/1480940230049.png" alt="Alt text" /></p>

<p>我们现在使用记事本软件打开<code>update.sh</code> 启动文件，检查里面指定的镜像文件名是否正确，可以看到，我现在这个情况，是不正确的：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-5-pcduino-programming-sysytem-Ubuntu-NAND-image/1480780631220.png" alt="Alt text" /></p>

<p>如果我们TF卡根目录里面的镜像文件名为：<code>pcduino3nano_ubuntu_20140807.img</code>。所以我们需要手动修改<code>update.sh</code> 文件：</p>

<p>将其修改为下面这样，并保存文件。</p>

<p><img src="http://aobojaing.github.io/images/2016-12-5-pcduino-programming-sysytem-Ubuntu-NAND-image/1480780787224.png" alt="Alt text" /></p>

<p>总之，这一步（<strong>Step 3 . </strong>）的目的就是：让<code>update.sh</code>文件里面的<code>IMG</code>变量指向正确的镜像文件路径。</p>

<p><strong>Step 4 . </strong> 给pcduino板子连接显示器，再接通电源：（这时pcduino板子还不插TF卡）</p>

<p><img src="http://aobojaing.github.io/images/2016-12-5-pcduino-programming-sysytem-Ubuntu-NAND-image/1480943598183.png" alt="Alt text" /></p>

<p>这时观察pcduino连接的显示屏，当出现下面的信息时：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-5-pcduino-programming-sysytem-Ubuntu-NAND-image/1480945409839.png" alt="Alt text" /></p>

<p><strong>Step 5 . </strong> 现在将烧写好的系统的TF卡插到pcduino板子上。然后pcduino自动将TF卡里面的系统镜像安装到pcduino芯片里。（等待大约8分钟）</p>

<p>当你看看到下面的信息的时候，说明系统已经安装完成了。</p>

<p><img src="http://aobojaing.github.io/images/2016-12-5-pcduino-programming-sysytem-Ubuntu-NAND-image/1480944718209.png" alt="Alt text" /></p>

<p><strong>Step 6 . </strong> 这个时候，关闭电源，你可以将SD卡去下来（TF卡已经没有用了，你可以把它扔了，呵呵）。</p>

<p>现在，给板子重新上电，板子自动运行系统。</p>

<p><img src="http://aobojaing.github.io/images/2016-12-5-pcduino-programming-sysytem-Ubuntu-NAND-image/1480945185981.png" alt="Alt text" /></p>

<h2>搞定</h2>

<hr />

<p>参考网站：</p>

<ul>
<li><a href="https://www.youtube.com/watch?v=XXauYnwElpQ">Installing Ubuntu 14 on a pcDuino3B</a></li>
<li><a href="http://www.itdadao.com/articles/c15a578261p0.html">Pcduino烧写系统Pcduino 3 Nano 烧写系统小记</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Pcduino 000 Pcduino板卡介绍 — Pcduino 3B]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/05/pcduino-3B-Board-Introduction/"/>
    <updated>2016-12-05T19:17:30+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/05/pcduino-3B-Board-Introduction</id>
    <content type="html"><![CDATA[<hr />

<h2>什么是pcduino</h2>

<p>pcduino = mini PC + Arduino</p>

<p>简单的说，就是一个板子，它所具有的功能 等价于：一个装有系统的微型笔记本电脑再连接一个Arduino UNO 的板子。</p>

<h2>pcduino 3B</h2>

<p><img src="http://aobojaing.github.io/images/2016-12-5-pcduino-3B-Board-Introduction/1480743252811.png" alt="Alt text" /></p>

<p>购买网站：<a href="https://item.taobao.com/item.htm?spm=a1z10.5-c.w4002-10306272528.14.xr2Mrd&amp;id=42881071231">pcDuino3B A20开发板</a></p>

<p>pcduino3 与 pcduino3B 的唯一区别就是：pcduino3B有一个大型集成的RJ45网络端口。（其他和pcduino3一模一样）</p>

<p><img src="http://aobojaing.github.io/images/2016-12-5-pcduino-3B-Board-Introduction/1480784084302.png" alt="Alt text" /></p>

<p>pcduino 3B 的官方介绍网站： <a href="http://www.linksprite.com/linksprite-pcduino3/">LinkSprite pcDuino3</a> （pcduino3 包括：pcduino3 和 pcduino3B）</p>

<p>pcduino 官网的教程资料网站：<a href="http://www.linksprite.com/quick-start/">LinkSprite pcDuino Quick Start</a></p>

<p>pcduino 中文教程网站：<a href="http://www.pcduino.com/wiki/index.php?title=%E4%B8%AD%E6%96%87%E4%B9%A6">维基 pcduino 中文书</a></p>

<p>pcduino 教学的pdf:</p>

<ul>
<li><a href="https://s3.amazonaws.com/pcduino/book/pcDuinov3%E5%8F%8Anano%E6%95%99%E7%A8%8B%EF%BC%88%E4%BC%98%E5%A3%A4%E6%95%99%E8%82%B2%EF%BC%89.pdf">pcDuinov3及nano教程（优壤教育）</a></li>
<li><a href="https://s3.amazonaws.com/pcduino/book/CPK_pcDuino3.pdf">18 Projects with CuteDigi Project Kit for pcDuino3</a></li>
<li><a href="http://cnlearn.linksprite.com/wp-content/uploads/2014/03/%E3%80%8A-%E7%88%B1%E4%B8%8A-pcDuino-%E3%80%8B.pdf">爱上-pcDuino</a></li>
</ul>


<p>pcduino sparkfun网站的tutorials：<a href="https://learn.sparkfun.com/tutorials/programming-the-pcduino">Programming the pcDuino</a></p>

<p><a href="http://learn.linksprite.com/?s=pcduino3b">Search Results for &ldquo;pcduino3b&rdquo;</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Linux 命令 001 Cp 复制]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/04/Linux-commands-cp-copy/"/>
    <updated>2016-12-04T23:18:23+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/04/Linux-commands-cp-copy</id>
    <content type="html"><![CDATA[<hr />

<p>将单个文件 <code>file</code> 复制到指定目录<code>dir</code>里面：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp file dir</span></code></pre></td></tr></table></div></figure>


<blockquote><p>当你使用<code>cp</code>命令的时候，如果出现下面的错误：</p>

<pre><code>cp: omitting directory ‘file’
</code></pre>

<p>说明：<code>file</code> 不是单个文件，是一个目录，你如果要复制目录，需要给<code>cp</code>命令加一个参数 <code>-r</code> 。</p></blockquote>

<p>将目录 <code>dir1</code> 复制到 指定目录 <code>dir2</code> 里面：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp -r dir1 dir2</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C# 003 C#调用cmd.exe执行命令]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/02/cs-003-cmd-exe-execute-command-line-command/"/>
    <updated>2016-12-02T07:57:03+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/02/cs-003-cmd-exe-execute-command-line-command</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>我使用的电脑：Windows 10 64位</li>
<li>使用的Visual Studio 软件： VS2010</li>
</ul>


<hr />

<p>参考网站：<a href="http://www.cnblogs.com/njl041x/p/3881550.html">C#程序调用cmd.exe执行命令</a></p>

<p>创建一个文件，名为：<code>RunCmd.cs</code>。将下面的代码拷贝到里面。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Diagnostics</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">AoboSir</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">RunCmd</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">public</span> <span class="nf">RunCmd</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">private</span> <span class="k">static</span> <span class="kt">string</span> <span class="n">CmdPath</span> <span class="p">=</span> <span class="s">@&quot;C:\Windows\System32\cmd.exe&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">/// &lt;summary&gt;</span>
</span><span class='line'>        <span class="c1">/// 执行cmd命令</span>
</span><span class='line'>        <span class="c1">/// 多命令请使用批处理命令连接符：</span>
</span><span class='line'>        <span class="c1">/// &lt;![CDATA[</span>
</span><span class='line'>        <span class="c1">/// &amp;:同时执行两个命令</span>
</span><span class='line'>        <span class="c1">/// |:将上一个命令的输出,作为下一个命令的输入</span>
</span><span class='line'>        <span class="c1">/// &amp;&amp;：当&amp;&amp;前的命令成功时,才执行&amp;&amp;后的命令</span>
</span><span class='line'>        <span class="c1">/// ||：当||前的命令失败时,才执行||后的命令]]&gt;</span>
</span><span class='line'>        <span class="c1">/// 其他请百度</span>
</span><span class='line'>        <span class="c1">/// &lt;/summary&gt;</span>
</span><span class='line'>        <span class="c1">/// &lt;param name=&quot;cmd&quot;&gt;&lt;/param&gt;</span>
</span><span class='line'>        <span class="c1">/// &lt;param name=&quot;output&quot;&gt;&lt;/param&gt;</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">void</span> <span class="nf">run</span><span class="p">(</span><span class="kt">string</span> <span class="n">cmd</span><span class="p">,</span> <span class="k">out</span> <span class="kt">string</span> <span class="n">output</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">cmd</span> <span class="p">=</span> <span class="n">cmd</span><span class="p">.</span><span class="n">Trim</span><span class="p">().</span><span class="n">TrimEnd</span><span class="p">(</span><span class="sc">&#39;&amp;&#39;</span><span class="p">)</span> <span class="p">+</span> <span class="s">&quot;&amp;exit&quot;</span><span class="p">;</span><span class="c1">//说明：不管命令是否成功均执行exit命令，否则当调用ReadToEnd()方法时，会处于假死状态</span>
</span><span class='line'>            <span class="k">using</span> <span class="p">(</span><span class="n">Process</span> <span class="n">p</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Process</span><span class="p">())</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">p</span><span class="p">.</span><span class="n">StartInfo</span><span class="p">.</span><span class="n">FileName</span> <span class="p">=</span> <span class="n">CmdPath</span><span class="p">;</span>
</span><span class='line'>                <span class="n">p</span><span class="p">.</span><span class="n">StartInfo</span><span class="p">.</span><span class="n">UseShellExecute</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>        <span class="c1">//是否使用操作系统shell启动</span>
</span><span class='line'>                <span class="n">p</span><span class="p">.</span><span class="n">StartInfo</span><span class="p">.</span><span class="n">RedirectStandardInput</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>   <span class="c1">//接受来自调用程序的输入信息</span>
</span><span class='line'>                <span class="n">p</span><span class="p">.</span><span class="n">StartInfo</span><span class="p">.</span><span class="n">RedirectStandardOutput</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>  <span class="c1">//由调用程序获取输出信息</span>
</span><span class='line'>                <span class="n">p</span><span class="p">.</span><span class="n">StartInfo</span><span class="p">.</span><span class="n">RedirectStandardError</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>   <span class="c1">//重定向标准错误输出</span>
</span><span class='line'>                <span class="n">p</span><span class="p">.</span><span class="n">StartInfo</span><span class="p">.</span><span class="n">CreateNoWindow</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>          <span class="c1">//不显示程序窗口</span>
</span><span class='line'>                <span class="n">p</span><span class="p">.</span><span class="n">Start</span><span class="p">();</span><span class="c1">//启动程序</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">//向cmd窗口写入命令</span>
</span><span class='line'>                <span class="n">p</span><span class="p">.</span><span class="n">StandardInput</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">cmd</span><span class="p">);</span>
</span><span class='line'>                <span class="n">p</span><span class="p">.</span><span class="n">StandardInput</span><span class="p">.</span><span class="n">AutoFlush</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>                <span class="c1">//p.StandardInput.WriteLine(&quot;exit&quot;);</span>
</span><span class='line'>                <span class="c1">//向标准输入写入要执行的命令。这里使用&amp;是批处理命令的符号，表示前面一个命令不管是否执行成功都执行后面(exit)命令，如果不执行exit命令，后面调用ReadToEnd()方法会假死</span>
</span><span class='line'>                <span class="c1">//同类的符号还有&amp;&amp;和||前者表示必须前一个命令执行成功才会执行后面的命令，后者表示必须前一个命令执行失败才会执行后面的命令</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">//获取cmd窗口的输出信息</span>
</span><span class='line'>                <span class="n">output</span> <span class="p">=</span> <span class="n">p</span><span class="p">.</span><span class="n">StandardOutput</span><span class="p">.</span><span class="n">ReadToEnd</span><span class="p">();</span>
</span><span class='line'>                <span class="n">p</span><span class="p">.</span><span class="n">WaitForExit</span><span class="p">();</span><span class="c1">//等待程序执行完退出进程</span>
</span><span class='line'>                <span class="n">p</span><span class="p">.</span><span class="n">Close</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们可以这样使用这个<code>RunCmd</code> 类：</p>

<p>在GUI界面里面添加一个按钮，然后在对应的<code>.cs</code> 文件的程序，就类似于下面这个样子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.ComponentModel</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Data</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Drawing</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Windows.Forms</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">AoboSir</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">learningcs003</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">partial</span> <span class="k">class</span> <span class="nc">Form1</span> <span class="p">:</span> <span class="n">Form</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">public</span> <span class="nf">Form1</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">InitializeComponent</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">RunCmd</span> <span class="n">runcmd</span> <span class="p">=</span> <span class="k">new</span> <span class="n">RunCmd</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">private</span> <span class="k">void</span> <span class="nf">button1_Click</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">EventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">string</span> <span class="n">commond</span><span class="p">,</span> <span class="n">output</span><span class="p">;</span>
</span><span class='line'>            <span class="n">commond</span> <span class="p">=</span> <span class="s">@&quot;notepad.exe&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="n">runcmd</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">commond</span><span class="p">,</span> <span class="k">out</span> <span class="n">output</span><span class="p">);</span>
</span><span class='line'>            <span class="c1">//MessageBox.Show(output);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行的功能是：启动 <strong>记事本</strong> 软件。</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Python 028 获取命令行参数]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/02/python-get-command-line-arguments/"/>
    <updated>2016-12-02T02:07:35+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/02/python-get-command-line-arguments</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>使用的电脑系统：Windows 10 64位</li>
<li>使用的开发集成环境：PyCharm 2016.1.4</li>
<li>使用的Python的版本：python2.7.10 或者 python 3.5.0</li>
</ul>


<hr />

<blockquote><p>本博文对Python2和Python3都适用。</p></blockquote>

<hr />

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">optparse</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="n">parser</span> <span class="o">=</span> <span class="n">optparse</span><span class="o">.</span><span class="n">OptionParser</span><span class="p">(</span><span class="s">&#39;usage%prog &#39;</span> <span class="o">+</span>\
</span><span class='line'>                                   <span class="s">&#39;-f &lt;zipfile&gt; -d &lt;dictionary&gt;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s">&#39;-f&#39;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s">&#39;zname&#39;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s">&#39;string&#39;</span><span class="p">,</span>\
</span><span class='line'>                      <span class="n">help</span><span class="o">=</span><span class="s">&#39;specify zip file&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s">&#39;-d&#39;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s">&#39;dname&#39;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s">&#39;string&#39;</span><span class="p">,</span>\
</span><span class='line'>                      <span class="n">help</span><span class="o">=</span><span class="s">&#39;specify dictionary file&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="n">options</span><span class="p">,</span> <span class="n">args</span><span class="p">)</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">options</span><span class="o">.</span><span class="n">zname</span> <span class="o">==</span> <span class="bp">None</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">options</span><span class="o">.</span><span class="n">dname</span> <span class="o">==</span> <span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">parser</span><span class="o">.</span><span class="n">usage</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">zname</span> <span class="o">=</span> <span class="n">options</span><span class="o">.</span><span class="n">zname</span>
</span><span class='line'>        <span class="n">dname</span> <span class="o">=</span> <span class="n">options</span><span class="o">.</span><span class="n">dname</span>
</span><span class='line'>        <span class="n">dlist</span> <span class="o">=</span> <span class="n">dname</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&#39;zname is &#39;</span><span class="p">,</span> <span class="n">zname</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&#39;dname is &#39;</span><span class="p">,</span> <span class="n">dname</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&#39;dlist is &#39;</span><span class="p">,</span> <span class="n">dlist</span><span class="p">)</span>
</span><span class='line'>    <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">main</span><span class="p">()</span>
</span><span class='line'>    <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>


<p>Python3 的运行结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;</span><span class="n">python</span> <span class="n">learningpython28</span><span class="o">.</span><span class="n">py</span> <span class="o">-</span><span class="n">f</span> <span class="n">aobo</span>  <span class="o">-</span><span class="n">d</span> <span class="n">sir</span><span class="p">,</span><span class="n">patty</span><span class="p">,</span><span class="n">re</span>
</span><span class='line'><span class="n">zname</span> <span class="ow">is</span>  <span class="n">aobo</span>
</span><span class='line'><span class="n">dname</span> <span class="ow">is</span>  <span class="n">sir</span><span class="p">,</span><span class="n">patty</span><span class="p">,</span><span class="n">re</span>
</span><span class='line'><span class="n">dlist</span> <span class="ow">is</span>  <span class="p">[</span><span class="s">&#39;sir&#39;</span><span class="p">,</span> <span class="s">&#39;patty&#39;</span><span class="p">,</span> <span class="s">&#39;re&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Python2 的运行结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;</span><span class="n">C</span><span class="p">:</span>\<span class="n">Python27</span>\<span class="n">python</span><span class="o">.</span><span class="n">exe</span> <span class="n">learningpython28</span><span class="o">.</span><span class="n">py</span> <span class="o">-</span><span class="n">f</span> <span class="n">aobo</span> <span class="o">-</span><span class="n">d</span> <span class="n">sir</span><span class="p">,</span><span class="n">patty</span><span class="p">,</span><span class="n">re</span>
</span><span class='line'><span class="p">(</span><span class="s">&#39;zname is &#39;</span><span class="p">,</span> <span class="s">&#39;aobo&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="s">&#39;dname is &#39;</span><span class="p">,</span> <span class="s">&#39;sir,patty,re&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="s">&#39;dlist is &#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;sir&#39;</span><span class="p">,</span> <span class="s">&#39;patty&#39;</span><span class="p">,</span> <span class="s">&#39;re&#39;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面这个几个命令运行的效果是一样的：（Python2 和 Python3 运行的效果都一样）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;</span><span class="n">python</span> <span class="n">learningpython28</span><span class="o">.</span><span class="n">py</span> <span class="o">-</span><span class="n">h</span>
</span><span class='line'><span class="o">&gt;</span><span class="n">python</span> <span class="n">learningpython28</span><span class="o">.</span><span class="n">py</span> <span class="o">--</span><span class="n">h</span>
</span><span class='line'><span class="o">&gt;</span><span class="n">python</span> <span class="n">learningpython28</span><span class="o">.</span><span class="n">py</span> <span class="o">--</span><span class="n">help</span>
</span><span class='line'><span class="o">&gt;</span><span class="n">python</span> <span class="n">learningpython28</span><span class="o">.</span><span class="n">py</span> <span class="o">-</span><span class="n">help</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">Usage</span><span class="p">:</span> <span class="n">usagelearningpython28</span><span class="o">.</span><span class="n">py</span> <span class="o">-</span><span class="n">f</span> <span class="o">&lt;</span><span class="n">zipfile</span><span class="o">&gt;</span> <span class="o">-</span><span class="n">d</span> <span class="o">&lt;</span><span class="n">dictionary</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">Options</span><span class="p">:</span>
</span><span class='line'>  <span class="o">-</span><span class="n">h</span><span class="p">,</span> <span class="o">--</span><span class="n">help</span>  <span class="n">show</span> <span class="n">this</span> <span class="n">help</span> <span class="n">message</span> <span class="ow">and</span> <span class="nb">exit</span>
</span><span class='line'>  <span class="o">-</span><span class="n">f</span> <span class="n">ZNAME</span>    <span class="n">specify</span> <span class="nb">zip</span> <span class="nb">file</span>
</span><span class='line'>  <span class="o">-</span><span class="n">d</span> <span class="n">DNAME</span>    <span class="n">specify</span> <span class="n">dictionary</span> <span class="nb">file</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>注意：如果传入的参数是<code>string</code>类型的，最好使用<code>""</code> 引上</h2>

<p>为什么？ 因为字符串里面难免可能会有 <code></code> （空格），所以，最好使用<code>""</code>（双引号）引上。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;</span><span class="n">python</span> <span class="n">learningpython28</span><span class="o">.</span><span class="n">py</span> <span class="o">-</span><span class="n">f</span> <span class="s">&quot;aobo fd g&quot;</span> <span class="o">-</span><span class="n">d</span> <span class="s">&quot;ava,dssd,hg&quot;</span>
</span><span class='line'><span class="n">zname</span> <span class="ow">is</span>  <span class="n">aobo</span> <span class="n">fd</span> <span class="n">g</span>
</span><span class='line'><span class="n">dname</span> <span class="ow">is</span>  <span class="n">ava</span><span class="p">,</span><span class="n">dssd</span><span class="p">,</span><span class="n">hg</span>
</span><span class='line'><span class="n">dlist</span> <span class="ow">is</span>  <span class="p">[</span><span class="s">&#39;ava&#39;</span><span class="p">,</span> <span class="s">&#39;dssd&#39;</span><span class="p">,</span> <span class="s">&#39;hg&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你用单引号或者不用引号，虽然说运行不会报错，但是运行的结果就不是你想要的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;</span><span class="n">python</span> <span class="n">learningpython28</span><span class="o">.</span><span class="n">py</span> <span class="o">-</span><span class="n">f</span> <span class="s">&#39;aobo fd g&#39;</span> <span class="o">-</span><span class="n">d</span> <span class="s">&#39;ava,dssd,hg&#39;</span>
</span><span class='line'><span class="n">zname</span> <span class="ow">is</span>  <span class="s">&#39;aobo</span>
</span><span class='line'><span class="n">dname</span> <span class="ow">is</span>  <span class="s">&#39;ava,dssd,hg&#39;</span>
</span><span class='line'><span class="n">dlist</span> <span class="ow">is</span>  <span class="p">[</span><span class="s">&quot;&#39;ava&quot;</span><span class="p">,</span> <span class="s">&#39;dssd&#39;</span><span class="p">,</span> <span class="s">&quot;hg&#39;&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;</span><span class="n">python</span> <span class="n">learningpython28</span><span class="o">.</span><span class="n">py</span> <span class="o">-</span><span class="n">f</span> <span class="n">aobo</span> <span class="n">fd</span> <span class="n">g</span> <span class="o">-</span><span class="n">d</span> <span class="n">ava</span><span class="p">,</span><span class="n">dssd</span><span class="p">,</span><span class="n">hg</span>
</span><span class='line'><span class="n">zname</span> <span class="ow">is</span>  <span class="n">aobo</span>
</span><span class='line'><span class="n">dname</span> <span class="ow">is</span>  <span class="n">ava</span><span class="p">,</span><span class="n">dssd</span><span class="p">,</span><span class="n">hg</span>
</span><span class='line'><span class="n">dlist</span> <span class="ow">is</span>  <span class="p">[</span><span class="s">&#39;ava&#39;</span><span class="p">,</span> <span class="s">&#39;dssd&#39;</span><span class="p">,</span> <span class="s">&#39;hg&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Python 026 字符串连接]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/01/python-string-join/"/>
    <updated>2016-12-01T19:03:50+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/01/python-string-join</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>使用的电脑系统：Windows 10 64位</li>
<li>使用的开发集成环境：PyCharm 2016.1.4</li>
<li>使用的Python的版本：python2.7.10 或者 python 3.5.0</li>
</ul>


<hr />

<blockquote><p>本博文对Python2和Python3都适用。</p></blockquote>

<hr />

<p>参考网站：<a href="http://www.cnblogs.com/huangcong/archive/2011/08/29/2158268.html">Python 字符串操作（string替换、删除、截取、复制、连接、比较、查找、包含、大小写转换、分割等）</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># -!- coding: utf-8 -!-</span>
</span><span class='line'>
</span><span class='line'><span class="n">path</span> <span class="o">=</span> <span class="s">r&#39;D:\WorkSpace\test_ws\笔记\text.md&#39;</span>
</span><span class='line'><span class="n">delimiter</span> <span class="o">=</span> <span class="s">&#39;</span><span class="se">\\</span><span class="s">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">mylist</span> <span class="o">=</span> <span class="n">path</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">delimiter</span><span class="p">)</span>
</span><span class='line'><span class="n">res_path</span> <span class="o">=</span> <span class="n">delimiter</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">mylist</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'><span class="c"># res_path = res_path.decode(&#39;utf-8&#39;).encode(&#39;GB18030&#39;) # 如果是适用python2在windows系统上运行，需要将这样注释去掉，否则你会得到中文乱码</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">res_path</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">D</span><span class="p">:</span>\<span class="n">WorkSpace</span>\<span class="n">test_ws</span>\<span class="err">笔记</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Python 027 解决错误：SyntaxError: Non-UTF-8 Code Starting With '\xc8' in File xxxx.py]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/01/SyntaxError-Non-UTF-8-code-starting-with-in-file/"/>
    <updated>2016-12-01T17:37:34+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/01/SyntaxError-Non-UTF-8-code-starting-with-in-file</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>使用的电脑系统：Windows 10 64位</li>
<li>使用的开发集成环境：PyCharm 2016.1.4</li>
<li>使用的Python的版本：python2.7.10 或者 python 3.5.0</li>
</ul>


<hr />

<blockquote><p>本博文对Python2和Python3都适用。</p></blockquote>

<hr />

<p>出现这个错误，是因为<code>xxxx.py</code> 文件里面有中文字符。</p>

<p>解决办法：在文件第一行，加上下面的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># -!- coding: utf-8 -!-</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Python 025 字符串分割]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/01/python-string-split/"/>
    <updated>2016-12-01T17:06:32+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/01/python-string-split</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>使用的电脑系统：Windows 10 64位</li>
<li>使用的开发集成环境：PyCharm 2016.1.4</li>
<li>使用的Python的版本：python2.7.10 或者 python 3.5.0</li>
</ul>


<hr />

<blockquote><p>本博文对Python2和Python3都适用。</p></blockquote>

<hr />

<p>参考网站：<a href="http://www.runoob.com/python/att-string-split.html">Python split()方法</a></p>

<p>Python split()通过指定分隔符对字符串进行切片，返回一个列表。</p>

<h2>语法：</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">zifuchuang</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="n">num</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>str 分隔符</li>
<li>num 分割次数</li>
</ul>


<h2>实例：</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">str</span> <span class="o">=</span> <span class="s">r&#39;D:\WorkSpace\test_ws\Git(GitHub)&#39;</span>
</span><span class='line'><span class="n">l</span> <span class="o">=</span> <span class="nb">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\\</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="nb">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\\</span><span class="s">&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">[</span><span class="s">&#39;D:&#39;</span><span class="p">,</span> <span class="s">&#39;WorkSpace&#39;</span><span class="p">,</span> <span class="s">&#39;test_ws&#39;</span><span class="p">,</span> <span class="s">&#39;Git(GitHub)&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;D:&#39;</span><span class="p">,</span> <span class="s">&#39;WorkSpace</span><span class="se">\\</span><span class="s">test_ws</span><span class="se">\\</span><span class="s">Git(GitHub)&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Python 024 判断文件和文件夹是否存在]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/01/determine-whether-files-and-folders-exist/"/>
    <updated>2016-12-01T08:46:09+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/01/determine-whether-files-and-folders-exist</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>使用的电脑系统：Windows 10 64位</li>
<li>使用的开发集成环境：PyCharm 2016.1.4</li>
<li>使用的Python的版本：python2.7.10 或者 python 3.5.0</li>
</ul>


<hr />

<h2>判断文件</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">isfile</span><span class="p">(</span><span class="s">r&#39;D:\WorkSpace\test_ws\ao.txt&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者下面的代码。（这两种方式是对于判断一个文件是否存在是等价的。）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="s">r&#39;D:\WorkSpace\test_ws\ao.txt&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>判断文件夹</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="s">r&#39;D:\WorkSpace\test_ws&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git(GitHub) 002 如何在GitHub for Windows 软件上为代码库创建一个版本标签]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/01/GitHub-For-Windows-Adding-tag/"/>
    <updated>2016-12-01T08:04:17+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/01/GitHub-For-Windows-Adding-tag</id>
    <content type="html"><![CDATA[<hr />

<p>参考网站：</p>

<ul>
<li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001376951758572072ce1dc172b4178b910d31bc7521ee4000">git 创建标签</a></li>
<li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001376951885068a0ac7d81c3a64912b35a59b58a1d926b000">git 操作标签</a></li>
<li><a href="http://stackoverflow.com/questions/13862517/github-for-windows-adding-tags">Github for Windows - Adding tags</a></li>
</ul>


<hr />

<p>要想给代码库贴标签，Github For Windows 软件上没没有这个按钮。你需要在Github For Windows 软件上打开 <strong>Git 命令行窗口</strong>，还是要使用命令行工具来完成这个工作。</p>

<p><img src="http://aobojaing.github.io/images/2016-12-1-GitHub-For-Windows-Adding-tag/1480548346142.png" alt="Alt text" /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git tag -a v1.0 -m "description information"
</span><span class='line'>git push origin v1.0</span></code></pre></td></tr></table></div></figure>


<hr />

<p>当你执行完<code>git tag -a v1.0 -m "description information"</code>，想要查看一下，你可以执行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git show v1.0</span></code></pre></td></tr></table></div></figure>


<p>如果你执行完<code>git tag -a v1.0 -m "description information"</code>，想要删除这个标签，可以执行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git tag -d v1.0</span></code></pre></td></tr></table></div></figure>


<hr />
]]></content>
  </entry>
  
</feed>
