---
layout: post
title: "SQL 数据库 学习 007 通过一个示例简单介绍什么是字段、属性、列、元组、记录、表、主键、外键"
date: 2016-10-11 15:09:45 +0800
comments: true
sharing: true
categories: [SQL, SQL Server]
---



---

我们来介绍一下：数据库是如何存储数据的。

## 数据库是如何存储数据的

来看一个小例子


现在，假如我们现在想存储 员工的信息。也就是说：我们来通过这个例子来看看 **字段**、**记录**、**表** 是一个什么东西。

我们下面通过存储一个员工的信息，来把这些专业术语都来解释一遍。

假设有4个信息：

| 员工姓名      |     员工工资 |   员工性别   | 员工年龄 |




我们能不能这样去存储数据。比如举例：

![Alt text](/images/2016-10-11-SQL-Learning-007-Field-Attributes-Column-Tuple-recording-table-Primary_key-Foreign_key/1474946865354.png)

如果我们按照正常的思维，这样存储是没有问题的。（其实这个员工表还缺少一列数据）但是如果我们真的在数据库里面这样存储数据的话，是会出问题的。
我们想象一下：如果你只是写了员工的姓名、工资、性别、年龄，将来可不可能会出现一个人和里面员工的人有一模一样的姓名。如果出现了一模一样的数据，数据库该如何辨别？

![Alt text](/images/2016-10-11-SQL-Learning-007-Field-Attributes-Column-Tuple-recording-table-Primary_key-Foreign_key/1474947092362.png)

所以，它需要设置一个东西，来标识唯一的**记录**（行）。

如果信息（行）一样，那么保存起来就浪费了，术语叫：**冗余**。（简单的说：就是有两条数据彼此之间无法辨别了。）

**Q：** 那我们怎么办？

**A：** 我们在现实中，是使用编号来解决这个问题的。

> 不管是人也好，产品也好，都是使用编号来标识唯一的一个事物的。

## 主键

所以：

![Alt text](/images/2016-10-11-SQL-Learning-007-Field-Attributes-Column-Tuple-recording-table-Primary_key-Foreign_key/1474947488293.png)

张三这个人之前有4个属性：姓名、工资、性别 和 年龄。而确定一个数据唯一性的属性，有一个专门的词：**主键**。（当前例子指的就是：**学生编号**。）（现在张三这个人有5个属性了。）

**主键**：它也是事物的一个属性，它是**可以标识事物唯一性的属性**。


---

如果我们这样存放：

![Alt text](/images/2016-10-11-SQL-Learning-007-Field-Attributes-Column-Tuple-recording-table-Primary_key-Foreign_key/1474969612804.png)

那么 部门姓名 和 部门地址 还有 部门人数 都会重复的出现，这样存储太消耗空间了。

所以我们将他们分开存储：

![Alt text](/images/2016-10-11-SQL-Learning-007-Field-Attributes-Column-Tuple-recording-table-Primary_key-Foreign_key/1474969757254.png)


**Q：** 请问： 部门 需不需要 编号 这个属性呢？

**A：** 需要。

记住：我们设计任何一个事物都需要**主键**（唯一的标识符）。如果没有唯一的标识符，那么事物和事物之间的区别就没有了。

所以，只要你想存数据，数据就必须要有**主键**。没有主键，事物与事物之间没有办法区分。添加主键就是添加**编号**属性。

比如说人。人的身份证算不算是一个人的属性，身份证是单独添加的。我们人有鼻子，眼睛，嘴。身份证严格上讲并不是一个人的属性，只不过是为了标识，使用编号是很方便的。所以每个人才有了身份证号这个属性。

> 编号（主键）是无意义的，但是因为它太普遍的，我们认为它有意义。

在保存数据的时候，都是单独添加一个没有实际意义的、只为了编号的 数据来充当主键。它只起个标识作用。（现实生活中我们就是这样使用的，在实际的设计库的时候，我们也是这样设计的，和我们日常中是一模一样的。）

---

## 外键

**Q：** 员工和部门之间是有关系的，那么这个关系怎么去表达？

**Q、：** 如果，我们想要将现实生活中特别复杂的事物保存到硬盘上，我们要如何存储？

你应该这样去考虑：

第一：个体如何存储；

第二：个体之间的关系如何存储。

把这两个搞定了，基本就都搞定了。

---

我们现在已经解决了**个体**如何存储。接下来就是**个体之间的关系**如何存储了。我们主流使用的数据库都是关系型数据库（就是一个二维表），而我们使用的编程语言是**Java**、**C#**这种面向对象的语言，这两种完全不同的解决问题的思想。

**Q：** 中间服务器是使用**Java** 或者 **C#** 实现的，后端是数据库实现的，它们之间如何进行交互的？

**A：** 是通过**Hibernate**实现 一个映射，日后的博客中会介绍它。（如果日后，我们的数据库也是使用面向对象的思想实现的，那么这个**Hibernate** 就没用了。但是现在没有面向对象的数据库，这种思想的数据库技术还不成熟，所以 **Hibernate**现在还是需要学习的。）

**Q：** 什么是面向对象，大家已经知道了。但是，什么是关系？

**A：** 面向对象思想是通过类来实现的，而关系型数据库是通过表来实现的。而表与表之间的关系是通过什么来实现的呢？是通过一个叫：**外键** 的东西来表示的。

我们现在在员工表里面在添加一个：**部门编号**。

> **扩展：**（编号通常是整型数字，如果数据量太大，整型数字不够用的话，编号通常是字母和数字组合使用。当时我们推荐编号使用整型数字。因为整型查找的时候很快，而字符串查找的时候很慢。）

![Alt text](/images/2016-10-11-SQL-Learning-007-Field-Attributes-Column-Tuple-recording-table-Primary_key-Foreign_key/1474974928303.png)


这个 **部门编号** 就是 **外键**。我们在员工表上添加了一列（部门编号），就解决了 **表**（员工表）与 **表**（部门表）之间的**关系**了。

> **Q：** 我们想象一下，如果我们不在员工表里面添加 **部门编号**。而是在 部门表里面添加 **员工编号**。这样行不行？
> 
> **A：** 当时是不行的，一个部门里面里面有很多的员工，并且员工的数量不同。所以，如果我们在部门表里面添加员工编号的话，有些部分的字段就很多，而有些部门的编号就很少，这样就不合适了吧。如果你想这样设计也可以，但是这样设计不好。

你在设计表之前，要想：员工与部门之间的关系是一对多还是多对一。意思就是：一个员工 对应 很多部门，还是 一个部门 对应 很多员工？
是一个部分对应多个员工。我们会**将外键添加到多的一方**，这样是最合理的。

> 我们日后会讲：多对多，一对一，一对多 这样的情况下，都如何使用外键来表示关系。现在大概有个印象就可以。

**Q：** 再解释一次：什么是外键？

**A：** 连接两个表的字段叫做外键。

但是能不能再换一种更好的解释方式。主键是：标识唯一一个事物。而外键是：一个表中的数据来自另外一个表。（解释：员工表里面的一列数据（部门编号），它不是员工表本身的，它的数据是来自另外一个表（部门表）。）

---

## **总结：**

在数据库里面的专业术语：

这样的一列叫：**列** 或者 **字段**。模拟的是：一个事物的某一个静态的特征。**列**：字段的另一种称谓。

![Alt text](/images/2016-10-11-SQL-Learning-007-Field-Attributes-Column-Tuple-recording-table-Primary_key-Foreign_key/1474975819543.png)


---

这样的一行叫：**记录** 或者 **元组**。模拟的是：字段的组合，表示的是一个具体的事物。**元组**：记录的另一种称谓。


![Alt text](/images/2016-10-11-SQL-Learning-007-Field-Attributes-Column-Tuple-recording-table-Primary_key-Foreign_key/1474975928980.png)


---

这样的一行叫：**记录** 或者 **元组** 或者 **属性**。**属性**：**记录**的另一种称谓。

![Alt text](/images/2016-10-11-SQL-Learning-007-Field-Attributes-Column-Tuple-recording-table-Primary_key-Foreign_key/1474975996931.png)

---

这一个整体叫：**表**。记录的组合。模拟的是（表示的是）：同一类事物的一个集合。

![Alt text](/images/2016-10-11-SQL-Learning-007-Field-Attributes-Column-Tuple-recording-table-Primary_key-Foreign_key/1474976030725.png)


---


表、字段和记录的关系：

* 字段是事物的属性
* 记录是事物本身
* 表示事物的集合


---

表中唯一能辨别一个记录与另一个记录不同的字段叫：**主键**。

![Alt text](/images/2016-10-11-SQL-Learning-007-Field-Attributes-Column-Tuple-recording-table-Primary_key-Foreign_key/1474976130605.png)

---

如果有一个记录（列）不是来自于表本身的，是来自另外一个表的，它叫：**外键**。

![Alt text](/images/2016-10-11-SQL-Learning-007-Field-Attributes-Column-Tuple-recording-table-Primary_key-Foreign_key/1474976186110.png)

---



