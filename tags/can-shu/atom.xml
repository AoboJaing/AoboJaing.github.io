<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: 参数 | AoboSir 博客]]></title>
  <link href="http://aobojaing.github.io/tags/can-shu/atom.xml" rel="self"/>
  <link href="http://aobojaing.github.io/"/>
  <updated>2017-02-19T17:20:39+08:00</updated>
  <id>http://aobojaing.github.io/</id>
  <author>
    <name><![CDATA[Aobo Jaing]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C# 003 C#调用cmd.exe执行命令]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/02/cs-003-cmd-exe-execute-command-line-command/"/>
    <updated>2016-12-02T07:57:03+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/02/cs-003-cmd-exe-execute-command-line-command</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>我使用的电脑：Windows 10 64位</li>
<li>使用的Visual Studio 软件： VS2010</li>
</ul>


<hr />

<p>参考网站：<a href="http://www.cnblogs.com/njl041x/p/3881550.html">C#程序调用cmd.exe执行命令</a></p>

<p>创建一个文件，名为：<code>RunCmd.cs</code>。将下面的代码拷贝到里面。</p>

<pre><code class="csharp">using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Diagnostics;

namespace AoboSir
{
    class RunCmd
    {
        public RunCmd()
        {

        }

        private static string CmdPath = @"C:\Windows\System32\cmd.exe";

        /// &lt;summary&gt;
        /// 执行cmd命令
        /// 多命令请使用批处理命令连接符：
        /// &lt;![CDATA[
        /// &amp;:同时执行两个命令
        /// |:将上一个命令的输出,作为下一个命令的输入
        /// &amp;&amp;：当&amp;&amp;前的命令成功时,才执行&amp;&amp;后的命令
        /// ||：当||前的命令失败时,才执行||后的命令]]&gt;
        /// 其他请百度
        /// &lt;/summary&gt;
        /// &lt;param name="cmd"&gt;&lt;/param&gt;
        /// &lt;param name="output"&gt;&lt;/param&gt;
        public void run(string cmd, out string output)
        {
            cmd = cmd.Trim().TrimEnd('&amp;') + "&amp;exit";//说明：不管命令是否成功均执行exit命令，否则当调用ReadToEnd()方法时，会处于假死状态
            using (Process p = new Process())
            {
                p.StartInfo.FileName = CmdPath;
                p.StartInfo.UseShellExecute = false;        //是否使用操作系统shell启动
                p.StartInfo.RedirectStandardInput = true;   //接受来自调用程序的输入信息
                p.StartInfo.RedirectStandardOutput = true;  //由调用程序获取输出信息
                p.StartInfo.RedirectStandardError = true;   //重定向标准错误输出
                p.StartInfo.CreateNoWindow = true;          //不显示程序窗口
                p.Start();//启动程序

                //向cmd窗口写入命令
                p.StandardInput.WriteLine(cmd);
                p.StandardInput.AutoFlush = true;
                //p.StandardInput.WriteLine("exit");
                //向标准输入写入要执行的命令。这里使用&amp;是批处理命令的符号，表示前面一个命令不管是否执行成功都执行后面(exit)命令，如果不执行exit命令，后面调用ReadToEnd()方法会假死
                //同类的符号还有&amp;&amp;和||前者表示必须前一个命令执行成功才会执行后面的命令，后者表示必须前一个命令执行失败才会执行后面的命令

                //获取cmd窗口的输出信息
                output = p.StandardOutput.ReadToEnd();
                p.WaitForExit();//等待程序执行完退出进程
                p.Close();
            }
        }
    }
}
</code></pre>

<p>我们可以这样使用这个<code>RunCmd</code> 类：</p>

<p>在GUI界面里面添加一个按钮，然后在对应的<code>.cs</code> 文件的程序，就类似于下面这个样子：</p>

<pre><code class="csharp">using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using AoboSir;

namespace learningcs003
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        RunCmd runcmd = new RunCmd();

        private void button1_Click(object sender, EventArgs e)
        {
            string commond, output;
            commond = @"notepad.exe";
            runcmd.run(commond, out output);
            //MessageBox.Show(output);
        }
    }
}
</code></pre>

<p>运行的功能是：启动 <strong>记事本</strong> 软件。</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Python 028 获取命令行参数]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/02/python-get-command-line-arguments/"/>
    <updated>2016-12-02T02:07:35+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/02/python-get-command-line-arguments</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>使用的电脑系统：Windows 10 64位</li>
<li>使用的开发集成环境：PyCharm 2016.1.4</li>
<li>使用的Python的版本：python2.7.10 或者 python 3.5.0</li>
</ul>


<hr />

<blockquote><p>本博文对Python2和Python3都适用。</p></blockquote>

<hr />

<pre><code class="python">import optparse

def main():
    parser = optparse.OptionParser('usage%prog ' +\
                                   '-f &lt;zipfile&gt; -d &lt;dictionary&gt;')
    parser.add_option('-f', dest='zname', type='string',\
                      help='specify zip file')
    parser.add_option('-d', dest='dname', type='string',\
                      help='specify dictionary file')
    (options, args) = parser.parse_args()
    if (options.zname == None) | (options.dname == None):
        print(parser.usage)
        exit(0)
        pass
    else:
        zname = options.zname
        dname = options.dname
        dlist = dname.split(',')
        pass
    print('zname is ', zname)
    print('dname is ', dname)
    print('dlist is ', dlist)
    pass

if __name__ == '__main__':
    main()
    pass
</code></pre>

<p>Python3 的运行结果：</p>

<pre><code>&gt;python learningpython28.py -f aobo  -d sir,patty,re
zname is  aobo
dname is  sir,patty,re
dlist is  ['sir', 'patty', 're']
</code></pre>

<p>Python2 的运行结果：</p>

<pre><code>&gt;C:\Python27\python.exe learningpython28.py -f aobo -d sir,patty,re
('zname is ', 'aobo')
('dname is ', 'sir,patty,re')
('dlist is ', ['sir', 'patty', 're'])
</code></pre>

<p>下面这个几个命令运行的效果是一样的：（Python2 和 Python3 运行的效果都一样）</p>

<pre><code>&gt;python learningpython28.py -h
&gt;python learningpython28.py --h
&gt;python learningpython28.py --help
&gt;python learningpython28.py -help
</code></pre>

<p>运行结果：</p>

<pre><code>Usage: usagelearningpython28.py -f &lt;zipfile&gt; -d &lt;dictionary&gt;

Options:
  -h, --help  show this help message and exit
  -f ZNAME    specify zip file
  -d DNAME    specify dictionary file
</code></pre>

<hr />

<h2>注意：如果传入的参数是<code>string</code>类型的，最好使用<code>""</code> 引上</h2>

<p>为什么？ 因为字符串里面难免可能会有 <code></code> （空格），所以，最好使用<code>""</code>（双引号）引上。</p>

<pre><code>&gt;python learningpython28.py -f "aobo fd g" -d "ava,dssd,hg"
zname is  aobo fd g
dname is  ava,dssd,hg
dlist is  ['ava', 'dssd', 'hg']
</code></pre>

<p>如果你用单引号或者不用引号，虽然说运行不会报错，但是运行的结果就不是你想要的。</p>

<pre><code>&gt;python learningpython28.py -f 'aobo fd g' -d 'ava,dssd,hg'
zname is  'aobo
dname is  'ava,dssd,hg'
dlist is  ["'ava", 'dssd', "hg'"]
</code></pre>

<pre><code>&gt;python learningpython28.py -f aobo fd g -d ava,dssd,hg
zname is  aobo
dname is  ava,dssd,hg
dlist is  ['ava', 'dssd', 'hg']
</code></pre>
]]></content>
  </entry>
  
</feed>
