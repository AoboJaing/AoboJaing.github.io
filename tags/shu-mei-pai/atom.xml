<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: 树莓派 | AoboSir 博客]]></title>
  <link href="http://aobojaing.github.io/tags/shu-mei-pai/atom.xml" rel="self"/>
  <link href="http://aobojaing.github.io/"/>
  <updated>2017-10-16T02:42:24+08:00</updated>
  <id>http://aobojaing.github.io/</id>
  <author>
    <name><![CDATA[Aobo Jaing]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[树莓派 Learning 003 — GPIO 003 中断模式 — 按键控制LED]]></title>
    <link href="http://aobojaing.github.io/blog/2017/03/08/raspberrypi-GPIO-interrupted-key-control-led/"/>
    <updated>2017-03-08T04:34:01+08:00</updated>
    <id>http://aobojaing.github.io/blog/2017/03/08/raspberrypi-GPIO-interrupted-key-control-led</id>
    <content type="html"><![CDATA[<hr />

<p>我的树莓派型号：Raspberry Pi <strong>2</strong> Model <strong>B</strong> V1.1
装机系统：<a href="https://www.raspberrypi.org/downloads/noobs/">NOOBS v1.9.2</a></p>

<hr />

<pre><code class="python"># -*- coding:UTF-8 -*-

import RPi.GPIO as GPIO
import time

GPIO.setmode(GPIO.BCM)

GPIO.setup(24, GPIO.IN, pull_up_dwon=GPIO.PUD_DOWN)
GPIO.setup(25, GPIO.OUT)

ledStatus = True

def my_callback(channel):
    print("button pressed!")
    global ledStatus
    ledStatus = not ledStatus
    if ledStatus:
        GPIO.output(25, GPIO.HIGH)
        pass
    else:
        GPIO.output(25, GPIO.LOW)
        pass
    pass

GPIO.add_event_detect(24, GPIO.RISING, callback=my_callback)

while True:
    try:
        print("I'm working...")
        time.sleep(5)
        pass
    except KeyboardInterrupt:
        break
        pass
    pass

GPIO.cleanup()
</code></pre>

<p>代码讲解：</p>

<ul>
<li><code>global ledStatus</code> ：<a href="http://c.biancheng.net/cpp/html/1827.html">http://c.biancheng.net/cpp/html/1827.html</a></li>
<li><code>GPIO.add_event_detect(24, GPIO.RISING, callback=my_callback)</code> ：给<code>24</code>引脚添加一个事件函数，触发条件是：捕获到上升沿（<code>GPIO.RISING</code>）。这个参数还可以是：<code>GPIO.FALLING</code>（下降沿）、<code>GPIO.BOTH</code>（两者都有）</li>
<li><code>except KeyboardInterrupt:</code> 是用来捕获用户是否按了<code>Ctrl + C</code> 组合键。退出程序</li>
<li><code>GPIO.cleanup()</code>：之前都没有使用过这个函数。这个函数的功能是：jaingaobo所有的GPIO还原回初始输入状态。我们建议在使用RPi.GPIO模块的所有Python程序的最后，都写上这个函数。</li>
</ul>


<p>现在这个程序我们来运行一下：</p>

<pre><code>sudo chmod +x key_control_led_callback.py
python key_control_led_callback.py
</code></pre>

<p>现在的运行效果就已经很好的，即使我们上面写的程序脚本里面没有编写按键去抖的相关程序，并且我们也没有安装硬件去抖的电容。但是为了安全起见，我们还是应该摆去抖的程序给它加上。</p>

<p>对于中断模式的检测按键，我们给这种程序添加去抖程序，相当的简单，我们只需要将上面的程序中的这行语句：</p>

<pre><code class="python">GPIO.add_event_detect(24, GPIO.RISING, callback=my_callback)
</code></pre>

<p>修改为：</p>

<pre><code>GPIO.add_event_detect(24, GPIO.RISING, callback=my_callback, bouncetime=200)
</code></pre>

<p>其中<code>bouncetime=200</code> 是延时200ms的意思。就是当检测到上升沿后，进入这个中断，要延时200ms才会执行这个中断里面的程序。</p>

<p>这就是软件去抖。</p>

<hr />

<h2>搞定</h2>

<hr />

<p>参考网站：<a href="https://sourceforge.net/p/raspberry-gpio-python/wiki/Inputs/">https://sourceforge.net/p/raspberry-gpio-python/wiki/Inputs/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[树莓派 Learning 003 — GPIO 002 输入模式 — 按键控制LED]]></title>
    <link href="http://aobojaing.github.io/blog/2017/03/08/raspberrypi-GPIO-input-key-control-led/"/>
    <updated>2017-03-08T04:32:07+08:00</updated>
    <id>http://aobojaing.github.io/blog/2017/03/08/raspberrypi-GPIO-input-key-control-led</id>
    <content type="html"><![CDATA[<hr />

<p>我的树莓派型号：Raspberry Pi <strong>2</strong> Model <strong>B</strong> V1.1
装机系统：<a href="https://www.raspberrypi.org/downloads/noobs/">NOOBS v1.9.2</a></p>

<hr />

<p>我们在之前学会了如何进行输出，现在来讲讲如何进行输入：</p>

<p>使用按键为例。</p>

<p>我们先按照下面这幅图片连接电路：</p>

<p><img src="/images/2017-3-8-raspberrypi-GPIO-input-key-control-led/1488807661102.png" alt="Alt text" /></p>

<p>知识点：当你设置一个GPIO为输入模式的，这个GPIO口要么是连接到信号端，要么是接GND。注意设置为输入模式的GPIO口不允许悬空（floating）。（因为这种情况下GPIO输入的值是不确定的。）</p>

<p>上面这个图中， 按键的一个引脚连接一个10K电阻和树莓派的24引脚上，然后10K电阻连接GND。按键的另一个引脚连接到3V3。</p>

<p>LED还是正极连接到25引脚上，另一个引脚连接GND。</p>

<hr />

<h2>写程序</h2>

<pre><code class="python"># -*- coding:UTF-8 -*-

import RPi.GPIO as GPIO
import time

GPIO.setmode(GPIO.BCM)
GPIO.setup(24, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
GPIO.setup(25, GPIO.OUT)

ledStatus = True

while True:
    if (GPIO.input(24) == GPIO.HIGH):
        print("button pressed!")
        ledStatus = not ledStatus
        if ledStatus:
            GPIO.output(25, GPIO.HIGH)
            pass
        else:
            GPIO.output(25, GPIO.LOW)
            pass
        time.sleep(0.03)
        pass
    time.sleep(0.01)
    pass
</code></pre>

<p>执行下面的命令，来启动这个程序脚本：</p>

<pre><code>sudo chmod +x key_control_led.py
python key_control_led.py
</code></pre>

<p>你会发现这个运行效果并不是很好：主要的原因就是因为按键的去抖。你可以使用硬件去抖（就是在按键的引脚上并联一个电容），也可以软件去抖，上面的程序中已经进行软件去抖了（你可以通过增大延时时间来改善程序运行效果）。</p>

<hr />

<p>到现在应该学会了如何使用GPIO的输入模式了。</p>

<p>上面检测按键的程序，它是用轮询的方式，接下来，我们来学习，如果使用GPIO的中断模式，来实现使用中断的方式来检测一个按键是否被按下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[树莓派 Learning 003 — GPIO 001 — 点亮一个LED]]></title>
    <link href="http://aobojaing.github.io/blog/2017/03/06/raspberrypi-GPIO-blinkled-LED/"/>
    <updated>2017-03-06T21:36:01+08:00</updated>
    <id>http://aobojaing.github.io/blog/2017/03/06/raspberrypi-GPIO-blinkled-LED</id>
    <content type="html"><![CDATA[<hr />

<p>我的树莓派型号：Raspberry Pi <strong>2</strong> Model <strong>B</strong> V1.1
装机系统：<a href="https://www.raspberrypi.org/downloads/noobs/">NOOBS v1.9.2</a></p>

<hr />

<p>我们使用Python程序来编写树莓派的程序</p>

<h2>导入 <code>RPi.GPIO</code> 模块 &mdash; 检测当前树莓派中，是否含有 <code>RPi.GPIO</code>模块，如果没有，我们就安装</h2>

<p>我们在终端中执行：</p>

<pre><code>python
</code></pre>

<p>默认启动的是Python2的终端交互程序：</p>

<pre><code>pi@raspberrypi:~$ python
Python 2.7.9 (default, Mar  8 2015, 00:52:26) 
[GCC 4.9.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; 
</code></pre>

<p>接着，我们试着导入 <code>RPi.GPIO</code> 模块 来看看有没有这个模块。</p>

<pre><code class="python">&gt;&gt;&gt; import RPi.GPIO
</code></pre>

<blockquote><p>如果出现了<code>ImportError</code>错误提示：没有这个模块。我们可以先按<code>Ctrl + D</code> 来退出Python终端交互程序，然后执行下面的命令来安装<code>RPi.GPIO</code>模块：</p>

<pre><code>sudo apt-get install RPi.GPIO
</code></pre></blockquote>

<hr />

<blockquote><p>如果你的树莓派里面已经存在<code>RPi.GPIO</code>模块，但是它不能正常的工作的话，我们可以这样解决这个问题：删除现有的<code>RPi.GPIO</code>模块，然后在重新安装它：</p>

<pre><code>sudo apt-get remove RPi.GPIO
sudo apt-get install RPi.GPIO
</code></pre></blockquote>

<hr />

<h2>编写第一个程序：<code>hello_raspberrypi.py</code> 程序脚本</h2>

<p>你可以参考我之前写的这篇博文：（操了，我都他妈的忘记了之前写过树莓派点亮LED）<a href="http://blog.csdn.net/github_35160620/article/details/52140967">树莓派 Learning 003 &mdash; GPIO 001 &mdash; 点亮LED</a>。</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[树莓派 Learning 002 装机后的必要操作 11 解决在使用SecureCRT软件链接树莓派时，SecureCRT软件的终端中显示树莓派的中文字体乱码的问题]]></title>
    <link href="http://aobojaing.github.io/blog/2017/03/06/solve-SecureCRT-display-Garbled/"/>
    <updated>2017-03-06T20:17:43+08:00</updated>
    <id>http://aobojaing.github.io/blog/2017/03/06/solve-SecureCRT-display-Garbled</id>
    <content type="html"><![CDATA[<hr />

<p>我的树莓派型号：Raspberry Pi <strong>2</strong> Model <strong>B</strong> V1.1
装机系统：<a href="https://www.raspberrypi.org/downloads/noobs/">NOOBS v1.9.2</a></p>

<hr />

<p>如果你已经将你的树莓派上面默认字体设置为了：中文。（编码方式为：<code>UTF-8</code>）（如果不是，你可以参考<a href="http://blog.csdn.net/github_35160620/article/details/52048308">这篇博文</a>进行设置）</p>

<p> 当你使用SecureCRT软件连接上树莓派后，回看到原本应该显示中文的，但是是乱码。</p>

<p><img src="/images/2017-3-6-solve-SecureCRT-display-Garbled/1488802132379.png" alt="Alt text" /></p>

<hr />

<h2>解决办法：</h2>

<p><img src="/images/2017-3-6-solve-SecureCRT-display-Garbled/1488802163692.png" alt="Alt text" /></p>

<p><img src="/images/2017-3-6-solve-SecureCRT-display-Garbled/1488802225722.png" alt="Alt text" /></p>

<p>然后，点击 <strong>OK</strong></p>

<hr />

<h2>搞定</h2>

<p>现在在执行一下 <code>sudo apt-get update</code>。中文就正常的显示了：</p>

<p><img src="/images/2017-3-6-solve-SecureCRT-display-Garbled/1488802268905.png" alt="Alt text" /></p>

<hr />

<p>参考网站：<a href="http://riching.iteye.com/blog/349754">http://riching.iteye.com/blog/349754</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 如何使用桂电ipclient出校器上网 --- 最新的方法 --- 可以使用]]></title>
    <link href="http://aobojaing.github.io/blog/2017/03/06/Linux-Raspberry-Pi-use-guet-ipclient-Internet/"/>
    <updated>2017-03-06T19:20:43+08:00</updated>
    <id>http://aobojaing.github.io/blog/2017/03/06/Linux-Raspberry-Pi-use-guet-ipclient-Internet</id>
    <content type="html"><![CDATA[<hr />

<p>我之前写过在Linux系统或者树莓派上使用ipclient上网的教程，但是自从 2016年9月1号，学校换了新的ipclient出校器后，我之前记录的那些方法都不能使用了。</p>

<p>下面介绍一种新的方法。这个方法我已经测试过，可行！！</p>

<hr />

<h2>树莓派等开发板（比如pcduino） 使用ipclient出校器上网</h2>

<p>对于树莓派，如果你在桂电这个学校，如果一个初学者，你手头没有一个树莓派专用的Wifi USB无线模块的话，你都不知道如何使用网线让你的树莓派连接外网。</p>

<p>下面介绍一个方法，你学会了这个方法后，你没有树莓派Wifi USB专用模块，只需要一根网线，就可以上网。（前提是：我没有在宿舍试过。）</p>

<hr />

<p>到GitHub上，下载这个网站里面的源代码：<a href="https://github.com/xuzhipengnt/ipclient_gxnu">https://github.com/xuzhipengnt/ipclient_gxnu</a></p>

<p>下载完成后，在终端中来到刚刚下载后的源代码的这个路径下：<code>ipclient_gxnu /ipclient_python/</code></p>

<p>我们先使用文本编辑器打开这个路径里面的<code>ipclient.py</code>文件，然后修改一个地方：</p>

<p><img src="/images/2017-3-6-Linux-Raspberry-Pi-use-guet-ipclient-Internet/1488798468322.png" alt="Alt text" /></p>

<p>将第8行的代码修改为：（如果你是桂电的，需要修改；但是如果你是师大的，就不需要改动。）</p>

<pre><code class="python">server =  ' 172.16.1.1 '
</code></pre>

<blockquote><p>广西师范大学的服务器地址为：202.193.160.123</p>

<p>桂林电子科大服务器地址为：172.16.1.1</p></blockquote>

<p>保存文件后，执行下面的命令：</p>

<blockquote><p>在执行下面的命令之前，你需要树莓派连接网线。</p></blockquote>

<pre><code>sudo chmod 777 ipclient.py
python ipclient.py
</code></pre>

<p>如果你看到下面的输出：</p>

<pre><code>pi@raspberrypi:~/Downloads/ipclient_gxnu/ipclient_python $ python ipclient.py 
IP Client for GXNU  (xzpmail@gmail.com)
...........................................
Please input username and password:
Username:
</code></pre>

<p>这个时候，你输入你的学号和密码，就可以上网了。</p>

<p><img src="/images/2017-3-6-Linux-Raspberry-Pi-use-guet-ipclient-Internet/1488798987751.png" alt="Alt text" /></p>

<h2>搞定</h2>

<hr />

<h2>Linux系统（比如：Ubuntu） 使用ipclient出校器上网</h2>

<p>同理。就不啰嗦了。</p>
]]></content>
  </entry>
  
</feed>
