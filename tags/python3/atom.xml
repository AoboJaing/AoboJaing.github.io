<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: python3 | AoboSir 博客]]></title>
  <link href="http://aobojaing.github.io/tags/python3/atom.xml" rel="self"/>
  <link href="http://aobojaing.github.io/"/>
  <updated>2017-02-21T00:02:15+08:00</updated>
  <id>http://aobojaing.github.io/</id>
  <author>
    <name><![CDATA[Aobo Jaing]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python3 解决编码问题：  UnicodeEncodeError: 'gbk' codec can't encode character '\xa9' in position xxx: illegal multibyte sequence --- 当执行爬虫将爬取信息打印到终端时出现的编码错误]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/08/python3-UnicodeEncodeError-gbk-codec-can't-encode-character-xa9/"/>
    <updated>2016-12-08T06:38:45+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/08/python3-UnicodeEncodeError-gbk-codec-can't-encode-character-xa9</id>
    <content type="html"><![CDATA[<hr />

<h2>开发环境</h2>

<ul>
<li>Python第三方库：lxml、Twisted、pywin32、scrapy</li>
<li>Python 版本：python-3.5.0-amd64</li>
<li>PyCharm软件版本：pycharm-professional-2016.1.4</li>
<li>电脑系统：Windows 10 64位</li>
</ul>


<p>如果你还没有搭建好开发环境，请到<a href="http://www.aobosir.com/blog/2016/11/26/python3-large-web-crawler-001-Build-development-environment/">这篇博客</a>。</p>

<hr />

<p>当使用Scrapy写爬虫项目的时候，当我们爬取某些中文网站，然后在DOS终端中打印爬取的网页源代码的时候，会出现各式各样的编码错误，今天，我又遇到一种编码错误，下面我将这个错误和对应的解决办法记录下来。</p>

<p>爬取的目标网址：<a href="http://blog.csdn.net/github_35160620/article/details/53353672">http://blog.csdn.net/github_35160620/article/details/53353672</a></p>

<p>出现错误的代码：</p>

<pre><code class="python">    def next(self, response):
        body_data = response.body.decode('utf-8', 'ignore')
        print(body_data)
        pass
</code></pre>

<p>执行：来到对应的爬虫项目路径下，执行：</p>

<pre><code>scrapy crawl 爬虫名字
</code></pre>

<p>在出现的调试信息中你可以看到一个编码错误：</p>

<pre><code>    print(body_data)
UnicodeEncodeError: 'gbk' codec can't encode character '\xa9' in position 6732: illegal multibyte sequence
</code></pre>

<p>通过查看，这个<a href="http://www.codetable.net/hex/a9"><code>u'xa9'</code> Unicode编码所表示的字符是：<code>©</code></a>。</p>

<p><img src="/images/2016-12-8-python3-UnicodeEncodeError-gbk-codec-can't-encode-character-xa9/1481149755580.png" alt="Alt text" /></p>

<p>可以解决这个错误的方法：</p>

<p>将上面的代码修改为：</p>

<pre><code class="python">    def next(self, response):
        body_data = response.body.decode('utf-8', 'ignore').replace(u'\xa9', u'')
        print(body_data)
        pass
</code></pre>

<p>现在运行这个程序<code>scrapy crawl 爬虫名字 --nolog</code>，上面的编码错误就没有。成功的输出了爬取的网页的源代码。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Python 028 获取命令行参数]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/02/python-get-command-line-arguments/"/>
    <updated>2016-12-02T02:07:35+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/02/python-get-command-line-arguments</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>使用的电脑系统：Windows 10 64位</li>
<li>使用的开发集成环境：PyCharm 2016.1.4</li>
<li>使用的Python的版本：python2.7.10 或者 python 3.5.0</li>
</ul>


<hr />

<blockquote><p>本博文对Python2和Python3都适用。</p></blockquote>

<hr />

<pre><code class="python">import optparse

def main():
    parser = optparse.OptionParser('usage%prog ' +\
                                   '-f &lt;zipfile&gt; -d &lt;dictionary&gt;')
    parser.add_option('-f', dest='zname', type='string',\
                      help='specify zip file')
    parser.add_option('-d', dest='dname', type='string',\
                      help='specify dictionary file')
    (options, args) = parser.parse_args()
    if (options.zname == None) | (options.dname == None):
        print(parser.usage)
        exit(0)
        pass
    else:
        zname = options.zname
        dname = options.dname
        dlist = dname.split(',')
        pass
    print('zname is ', zname)
    print('dname is ', dname)
    print('dlist is ', dlist)
    pass

if __name__ == '__main__':
    main()
    pass
</code></pre>

<p>Python3 的运行结果：</p>

<pre><code>&gt;python learningpython28.py -f aobo  -d sir,patty,re
zname is  aobo
dname is  sir,patty,re
dlist is  ['sir', 'patty', 're']
</code></pre>

<p>Python2 的运行结果：</p>

<pre><code>&gt;C:\Python27\python.exe learningpython28.py -f aobo -d sir,patty,re
('zname is ', 'aobo')
('dname is ', 'sir,patty,re')
('dlist is ', ['sir', 'patty', 're'])
</code></pre>

<p>下面这个几个命令运行的效果是一样的：（Python2 和 Python3 运行的效果都一样）</p>

<pre><code>&gt;python learningpython28.py -h
&gt;python learningpython28.py --h
&gt;python learningpython28.py --help
&gt;python learningpython28.py -help
</code></pre>

<p>运行结果：</p>

<pre><code>Usage: usagelearningpython28.py -f &lt;zipfile&gt; -d &lt;dictionary&gt;

Options:
  -h, --help  show this help message and exit
  -f ZNAME    specify zip file
  -d DNAME    specify dictionary file
</code></pre>

<hr />

<h2>注意：如果传入的参数是<code>string</code>类型的，最好使用<code>""</code> 引上</h2>

<p>为什么？ 因为字符串里面难免可能会有 <code></code> （空格），所以，最好使用<code>""</code>（双引号）引上。</p>

<pre><code>&gt;python learningpython28.py -f "aobo fd g" -d "ava,dssd,hg"
zname is  aobo fd g
dname is  ava,dssd,hg
dlist is  ['ava', 'dssd', 'hg']
</code></pre>

<p>如果你用单引号或者不用引号，虽然说运行不会报错，但是运行的结果就不是你想要的。</p>

<pre><code>&gt;python learningpython28.py -f 'aobo fd g' -d 'ava,dssd,hg'
zname is  'aobo
dname is  'ava,dssd,hg'
dlist is  ["'ava", 'dssd', "hg'"]
</code></pre>

<pre><code>&gt;python learningpython28.py -f aobo fd g -d ava,dssd,hg
zname is  aobo
dname is  ava,dssd,hg
dlist is  ['ava', 'dssd', 'hg']
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Python 026 字符串连接]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/01/python-string-join/"/>
    <updated>2016-12-01T19:03:50+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/01/python-string-join</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>使用的电脑系统：Windows 10 64位</li>
<li>使用的开发集成环境：PyCharm 2016.1.4</li>
<li>使用的Python的版本：python2.7.10 或者 python 3.5.0</li>
</ul>


<hr />

<blockquote><p>本博文对Python2和Python3都适用。</p></blockquote>

<hr />

<p>参考网站：<a href="http://www.cnblogs.com/huangcong/archive/2011/08/29/2158268.html">Python 字符串操作（string替换、删除、截取、复制、连接、比较、查找、包含、大小写转换、分割等）</a></p>

<pre><code class="python"># -!- coding: utf-8 -!-

path = r'D:\WorkSpace\test_ws\笔记\text.md'
delimiter = '\\'

mylist = path.split(delimiter)
res_path = delimiter.join(mylist[:-1])
# res_path = res_path.decode('utf-8').encode('GB18030') # 如果是适用python2在windows系统上运行，需要将这样注释去掉，否则你会得到中文乱码
print(res_path)
</code></pre>

<p>运行输出：</p>

<pre><code>D:\WorkSpace\test_ws\笔记
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Python 025 字符串分割]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/01/python-string-split/"/>
    <updated>2016-12-01T17:06:32+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/01/python-string-split</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>使用的电脑系统：Windows 10 64位</li>
<li>使用的开发集成环境：PyCharm 2016.1.4</li>
<li>使用的Python的版本：python2.7.10 或者 python 3.5.0</li>
</ul>


<hr />

<blockquote><p>本博文对Python2和Python3都适用。</p></blockquote>

<hr />

<p>参考网站：<a href="http://www.runoob.com/python/att-string-split.html">Python split()方法</a></p>

<p>Python split()通过指定分隔符对字符串进行切片，返回一个列表。</p>

<h2>语法：</h2>

<pre><code class="python">zifuchuang.split(str, num)
</code></pre>

<ul>
<li>str 分隔符</li>
<li>num 分割次数</li>
</ul>


<h2>实例：</h2>

<pre><code class="python">str = r'D:\WorkSpace\test_ws\Git(GitHub)'
l = str.split('\\')
print(l)
print(str.split('\\', 1))
</code></pre>

<p>输出：</p>

<pre><code>['D:', 'WorkSpace', 'test_ws', 'Git(GitHub)']
['D:', 'WorkSpace\\test_ws\\Git(GitHub)']
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Python 023 类编程]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/01/class-programming-object/"/>
    <updated>2016-12-01T07:03:26+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/01/class-programming-object</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>使用的电脑系统：Windows 10 64位</li>
<li>使用的开发集成环境：PyCharm 2016.1.4</li>
<li>使用的Python的版本：python 3.5.0</li>
</ul>


<hr />

<h1>怎么使用python编写一个 <strong>类</strong></h1>

<p>参考网站：<a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c08/p01_change_string_representation_of_instances.html">Python3-cookbook 类与对象</a></p>

<p>随便编写一个Python类，类里面至少有下面三个函数：</p>

<pre><code class="python">class Pair:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __repr__(self):
        return 'Pair({0.x!r}, {0.y!r})'.format(self)

    def __str__(self):
        return '({0.x!s}, {0.y!s})'.format(self)
</code></pre>

<ul>
<li><code>__init__()</code> 函数就是类的构造函数。</li>
<li><code>__repr__()</code>  和 <code>__str__()</code> 函数 都是用来输出字符串用的。</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; p = Pair(3, 4)
&gt;&gt;&gt; p
Pair(3, 4) # __repr__() output
&gt;&gt;&gt; print(p)
(3, 4) # __str__() output
&gt;&gt;&gt;
</code></pre>

<hr />
]]></content>
  </entry>
  
</feed>
