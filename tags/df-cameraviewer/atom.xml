<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: DF_CameraViewer | AoboSir 博客]]></title>
  <link href="http://aobojaing.github.io/tags/df-cameraviewer/atom.xml" rel="self"/>
  <link href="http://aobojaing.github.io/"/>
  <updated>2017-02-21T00:25:04+08:00</updated>
  <id>http://aobojaing.github.io/</id>
  <author>
    <name><![CDATA[Aobo Jaing]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Intel RealSense 004(Learning RealSense SDK 003) DF_CameraViewer示例讲解]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/15/Intel-RealSense-SDK-DF_CameraViewer-cpp-code-sample-explain/"/>
    <updated>2016-12-15T07:01:51+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/15/Intel-RealSense-SDK-DF_CameraViewer-cpp-code-sample-explain</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>我使用的Intel RealSense 硬件：<a href="http://www.aobosir.com/blog/2016/12/14/Intel-RealSense-Camera-Introduction-F200-SR300-R200/">F200、SR300 和 R200 摄像头</a> 都可以</li>
<li>Intel RealSense SDK：intel_rs_sdk_offline_package_10.0.26.0396（安装教程<a href="http://www.aobosir.com/blog/2016/12/07/Intel-RealSense-Windows-download-install-intel-RealSense-SDK/">这里</a>）</li>
<li>电脑系统：Windows 10 64位</li>
<li>编程语言：C++</li>
<li>开发工具软件：Visual Studio 2010 （安装教程<a href="http://blog.csdn.net/github_35160620/article/details/52365464">这里</a>）</li>
<li>参考程序所在路径：C:\Program Files (x86)\Intel\RSSDK\sample\DF_CameraViewer\src\camera_viewer.cpp</li>
<li>示例程序官方文档使用说明：C:\Program Files (x86)\Intel\RSSDK\doc\CHM\sdkmanual-essential.chm -> Sample: DF_CameraViewer [C++]</li>
</ul>


<p><img src="/images/2016-12-14-Intel-RealSense-SDK-DF_CameraViewer-cpp-code-sample-explain/1481755013420.png" alt="Alt text" /></p>

<hr />

<h2><code>DF_</code> 指的是什么</h2>

<p>（在我写的：介绍<a href="http://www.aobosir.com/blog/2016/12/14/Intel-RealSense-Camera-Introduction-F200-SR300-R200/">F200、SR300 和 R200 摄像头</a> 的博文里面已经有讲过了。）这里直接截个图。</p>

<p><img src="/images/2016-12-14-Intel-RealSense-SDK-DF_CameraViewer-cpp-code-sample-explain/1481751810567.png" alt="Alt text" /></p>

<hr />

<blockquote><p><strong>注意：</strong>Intel RealSense 模块使用时间长了发热会很严重。不要开启太长的时间，并且注意使用散热片散热</p></blockquote>

<h2>在命令行中的使用方法</h2>

<pre><code>DF_CameraViewer [-load &lt;module name&gt;] [-sdname &lt;device name&gt;] 
[-csize &lt;resolution&gt;] [-dsize &lt;resolution&gt;] [-file &lt;Output Filename&gt;] [-listio] [-record] [-help]
</code></pre>

<table>
<thead>
<tr>
<th style="text-align:left;"> Col1      </th>
<th style="text-align:right;">     Col2 </th>
<th style="text-align:center;">   Col3   </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> -load </td>
<td style="text-align:right;">   明确加载指定模块（如果你的电脑上连接了两个Intel RealSense模块，使用这个参数就可以明确指定你要使用哪一个模块） </td>
<td style="text-align:center;">  field3  </td>
</tr>
<tr>
<td style="text-align:left;"> -csize </td>
<td style="text-align:right;"> 指定彩色流分辨率和帧速率。 例如，使用640x480指定分辨率，或使用640x480x30指定分辨率和帧速率。 </td>
<td style="text-align:center;"> <code>DF_CameraViewer -csize 640x480x30</code> 或者 <code>DF_CameraViewer -csize 640x480</code></td>
</tr>
<tr>
<td style="text-align:left;"> -dsize </td>
<td style="text-align:right;"> 指定深度流分辨率和帧速率。 例如，使用640x480指定分辨率，或使用640x480x30指定分辨率和帧速率。 </td>
<td style="text-align:center;"> <code>DF_CameraViewer -dsize 640x480x30</code> 或者 <code>DF_CameraViewer -dsize 640x480</code> </td>
</tr>
<tr>
<td style="text-align:left;"> -sdname </td>
<td style="text-align:right;"> 指定一个输入设备名称 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td style="text-align:left;"> -nframes </td>
<td style="text-align:right;">  指定要显示的最大帧数。就是刷新多少次显示的图片。比如设置为200，那么帧数刷新200次，程序自动结束。 </td>
<td style="text-align:center;"> <code>DF_CameraViewer –nframes 200</code> </td>
</tr>
<tr>
<td style="text-align:left;"> -listio </td>
<td style="text-align:right;"> 列出I/O 设备列表 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td style="text-align:left;"> -record </td>
<td style="text-align:right;"> 启用文件记录。 如果使用这个参数，就必须要还要使用-file参数指定记录文件名 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td style="text-align:left;"> -file </td>
<td style="text-align:right;"> 录像或者播放指定文件名。 如果未指定-record，则程序将播放指定的文件。 否则，示例将摄像机数据记录到指定的文件。 （注意:指定的路径一定要有可写的权限。）</td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td style="text-align:left;"> -help </td>
<td style="text-align:right;"> 输出帮助信息 </td>
<td style="text-align:center;"> </td>
</tr>
</tbody>
</table>


<hr />

<pre><code>&gt;DF_CameraViewer -help
Usage: [options]
-csize 640x480x30             Set the source device color resolution and frame rate
-dsize 320x240x60             Set the source device depth resolution and frame rate
-isize 640x480x30             Set the source device IR resolution and frame rate
-file FILENAME                Specify playback (or recording) file
-record                       Use together with -file to enable recording
-nframes 350                  Record specific number of frames then exit
-sdname Integrated            Specify the source device by its partial name
-listio                       List all I/O devices
-noRender                     Disable rendering of all streams
-mirror                       Enable MIRROR_MODE_HORIZONTAL
-help                         This help
</code></pre>

<hr />

<h2>在命令行中运行程序</h2>

<p>下面简单的使用几个命令，来通过实战了解各个参数的作用。</p>

<pre><code>&gt;DF_CameraViewer.exe
</code></pre>

<p>默认输出两个图片，一个是彩色图片（1080p），一个是深度图片（640x480）。（彩色图片太大了，这里只截了一半的图）</p>

<p><img src="/images/2016-12-14-Intel-RealSense-SDK-DF_CameraViewer-cpp-code-sample-explain/1481665036586.png" alt="Alt text" /></p>

<hr />

<pre><code>&gt;DF_CameraViewer.exe -csize 640x480 -dsize 640x480 -isize 640x480
（注意：640x480, 使用的是字母 x ）
</code></pre>

<p>输出三个图片：彩色图片、深度图片、红外线图片</p>

<p><img src="/images/2016-12-14-Intel-RealSense-SDK-DF_CameraViewer-cpp-code-sample-explain/1481662595704.png" alt="Alt text" /></p>

<hr />

<pre><code>&gt;DF_CameraViewer.exe -csize 640x480 -dsize 640x480 -isize 640x480 -mirror
</code></pre>

<p>输出的是镜面图像。</p>

<p><img src="/images/2016-12-14-Intel-RealSense-SDK-DF_CameraViewer-cpp-code-sample-explain/1481664965270.png" alt="Alt text" /></p>

<hr />

<h2>讲解程序</h2>

<p><strong>DF_CameraViewer</strong>示例是一个简单的<strong>C ++控制台应用程序</strong>。从这个示例程序，我们<strong>可以学到：如何从 Intel RealSense模块 以数据流的形式获取彩色图像和深度图像（或者其他图像）</strong>。</p>

<p><strong>1 . </strong> 创建了一个<code>PXCSenseManager</code>（RealSense管理器）类的实例化对象：</p>

<pre><code class="cpp">    PXCSenseManager *pp = PXCSenseManager::CreateInstance();
</code></pre>

<hr />

<p>注：</p>

<ul>
<li>Intel的RealSense SDK 的C++的：接口全部携带“<code>PXC</code>”前缀、 顶层枚举器全部携带“<code>pxc</code>”前缀、实用程序类全部携带“<code>Util</code>”前缀。</li>
<li>Intel RealSense SDK C#使用类似的前缀方案，但在末尾加一个“<code>M</code>”（代表“管理”的意思）：接口携带“<code>PXCM</code>”前缀、 顶层枚举器携带“<code>pxcm</code>”前缀、实用程序类携带“<code>UtilM</code>”前缀。</li>
<li>如果你在网上搜索资料时看到："PXC[M]&ldquo;, "pxc[m]&rdquo; 和 &ldquo;Util[M]"，这表示这个资料是C++ 和 C#都可以使用的资料。里面使用"PXC[M]&rdquo;, &ldquo;pxc[m]&rdquo; 和 &ldquo;Util[M]&rdquo; 标注的接口和函数，如果替换成 “<code>PXC</code>”、“<code>pxc</code>” 和 “<code>Util</code>”，那么就是C++程序；反之，如果替换成“<code>PXCM</code>”、“<code>pxcm</code>” 和 “<code>UtilM</code>”，那么就是C#程序。</li>
<li>“<code>PXC</code>” 是全称是：？2016-12-13 07:01:17 <a href="https://software.intel.com/en-us/forums/realsense/topic/601434">https://software.intel.com/en-us/forums/realsense/topic/601434</a> 这个我还不太清楚，应该是：Perceptual eXperience Coding</li>
</ul>


<hr />

<p><strong>2 . </strong> 程序接下来，检查是否<code>pp</code>这个对象是否创建成功：（这个就是一个检测类的实例化对象是否创建成功的代码。电脑不插Intel RealSense模块， 这段代码也可以正常执行。）</p>

<pre><code class="cpp">    if (!pp) {
        wprintf_s(L"Unable to create the SenseManager\n");
        return 3;
    }
</code></pre>

<p>获取命令行参数：</p>

<pre><code class="cpp">    UtilCmdLine cmdl(pp-&gt;QuerySession());
    if (!cmdl.Parse(L"-listio-nframes-sdname-csize-dsize-isize-lsize-rsize-file-record-noRender-mirror",argc,argv)){
        system("pause");
        return 3;
    }
</code></pre>

<p>其中<code>QuerySession()</code>方法返回的是一个<code>Session</code>类的实例化对象。</p>

<p><code>UtilCmdLine</code> 这个类里面的<code>Parse()</code>方法会自动将<code>-listio-nframes-sdname-csize-dsize-isize-lsize-rsize-file-record-noRender-mirror</code>这一长串的字符串还有命令行参入的参数转换为一些数值，然后分配给<code>UtilCmdLine</code>类里面的一些变量：（<code>util_cmdline.h</code>文件所在路径：  <code>C:\Program Files (x86)\Intel\RSSDK\sample\common\include</code>）</p>

<p><img src="/images/2016-12-14-Intel-RealSense-SDK-DF_CameraViewer-cpp-code-sample-explain/1481595578366.png" alt="Alt text" /></p>

<blockquote><p>注意：这个<code>QuerySession()</code>方法返回的<code>Session</code>实例化对象（<code>pp-&gt;QuerySession()</code>）是存储在<code>PXCSenseManager</code>类（就是<code>pp</code>这个实例化对象）里面的，所以，你不可以手动释放它（<code>pp-&gt;QuerySession()</code>）。</p></blockquote>

<hr />

<p><strong>3 . </strong></p>

<pre><code class="cpp">    /* Sets file recording or playback */
    PXCCaptureManager *cm=pp-&gt;QueryCaptureManager();
    cm-&gt;SetFileName(cmdl.m_recordedFile, cmdl.m_bRecord);
    if (cmdl.m_sdname) cm-&gt;FilterByDeviceInfo(cmdl.m_sdname,0,0);
</code></pre>

<ul>
<li>定义了一个<code>PXCCaptureManager</code>（捕获管理器）对象。</li>
<li>来到<code>cmdl.m_recordedFile</code>这个路径（如果你没有在命令行中指定<code>-file</code>参数，那么这段代码执行没有什么效果。第二个参数<code>cmdl.m_bRecord</code>，判断是播放还是录制。）</li>
<li>如果在命令行中指定了<code>-sdname</code>参数，那么就在这里设定使用指定的Intel RealSense设备。</li>
</ul>


<hr />

<p><strong>4 . </strong></p>

<p>创建了几个<code>UtilRender</code>类的实例对象。它们分别是：彩色图像显示流、深度图像显示流、红外激光显示流、右摄像头显示流、左摄像头显示流。</p>

<pre><code class="cpp">    // Create stream renders
    UtilRender renderc(L"Color"), renderd(L"Depth"), renderi(L"IR"), renderr(L"Right"), renderl(L"Left");
    pxcStatus sts;
</code></pre>

<blockquote><p>注：C++的字符串前面的<code>L</code>的作用： <code>L"我的字符串"</code>    表示将ANSI字符串转换成unicode的字符串</p></blockquote>

<hr />

<p><strong>5 . </strong></p>

<p>接下来，根据命令行传入的参数进行相应的设置：</p>

<pre><code class="cpp">    do {
        /* Apply command line arguments */
        pxcBool revert = false;
        if (cmdl.m_csize.size()&gt;0) {
                pp-&gt;EnableStream(PXCCapture::STREAM_TYPE_COLOR, cmdl.m_csize.front().first.width, cmdl.m_csize.front().first.height, (pxcF32)cmdl.m_csize.front().second);
        }
        if (cmdl.m_dsize.size()&gt;0) {
            pp-&gt;EnableStream(PXCCapture::STREAM_TYPE_DEPTH, cmdl.m_dsize.front().first.width, cmdl.m_dsize.front().first.height, (pxcF32)cmdl.m_dsize.front().second);
        }
        if (cmdl.m_isize.size() &gt; 0) {
            pp-&gt;EnableStream(PXCCapture::STREAM_TYPE_IR, cmdl.m_isize.front().first.width, cmdl.m_isize.front().first.height, (pxcF32)cmdl.m_isize.front().second);
        }
        if (cmdl.m_rsize.size() &gt; 0) {
            pp-&gt;EnableStream(PXCCapture::STREAM_TYPE_RIGHT, cmdl.m_rsize.front().first.width, cmdl.m_rsize.front().first.height, (pxcF32)cmdl.m_rsize.front().second);
        }
        if (cmdl.m_lsize.size() &gt; 0) {
            pp-&gt;EnableStream(PXCCapture::STREAM_TYPE_LEFT, cmdl.m_lsize.front().first.width, cmdl.m_lsize.front().first.height, (pxcF32)cmdl.m_lsize.front().second);
        }
        if (cmdl.m_csize.size() == 0 &amp;&amp; cmdl.m_dsize.size() == 0 &amp;&amp; cmdl.m_isize.size() == 0 &amp;&amp; cmdl.m_rsize.size() == 0 &amp;&amp; cmdl.m_lsize.size() == 0) {
            PXCVideoModule::DataDesc desc={};
            if (cm-&gt;QueryCapture()) {
                cm-&gt;QueryCapture()-&gt;QueryDeviceInfo(0, &amp;desc.deviceInfo);
            } else {
                desc.deviceInfo.streams = PXCCapture::STREAM_TYPE_COLOR | PXCCapture::STREAM_TYPE_DEPTH;
                revert = true;
            }
            pp-&gt;EnableStreams(&amp;desc);
        }
</code></pre>

<p>使能某个显示流显示窗口的方法是：<code>pp-&gt;EnableStream()</code></p>

<p>如果你给上面的程序的每一个<code>if</code>判断语句内部添加上注释（像下面这样），然后再在命令行中使用命令运行程序。你就知道了，这些程序是怎么执行的了。</p>

<pre><code class="cpp">    do {
        /* Apply command line arguments */
        pxcBool revert = false;
        printf("cmdl.m_csize.size() = %d\n", cmdl.m_csize.size());
        if (cmdl.m_csize.size()&gt;0) {
            pp-&gt;EnableStream(PXCCapture::STREAM_TYPE_COLOR, cmdl.m_csize.front().first.width, cmdl.m_csize.front().first.height, (pxcF32)cmdl.m_csize.front().second);
            printf("cmdl.m_csize.front().first.width=%d, cmdl.m_csize.front().first.height=%d, cmdl.m_csize.front().second=%d\n", cmdl.m_csize.front().first.width, cmdl.m_csize.front().first.height, cmdl.m_csize.front().second);
        }
        printf("cmdl.m_dsize.size() = %d\n", cmdl.m_dsize.size());
        if (cmdl.m_dsize.size()&gt;0) {
            pp-&gt;EnableStream(PXCCapture::STREAM_TYPE_DEPTH, cmdl.m_dsize.front().first.width, cmdl.m_dsize.front().first.height, (pxcF32)cmdl.m_dsize.front().second);
            printf("cmdl.m_dsize.front().first.width=%d, cmdl.m_dsize.front().first.height=%d, cmdl.m_dsize.front().second=%d\n", cmdl.m_dsize.front().first.width, cmdl.m_dsize.front().first.height, cmdl.m_dsize.front().second);
       }
        printf("cmdl.m_isize.size() = %d\n", cmdl.m_isize.size());
        if (cmdl.m_isize.size() &gt; 0) {
            pp-&gt;EnableStream(PXCCapture::STREAM_TYPE_IR, cmdl.m_isize.front().first.width, cmdl.m_isize.front().first.height, (pxcF32)cmdl.m_isize.front().second);
            printf("cmdl.m_isize.front().first.width=%d, cmdl.m_isize.front().first.height=%d, cmdl.m_isize.front().second=%d\n", cmdl.m_isize.front().first.width, cmdl.m_isize.front().first.height, cmdl.m_isize.front().second);
        }
        printf("cmdl.m_rsize.size() = %d\n", cmdl.m_rsize.size());
        if (cmdl.m_rsize.size() &gt; 0) {
            pp-&gt;EnableStream(PXCCapture::STREAM_TYPE_RIGHT, cmdl.m_rsize.front().first.width, cmdl.m_rsize.front().first.height, (pxcF32)cmdl.m_rsize.front().second);
            printf("cmdl.m_rsize.front().first.width=%d, cmdl.m_rsize.front().first.height=%d, cmdl.m_rsize.front().second=%d\n", cmdl.m_rsize.front().first.width, cmdl.m_rsize.front().first.height, cmdl.m_rsize.front().second);
       }
        printf("cmdl.m_lsize.size() = %d\n", cmdl.m_lsize.size());
        if (cmdl.m_lsize.size() &gt; 0) {
            pp-&gt;EnableStream(PXCCapture::STREAM_TYPE_LEFT, cmdl.m_lsize.front().first.width, cmdl.m_lsize.front().first.height, (pxcF32)cmdl.m_lsize.front().second);
            printf("cmdl.m_lsize.front().first.width=%d, cmdl.m_lsize.front().first.height=%d, cmdl.m_lsize.front().second=%d\n", cmdl.m_lsize.front().first.width, cmdl.m_lsize.front().first.height, cmdl.m_lsize.front().second);
        }
</code></pre>

<blockquote><p>如果有时程序秒退的话，你可以在<code>return</code>之前加上：<code>system("pause");</code>这样一段代码，让程序先暂停到这。</p></blockquote>

<hr />

<p><strong>6 . </strong></p>

<p>下面的代码是对命令行传入的 <code>-mirror</code> 参数进行处理：是否对图像进行镜像配置。</p>

<pre><code class="cpp">        /* Set mirror mode */
        if (cmdl.m_bMirror) {
            device-&gt;SetMirrorMode(PXCCapture::Device::MirrorMode::MIRROR_MODE_HORIZONTAL);
        } else {
            device-&gt;SetMirrorMode(PXCCapture::Device::MirrorMode::MIRROR_MODE_DISABLED);
        }
</code></pre>

<hr />

<p><strong>7 . </strong> 下面显示图片：</p>

<pre><code class="cpp">            if (cmdl.m_bNoRender == false) {
                const PXCCapture::Sample *sample = pp-&gt;QuerySample();
                if (sample) {
                    if (sample-&gt;depth &amp;&amp; !renderd.RenderFrame(sample-&gt;depth)) break;
                    if (sample-&gt;color &amp;&amp; !renderc.RenderFrame(sample-&gt;color)) break;
                    if (sample-&gt;ir    &amp;&amp; !renderi.RenderFrame(sample-&gt;ir))    break;
                    if (sample-&gt;right &amp;&amp; !renderr.RenderFrame(sample-&gt;right)) break;
                    if (sample-&gt;left  &amp;&amp; !renderl.RenderFrame(sample-&gt;left))  break;
                }
            }
</code></pre>

<p>参考文献：C:\Program Files (x86)\Intel\RSSDK\doc\CHM\sdkmanual-essential.chm -> QuerySample</p>

<ul>
<li><code>QuerySample()</code>函数可以返回所有可能存在的图片样本。</li>
<li>如果不给<code>QuerySample()</code>函数不传入任何形参，那么它将返回一个<code>Sample</code>结构体，这个结构体里面包含了所有的可能存在的图片样本。<strong>[</strong>可能存在的图片样本：depth（深度图像）、color（彩色图像）、ir（红外线图像）、right（右图像）、left（左图像）。<strong>]</strong> （下图就是<code>Sample</code>结构体其中一部分）

<ul>
<li><img src="/images/2016-12-14-Intel-RealSense-SDK-DF_CameraViewer-cpp-code-sample-explain/1481666053928.png" alt="Alt text" /></li>
</ul>
</li>
<li>如果给<code>QuerySample()</code>函数传入一个指定的参数，那么它将只返回对应参数的图片样本。</li>
<li>如果你给<code>QuerySample()</code>函数传入一个参数，是你当前使用的Intel RealSense模块没有的设备，那么<code>QuerySample()</code>函数会返回<code>NULL/null</code>。<strong>（</strong>比如说：我们当前使用的Intel RealSense模块是SR300，它没有right Camera 和 left Camera设备，所以如果你给<code>QuerySample()</code>函数传入<code>sample-&gt;right</code> 或者 <code>sample-&gt;left</code>参数，那么<code>QuerySample()</code>函数将返回<code>NULL/null</code>。R200版的Intel RealSense模块是具备right Camera 和 left Camera设备的，所以如果你当前使用的是R200，那么给<code>QuerySample()</code>函数传入<code>sample-&gt;right</code> 或者 <code>sample-&gt;left</code>参数，<code>QuerySample()</code>函数会返回<code>sample-&gt;right</code> 或者 <code>sample-&gt;left</code>对应的图片样本。<strong>）</strong></li>
</ul>


<p>上面的代码中，类似<code>if (sample-&gt;depth &amp;&amp; !renderd.RenderFrame(sample-&gt;depth)) break;</code>这样的代码一共有5句。它们分别处理：depth（深度图像）、color（彩色图像）、ir（红外线图像）、right（右图像）、left（左图像）。</p>

<hr />

<p>下面以深度图像为例，讲解：</p>

<ul>
<li>第一个判断条件：有没有得到深度图片<code>sample-&gt;depth</code>。如果没有直接<code>break</code>，第二个判断条件不会执行。</li>
<li>第二个判断条件：<code>RenderFrame()</code>函数是<code>UtilRender</code>类中的一个方法，它用来显示传入的形参图片，并返回一个<code>bool</code>类型数据，如果成功显示，返回<code>true</code>，否则返回<code>false</code>。</li>
</ul>


<p>那么对于深度图像<code>sample-&gt;depth</code>，伪码就应该是下面这样的。所以不执行<code>break;</code></p>

<pre><code>if(true &amp;&amp; !true)   break;
</code></pre>

<p>对于右图像<code>sample-&gt;right</code>，它的伪码是下面这样的（当前使用的是SR300）。所以也不执行<code>break;</code></p>

<pre><code>if(false &amp;&amp; !false) break;
</code></pre>

<blockquote><p>程序会正常的执行，图片会正常的显示。那么什么时候图片会不正常显示呢：当执行到<code>break;</code>，图片就不显示了。执行到<code>break</code>说明判断语句是<code>if(true &amp;&amp; !false)</code>这样的状态。说明图片我们会得到了，但是在显示的时候失败了。</p></blockquote>

<hr />

<h2>讲解完毕</h2>
]]></content>
  </entry>
  
</feed>
