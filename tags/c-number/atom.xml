<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: C# | AoboSir 博客]]></title>
  <link href="http://aobojaing.github.io/tags/c-number/atom.xml" rel="self"/>
  <link href="http://aobojaing.github.io/"/>
  <updated>2017-03-06T20:18:43+08:00</updated>
  <id>http://aobojaing.github.io/</id>
  <author>
    <name><![CDATA[Aobo Jaing]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C# 003 C#调用cmd.exe执行命令]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/02/cs-003-cmd-exe-execute-command-line-command/"/>
    <updated>2016-12-02T07:57:03+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/02/cs-003-cmd-exe-execute-command-line-command</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>我使用的电脑：Windows 10 64位</li>
<li>使用的Visual Studio 软件： VS2010</li>
</ul>


<hr />

<p>参考网站：<a href="http://www.cnblogs.com/njl041x/p/3881550.html">C#程序调用cmd.exe执行命令</a></p>

<p>创建一个文件，名为：<code>RunCmd.cs</code>。将下面的代码拷贝到里面。</p>

<pre><code class="csharp">using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Diagnostics;

namespace AoboSir
{
    class RunCmd
    {
        public RunCmd()
        {

        }

        private static string CmdPath = @"C:\Windows\System32\cmd.exe";

        /// &lt;summary&gt;
        /// 执行cmd命令
        /// 多命令请使用批处理命令连接符：
        /// &lt;![CDATA[
        /// &amp;:同时执行两个命令
        /// |:将上一个命令的输出,作为下一个命令的输入
        /// &amp;&amp;：当&amp;&amp;前的命令成功时,才执行&amp;&amp;后的命令
        /// ||：当||前的命令失败时,才执行||后的命令]]&gt;
        /// 其他请百度
        /// &lt;/summary&gt;
        /// &lt;param name="cmd"&gt;&lt;/param&gt;
        /// &lt;param name="output"&gt;&lt;/param&gt;
        public void run(string cmd, out string output)
        {
            cmd = cmd.Trim().TrimEnd('&amp;') + "&amp;exit";//说明：不管命令是否成功均执行exit命令，否则当调用ReadToEnd()方法时，会处于假死状态
            using (Process p = new Process())
            {
                p.StartInfo.FileName = CmdPath;
                p.StartInfo.UseShellExecute = false;        //是否使用操作系统shell启动
                p.StartInfo.RedirectStandardInput = true;   //接受来自调用程序的输入信息
                p.StartInfo.RedirectStandardOutput = true;  //由调用程序获取输出信息
                p.StartInfo.RedirectStandardError = true;   //重定向标准错误输出
                p.StartInfo.CreateNoWindow = true;          //不显示程序窗口
                p.Start();//启动程序

                //向cmd窗口写入命令
                p.StandardInput.WriteLine(cmd);
                p.StandardInput.AutoFlush = true;
                //p.StandardInput.WriteLine("exit");
                //向标准输入写入要执行的命令。这里使用&amp;是批处理命令的符号，表示前面一个命令不管是否执行成功都执行后面(exit)命令，如果不执行exit命令，后面调用ReadToEnd()方法会假死
                //同类的符号还有&amp;&amp;和||前者表示必须前一个命令执行成功才会执行后面的命令，后者表示必须前一个命令执行失败才会执行后面的命令

                //获取cmd窗口的输出信息
                output = p.StandardOutput.ReadToEnd();
                p.WaitForExit();//等待程序执行完退出进程
                p.Close();
            }
        }
    }
}
</code></pre>

<p>我们可以这样使用这个<code>RunCmd</code> 类：</p>

<p>在GUI界面里面添加一个按钮，然后在对应的<code>.cs</code> 文件的程序，就类似于下面这个样子：</p>

<pre><code class="csharp">using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using AoboSir;

namespace learningcs003
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        RunCmd runcmd = new RunCmd();

        private void button1_Click(object sender, EventArgs e)
        {
            string commond, output;
            commond = @"notepad.exe";
            runcmd.run(commond, out output);
            //MessageBox.Show(output);
        }
    }
}
</code></pre>

<p>运行的功能是：启动 <strong>记事本</strong> 软件。</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C# 002 浏览（或叫：选择）、打开 文件和文件夹（或叫：目录）]]></title>
    <link href="http://aobojaing.github.io/blog/2016/11/17/cs-002-Browse-Open-file-folder/"/>
    <updated>2016-11-17T16:26:51+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/11/17/cs-002-Browse-Open-file-folder</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>我使用的电脑：Windows 10 64位</li>
<li>使用的Visual Studio 软件： VS2010</li>
</ul>


<p><strong>GitHub</strong>源代码地址：
<a href="https://github.com/AoboJaing/Browse_Open_file_folder">https://github.com/AoboJaing/Browse_Open_file_folder</a></p>

<hr />

<h2>准备工作</h2>

<p>设计GUI界面：</p>

<p><img src="/images/2016-11-17-cs-002-Browse-Open-file-folder/1479359628032.png" alt="Alt text" /></p>

<hr />

<blockquote><p>参考网站：
<a href="http://www.cnblogs.com/szytwo/archive/2012/03/21/2410041.html">http://www.cnblogs.com/szytwo/archive/2012/03/21/2410041.html</a></p></blockquote>

<h2>浏览（或叫：选择）文件夹（或叫：目录）</h2>

<pre><code class="csharp">            FolderBrowserDialog dialog = new FolderBrowserDialog();
            dialog.Description = "请选择文件路径";
            if (dialog.ShowDialog() == DialogResult.OK)
            {
                string foldPath = dialog.SelectedPath;
                textBox1.Text = foldPath;
            }
</code></pre>

<h2>打开 文件夹</h2>

<pre><code class="csharp">            System.Diagnostics.Process.Start("Explorer.exe", textBox1.Text);
</code></pre>

<hr />

<h2>浏览（或叫：选择）文件</h2>

<p>双击 <strong>Button2</strong>（浏览）按钮，将下面的代码复制到<code>button2_Click()</code>事件函数里面：</p>

<pre><code class="csharp">            OpenFileDialog fileDialog = new OpenFileDialog();
            fileDialog.Multiselect = true;
            fileDialog.Title = "请选择文件";
            fileDialog.Filter="所有文件(*.*)|*.*";
            if (fileDialog.ShowDialog() == DialogResult.OK)
            {
                string file = fileDialog.FileName;
                textBox2.Text = file;
            }
</code></pre>

<h2>打开文件</h2>

<p>参考网站：<a href="https://zhidao.baidu.com/question/413230762.html">https://zhidao.baidu.com/question/413230762.html</a></p>

<pre><code class="csharp">            //System.Diagnostics.Process.Start("notepad++.exe", textBox2.Text);
            System.Diagnostics.Process.Start("XMP.exe", textBox2.Text);
</code></pre>

<p>这是一个使用<code>C#</code>来使用其他软件打开响应的文件的函数：<code>System.Diagnostics.Process.Start()</code></p>

<p>其他软件：<code>notepad.exe</code>是记事本、<code>notepad++.exe</code>是<strong>notepad++</strong>文本编辑器软件、<code>XMP.exe</code>是迅雷看看播放器软件。</p>

<h2>运行效果</h2>

<p><img src="/images/2016-11-17-cs-002-Browse-Open-file-folder/demo14.gif" alt="Alt text" /></p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C# 001 --- 正确的删除一个控件的事件函数 --- 解决错误：	“A”不包含“B”的定义，并且找不到可接受类型为“A”的第一个参数的扩展方法“B”(是否缺少 using 指令或程序集引用?)]]></title>
    <link href="http://aobojaing.github.io/blog/2016/11/13/cs-001-delete-event-function-resolve-error/"/>
    <updated>2016-11-13T13:54:49+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/11/13/cs-001-delete-event-function-resolve-error</id>
    <content type="html"><![CDATA[<hr />

<p>先添加一个控件。比如添加一个<code>GroupBox</code>控件。</p>

<p><img src="/images/2016-11-13-cs-001-delete-event-function-resolve-error/1479014826968.png" alt="Alt text" /></p>

<p>当然，这个控件你不需要任何事件函数，但是如果你已经双击这个控件，开始编辑这个控件的事件函数了，那么这个时候要删除这个控件的事件函数需要2步：</p>

<p><strong>Step 1 . </strong> 在 <code>Form11.cs</code> 文件中，将这个控件所有的事件函数删除。对于我们这个例子，删除的代码是：</p>

<pre><code class="csharp">        private void groupBox1_Enter(object sender, EventArgs e)
        {

        }
</code></pre>

<p>如果这个时候，你运行程序会出错：</p>

<pre><code>错误  1   “WindowsFormsApplication1_demo.Form1”不包含“groupBox1_Enter”的定义，并且找不到可接受类型为“WindowsFormsApplication1_demo.Form1”的第一个参数的扩展方法“groupBox1_Enter”(是否缺少 using 指令或程序集引用?)   
</code></pre>

<p>它提示你：你已经给<code>groupBox1</code>这个控件对象定义了一个<code>groupBox1_Enter</code>的方法了，但是编译器却没有找到这个函数。为什么没有找到？因为刚刚我们给它删除了。所以第2步：</p>

<p><strong>Step 2 . </strong> 在<strong>解决方案资源管理器</strong>，打开：<code>Form1.Designer.cs</code>文件：</p>

<p><img src="/images/2016-11-13-cs-001-delete-event-function-resolve-error/1479015257166.png" alt="Alt text" /></p>

<p>你会看到，一个小加号：</p>

<p><img src="/images/2016-11-13-cs-001-delete-event-function-resolve-error/1479015310058.png" alt="Alt text" /></p>

<p>点开这个小加号，里面就是所有空间的参数和方法的定义汇总。我们找到对应控件的事件函数：</p>

<p><img src="/images/2016-11-13-cs-001-delete-event-function-resolve-error/1479015437616.png" alt="Alt text" /></p>

<p><strong>VS</strong> 软件已经将有错误的地方，用波浪线标注了。我们直接删除这一行，即可：</p>

<pre><code class="csharp">            this.groupBox1.Enter += new System.EventHandler(this.groupBox1_Enter);
</code></pre>

<p>现在，再运行程序，就不会有错误了。</p>
]]></content>
  </entry>
  
</feed>
