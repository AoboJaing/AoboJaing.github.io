<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: SQL | AoboSir 博客]]></title>
  <link href="http://aobojaing.github.io/tags/sql/atom.xml" rel="self"/>
  <link href="http://aobojaing.github.io/"/>
  <updated>2016-12-01T07:09:08+08:00</updated>
  <id>http://aobojaing.github.io/</id>
  <author>
    <name><![CDATA[Aobo Jaing]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SQL 数据库 学习 034 事务]]></title>
    <link href="http://aobojaing.github.io/blog/2016/10/24/SQL-Learning-034-Transactions/"/>
    <updated>2016-10-24T13:20:24+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/10/24/SQL-Learning-034-Transactions</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>我的电脑系统：<strong>Windows  10</strong> 64位</li>
<li><strong>SQL Server</strong> 软件版本： <strong>SQL Server 2014 Express</strong></li>
</ul>


<hr />

<blockquote><p>本篇博客里面使用了 <code>scott</code> 库，如何你现在还没有添加这个库到你的服务器里面，请在查看本篇博客前，访问<a href="http://www.aobosir.com/blog/2016/10/16/SQL-Learning-016-how-to-attach-a-database/">这篇博文</a>来在你的服务器里面附加<code>scott</code>库。</p></blockquote>

<hr />

<h2>为什么需要事务</h2>

<p>事务主要用来保证数据的合理性和并发处理的能力！</p>

<p>通俗的说：</p>

<ul>
<li>事务可以保证避免数据处于一种不合理的中间状态</li>
<li>利用事务可以实现多个用户对共享资源的同时访问</li>
</ul>


<p>例子：</p>

<p>银行中的转账操作，账户A把一定数量的款项转到账户B上，这个操作包括两个步骤，一个是从账户A上把存款减去一定数量，二是在账户B上把存款加上相同的数量。这两个步骤显然要么都完成，要么都取消，否则银行就会受损失。显然，这个转账操作中的两个步骤就构成一个事务。</p>

<p>假设A和B用户都希望查询修改M表数据，A用户不应该刚把M表的数据改成5，查询时显示的数据却是8（因为B用户修改M表的数据成8了）。事务必须得保证多个用户对共享资源同时访问时，数据库给用户的反应是合理的。</p>

<p>事务就是专门解决这个问题的。</p>

<hr />

<h2>什么是事务</h2>

<p>一系列操作要么全部执行成功，要么全部执行失败，这就是事务。</p>

<hr />

<h2>如何创建事务</h2>

<p><strong>T-SQL</strong> 使用下列语句管理事务：</p>

<ul>
<li>开启事务：<code>begin transaction</code></li>
<li>提交事务：<code>commit transaction</code></li>
<li>回滚（撤销）事务：<code>rollback transaction</code></li>
</ul>


<p>一旦事务提交或回滚，则事务结束。</p>

<p>判断某条语句执行是否出错：</p>

<ul>
<li>使用全局变量 <code>@@error</code></li>
<li><code>@@error</code> 只能判断当前一条<strong>T-SQL</strong>语句执行是否有错，为了判断事务中所有<strong>T-SQL</strong>语句是否有错，我们需要对错误进行累计。如：<code>set @errorSum=@errorSum+@@error</code></li>
</ul>


<hr />

<h2>初学者必须要掌握的三个问题：</h2>

<p>一 . 事务时用来研究什么的：</p>

<ul>
<li>避免数据处于不合理的中间状态。（比如：转账）</li>
<li>怎样避免多用户同时访问时，呈现给用户的数据是合理的。</li>
</ul>


<p>二 . 事务和线程的关系：</p>

<p>事务也是通过锁来解决很多问题的。（线程同步就是通过锁来解决的 <code>sychronized</code>）</p>

<p>三 . 事务和第三方插件的关系：</p>

<ul>
<li>直接使用事务库技术难度很大，很多人是借助第三方插件来实现。（因为我们一般人不需要细细的研究数据库中事务的语法细节。）</li>
<li>第三方插件要想完成预期的功能，一般必须得借助数据库中的事务机制。</li>
</ul>


<hr />

<h2>事务 &mdash; 总结 和 实例</h2>

<p>总结事务的四大特性：事务必须具备以下四个属性，简称<strong>ACID</strong>属性。</p>

<ul>
<li>原子性：事务是一个完整的操作。事务的各步操作是不可分的（原子的）；要么都执行，要么都不执行。</li>
<li>一致性：当事务完成时，数据必须处于一致状态，要么处于开始状态要么处于结束状态，不允许出现中间状态！</li>
<li>隔离性：指当前的事务与其他未完成的事务是隔离的。在不同的隔离级别下，事务的读取操作，可以得到的结果是不同的。</li>
<li>持久性：事务完成后，它对数据库的修改被永久保持，事务日志能够保持事务的永久性。</li>
</ul>


<p><strong>一个例子：</strong></p>

<pre><code class="sql">--创建Test库
create database Test
--进入Test库
use Test
--创建一个bank表
create table bank
(
    customerEname nvarchar(200),
    currrentMoney money
)
--插入数据
insert into bank values ('张三', 1000)
insert into bank values ('李四', 1)
--给bank表中的currentMoney属性添加一个约束
alter table bank add constraint check_currentMoney check(currentMoney&gt;=1)
</code></pre>

<p>现在我要将张三的1000打给李四。（这样做会失败，因为上面已经给<code>check_currentMoney</code>属性添加了一个约束：<code>currentMoney&gt;=1</code>）。</p>

<p>普通的查询指令进行转账：</p>

<pre><code class="sql">update bank set currentMoney=currentMoney-1000 where customerEname='张三'
update bank set currentMoney=currentMoney+1000 where customerEname='李四'
</code></pre>

<p>使用事务实现进行转账：（不重要，掌握就可以，语法怪异，实用性不强。）</p>

<pre><code class="sql">begin transaction
declare @errorSum int
set @errorSum = 0
update bank set currentMoney=currentMoney-1000
    where customerEname='张三'
set @errorSum = @errorSum + @@error
update bank bank set currentMoney=currentMoney+1000
    where customerEname='李四'
set @errorSum = @errorSum + @@error
if (@errorSum &lt;&gt; 0)
    begin
        print '转账失败'
        rollback transaction
    end
else
    begin
        print '转账成功'
        commit transaction
    end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL 数据库 学习 033 视图]]></title>
    <link href="http://aobojaing.github.io/blog/2016/10/24/SQL-Learning-033-View/"/>
    <updated>2016-10-24T09:13:55+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/10/24/SQL-Learning-033-View</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>我的电脑系统：<strong>Windows  10</strong> 64位</li>
<li><strong>SQL Server</strong> 软件版本： <strong>SQL Server 2014 Express</strong></li>
</ul>


<hr />

<blockquote><p>本篇博客里面使用了 <code>scott</code> 库，如何你现在还没有添加这个库到你的服务器里面，请在查看本篇博客前，访问<a href="http://www.aobosir.com/blog/2016/10/16/SQL-Learning-016-how-to-attach-a-database/">这篇博文</a>来在你的服务器里面附加<code>scott</code>库。</p></blockquote>

<hr />

<h2>为什么需要视图</h2>

<p>以一个例子为例：</p>

<p><strong>求出平均工资最高的部门的编号和部门的平均工资。</strong></p>

<pre><code class="sql">--使用我们目前所知道的方法去编写查询代码。
select *
    from (
        select deptno, avg(sal) "avg_sal"
            from emp
            group by deptno
    ) "T"
    where "T"."avg_sal" = (
        select max("E"."avg_sal") from (
            select deptno, avg(sal) "avg_sal"
                from emp
                group by deptno
        ) "E"
    )
</code></pre>

<p>上面的查询代码中，有下面的一段代码，这段代码是创建一个临时表。我们可以将这个临时表创建为一个视图：</p>

<pre><code class="sql">        select deptno, avg(sal) "avg_sal"
            from emp
            group by deptno
</code></pre>

<p>创建了一个视图：</p>

<pre><code class="sql">create view v$_emp_1
as
    select deptno, avg(sal) "avg_sal"
        from emp
        group by deptno
</code></pre>

<p>输出这个视图中的数据信息：</p>

<pre><code class="sql">select * from v$_emp_1
</code></pre>

<p>下面的代码的输出同上面<strong>使用目前所知道的方法去编写查询代码</strong>。</p>

<pre><code class="sql">select * from v$_emp_1
    where avg_sal = (select max(avg_sal) from v$_emp_1)
</code></pre>

<p><strong>总结：</strong> 视图的优点是可以简化查询代码。（简化查询）。即避免了代码的冗余；避免了属性大量重复的<strong>sql</strong>语法。</p>

<hr />

<h2>什么是视图</h2>

<ul>
<li>视图从代码上看视图是一个<code>select</code>语句。</li>
<li>视图从逻辑上被当做一个虚拟表看待。</li>
</ul>


<hr />

<h2>如何创建视图</h2>

<p>视图的格式</p>

<pre><code class="sql">create view 视图的名字
    as
        --select的前面不能添加begin
        select
        --select的后面不能添加end
</code></pre>

<hr />

<h2>视图的优点</h2>

<ol>
<li>视图的优点是可以简化查询代码。</li>
<li>增加数据的保密性</li>
</ol>


<pre><code class="sql">--屏蔽了入职日期和员工工资 这两个属性。
create view v$_emp2
as
    select empno, ename, job, mgr, comm, deptno 
        from emp
</code></pre>

<hr />

<h2>视图的缺点</h2>

<ol>
<li>增加了数据库维护的成本。

<ul>
<li>原表里面的属性被改了，那么视图就会报错。</li>
</ul>
</li>
<li>视图只是简化了查询的代码，但是并不能加快查询的速度，这也是视图使用不足的地方。</li>
</ol>


<hr />

<h2>使用视图要注意的三个问题</h2>

<p>1 . 创建视图的<code>select</code>语句必须得为所有的计算列指定别名</p>

<pre><code class="sql">--error
create view v$_a
as
    select avg(sal) from emp;
</code></pre>

<pre><code class="sql">--ok
create view v$_a
as
    select avg(sal) as "avg_sal" from emp;
</code></pre>

<p>2 . 视图不是物理表，而是虚拟表</p>

<p>3 . 不建议通过视图更新视图所依赖的原始表的数据和结果。（因为很麻烦，有许多语法的限制。）</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL 数据库 学习 032 identity的用法 --- 如何设置主键自动增长（用户不需要为identity修饰的主键赋值）]]></title>
    <link href="http://aobojaing.github.io/blog/2016/10/24/SQL-Learning-032-identity-usage-how-to-set-the-primary-key-auto-growth/"/>
    <updated>2016-10-24T05:28:22+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/10/24/SQL-Learning-032-identity-usage-how-to-set-the-primary-key-auto-growth</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>我的电脑系统：<strong>Windows  10</strong> 64位</li>
<li><strong>SQL Server</strong> 软件版本： <strong>SQL Server 2014 Express</strong></li>
</ul>


<hr />

<blockquote><p>本篇博客里面使用了 <code>scott</code> 库，如何你现在还没有添加这个库到你的服务器里面，请在查看本篇博客前，访问<a href="http://www.aobosir.com/blog/2016/10/16/SQL-Learning-016-how-to-attach-a-database/">这篇博文</a>来在你的服务器里面附加<code>scott</code>库。</p></blockquote>

<hr />

<h2><code>identity</code> 的用法 &mdash; 如何设置主键自动增长（用户不需要为identity修饰的主键赋值）</h2>

<pre><code class="sql">create table student3
(
    student_id int primary key identity (100, 5),
    student_name nvarchar(200) not null
)

select * from student3
insert into student3 (student_name) values ('张三');
insert into student3 values ('李四');  -- ok
delete from student3 where student_name = '李四';
insert into student3 (student_name) values ('王五');
</code></pre>

<h2>如何重新设置<code>identity</code> 字段的值</h2>

<p>表中删除数据又插入数据会导致主键不连续递增 怎么办？</p>

<p>不重要。主键是否连续增长不是非常重要。</p>

<p>如果对表中数据进行了删除操作，如何让 <code>identity</code> 字段重新从某个值开始自增？</p>

<pre><code class="sql">create table emp
(
    empid int identity(1, 1),
    ename nvarchar(20) not null
);

insert into emp values('aaaa');
insert into emp values('bbbb');
insert into emp values('cccc');
insert into emp values('dddd'); -- 10行
select * from emp
delete from emp where emp where wmpid=4 -- 删除empid为4的记录
select * from emp
insert into emp values('eeee') -- 因为执行10行时empid为4，所以执行本句时，empid为5
select * from emp
delete from emp where empid=5
dbcc checkident('emp', reseed, 3) -- 17行 把emp表中identity字段的初始值重新设置为3

insert into emp values('eeee') -- 此时插入记录时。empid为4，因为17行代码把empid设置成了3
select * from emp
</code></pre>

<pre><code class="sql">dbcc checkident('emp', reseed, 0)
</code></pre>

<p>种子的值也可以是零，这样设置的话，用户插入值时，种子的初始值将从1开始。</p>

<hr />

<p><strong>总结：</strong></p>

<p><code>identity</code> 表示该字段的值会自动更新，不需要我们维护，通常情况下我们不可以直接给 <code>identity</code> 修饰的字符赋值，否则编译时会报错。</p>

<p>语法格式为：</p>

<ul>
<li><code>identity [(m, n)]</code></li>
<li><code>m</code> 表示的是初始值，<code>n</code> 表示的是每次自动增加的值</li>
<li>要么同时指定 <code>m</code> 和 <code>n</code> 的值，要么 <code>m</code> 和 <code>n</code> 都不指定，不能只写其中一个值。如：<code>identity(3,2)</code>、<code>identity</code>  都是正确的，但是 <code>identity(3)</code>、<code>identity(2)</code>、<code>identity</code> 都是错误的。</li>
<li>如果 <code>m</code> 和 <code>n</code> 都未指定，则取默认值<code>(1, 1)</code></li>
</ul>


<p>数据类型是整型的列才能被定义成标识列：</p>

<ul>
<li><code>int</code>、<code>bigint</code>、<code>smallint</code> 列都可以被定义成 <code>identity</code></li>
<li>不含有小数位的 <code>decimal</code> 和 <code>numeric</code> 也可以被标记为 <code>identity</code>。如：<code>decimal</code>、<code>decimal(6, 0)</code> 字段都可以被标记为 <code>identity</code>，但是 <code>decimal(6, 2)</code> 字段就不能被标记为  <code>identity</code></li>
</ul>


<p>标识列通常与 <code>primary key</code> 约束一起用作表的唯一行标识符：</p>

<ul>
<li>非主键也是可以被定义为 <code>identity</code>的，但不推荐。</li>
</ul>


<hr />

<h2>如何向 <code>identity</code> 字段插入数据</h2>

<p>通常<code>identity</code>标记的字段我们是不需要插入数据的，即我们不需要维护 <code>identity</code> 字段的值，它会自动更新，如果我们需要向<code>identity</code>修饰的字段插入值，则必须满足如下两点：</p>

<ol>
<li>先得执行 <code>set identity_insert [database.[owner.]] {table} {on | off}</code></li>
<li>插入数据时必须得指定 <code>identity</code> 修饰的字段的名字</li>
</ol>


<hr />

<h2>如何向 <code>identity</code> 字段插入数据示例</h2>

<pre><code class="sql">create database Test
use test;
create table dept
(
    deptid decimal(6, 0) identity,
    deptname varchar(20),
);
set identity_insert test.dbo.dept on
    --执行本语句的目的是：希望可以向identity修饰的字段插入值
    --不可以改为set identity_insert dept on
    --不可以改为set identity_insert dbo.test.dept on
    --不可以改为set identity_insert dbo.test.dept.on
insert into dept (deptid, deptname) values (1, 'zhangsan')
    --不能改为：insert into dept values (1, 'zhangsan') -- 13
</code></pre>

<p>默认情况下，使用<code>identity</code>关键字修饰的主键是自动增长的，如果想手动设置主键的值，需要先将目标表打开：<code>set identity_insert test.dbo.dept on</code>，然后再使用<code>insert into dept (deptid, deptname) values (1, 'zhangsan')</code> 命令来手动设置主键的值。</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL 数据库 学习 031 查询-14 连接查询 ---  左（右）外连接、完全连接、交叉连接、联合]]></title>
    <link href="http://aobojaing.github.io/blog/2016/10/22/SQL-Learning-31-Query-14-Join-Query-Left-Right-Join-Full-Join-Cross-Join-Union/"/>
    <updated>2016-10-22T18:17:33+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/10/22/SQL-Learning-31-Query-14-Join-Query-Left-Right-Join-Full-Join-Cross-Join-Union</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>我的电脑系统：<strong>Windows  10</strong> 64位</li>
<li><strong>SQL Server</strong> 软件版本： <strong>SQL Server 2014 Express</strong></li>
</ul>


<hr />

<blockquote><p>本篇博客里面使用了 <code>scott</code> 库，如何你现在还没有添加这个库到你的服务器里面，请在查看本篇博客前，访问<a href="http://www.aobosir.com/blog/2016/10/16/SQL-Learning-016-how-to-attach-a-database/">这篇博文</a>来在你的服务器里面附加<code>scott</code>库。</p></blockquote>

<hr />

<h1>连接查询</h1>

<p><strong>定义：</strong></p>

<p>将两个表或者两个以上的表以一定的连接条件连接起来。从中检索出满足条件的数据。</p>

<hr />

<h2>内连接 （<code>innor join</code> 或者 <code>join</code>）</h2>

<p>请看这篇博客：<a href="http://www.aobosir.com/blog/2016/10/21/SQL-Learning-029-Query-12-Connection-query-the-connection/">SQL 数据库学习 查询 &mdash; 内连接</a>。</p>

<hr />

<h2>左（右）外连接 （<code>left join</code> 和 <code>right join</code>）</h2>

<pre><code class="sql">select * from emp "E"
    left join dept "D"
    on "E".deptno = "D".deptno
</code></pre>

<p><img src="/images/2016-10-22-SQL-Learning-31-Query-14-Join-Query-Left-Right-Join-Full-Join-Cross-Join-Union/1477131219555.png" alt="Alt text" /></p>

<p>实现的步骤：</p>

<ol>
<li>用左表的第一行分别和右表的所有行进行的连接，如果有匹配的行，则一起输出，如果右表有多行匹配，则结果集输出多行，如果没有匹配行，则结果集中只输出一行，该输出行左边为左表第一行内容，右边全部输出<code>null</code>。</li>
<li>然后再用左表第二行和右边所有行进行连接，如果没有匹配行，则结果集中只输出一行，该输出行左边为左表第二行内容，右边全部输出<code>null</code>。</li>
<li>以此类推，直至左边所有行连接完毕。</li>
<li>因为右边很可能出现有多行和左边的某一行匹配，所以左连接产生的结果集的行数很可能大于 <code>left join</code> 左边表的记录的总数。</li>
<li>帮助文档：左向外连接的结果集包括<code>LEFT OUTER</code> 子句中指定的左表的所有行，而不仅仅是连接列所匹配的行。如果左表的某行在右表中没有匹配行，则在相关联的结果集行中右表的所有选择列表均为空值。</li>
</ol>


<hr />

<p>左外连接的实际意义</p>

<ul>
<li>返回一个事情及其该事物的相关信息，如果该事物没有相关信息，则输出<code>null</code></li>
<li>例子：

<ul>
<li>已知条件： <code>productStocks</code> 货物库存表、 <code>orderform</code> 订单表、<code>pID</code> 是产品的编号</li>
<li><strong>sql语句</strong></li>
<li><code>select productStocks.*, orderform.* from productStocks left join orderform on productStocks.pID=orderform.pID</code></li>
<li>实际意义： 返回仓库中现存货物的信息及其该货物的订单信息，如果该货物没有订单信息，在把该货物的订单信息全部输出为<code>null</code>。</li>
</ul>
</li>
</ul>


<hr />

<h2>完全连接（<code>full join</code>）</h2>

<pre><code class="sql">select * from productStocks
    full join orderform
    on productStocks.pid = orderform.pid
</code></pre>

<p><img src="/images/2016-10-22-SQL-Learning-31-Query-14-Join-Query-Left-Right-Join-Full-Join-Cross-Join-Union/1477131238849.png" alt="Alt text" /></p>

<p>结果集中包含三部分内容：</p>

<ol>
<li>两个表中匹配的所有行记录</li>
<li>左表中那些在右表中找不到匹配的行的记录。这些记录的右边全为<code>null</code></li>
<li>右表中那些在左表中找不到匹配的行的记录。这些记录的左边全为<code>null</code></li>
</ol>


<hr />

<h2>交叉连接（<code>cross join</code>）</h2>

<pre><code class="sql">select *
    from emp
    cross join dept
</code></pre>

<p>等价于：</p>

<pre><code class="sql">select * from emp, dept
</code></pre>

<p>效果都是将两个表进行笛卡尔积。</p>

<p><img src="/images/2016-10-22-SQL-Learning-31-Query-14-Join-Query-Left-Right-Join-Full-Join-Cross-Join-Union/1477131282846.png" alt="Alt text" /></p>

<hr />

<h2>自连接</h2>

<p><strong>定义：</strong> 一张表自己和自己连接起来查询数据。</p>

<p>例子：不准用聚合函数 求薪水最高的员工的信息。</p>

<pre><code class="sql">--用聚合函数 求出薪水最高的员工的信息
select * 
    from emp
    where sal = (select max(sal) from emp)
</code></pre>

<pre><code class="sql">--不准用聚合函数 求出薪水最高的员工的信息
select * from emp 
    where empno not in (
        select distinct "E1".empno
        from emp "E1"
        join emp "E2"
        on "E1".sal &lt; "E2".sal
    )
</code></pre>

<p><img src="/images/2016-10-22-SQL-Learning-31-Query-14-Join-Query-Left-Right-Join-Full-Join-Cross-Join-Union/1477063139982.png" alt="Alt text" /></p>

<hr />

<h2>联合（<code>union</code>）</h2>

<p><strong>例子：</strong></p>

<p>输出每一个员工的姓名、工资、上司的姓名。</p>

<pre><code class="sql">select "E1".ename as "员工姓名","E1".sal as "员工工资", "E2".ename as "上司姓名" 
    from emp "E1", emp "E2"
    where "E1".mgr = "E2".EMPNO 
union
select ename, sal, '已是最大老板' from emp where mgr is null
</code></pre>

<p><img src="/images/2016-10-22-SQL-Learning-31-Query-14-Join-Query-Left-Right-Join-Full-Join-Cross-Join-Union/1477130066693.png" alt="Alt text" /></p>

<hr />

<p><strong>定义：</strong></p>

<p>表和表之间的数据以纵向的方式连接在一起。注意：我们以前讲的所有的连接是以横向的方式连接在一起的。</p>

<p><strong>注意：</strong></p>

<p>联合就是：若干个<code>select</code> 子句要联合成功的话，必须得满足两个条件：</p>

<ol>
<li>这若干个 <code>select</code> 子句输出的列数必须是相等的。</li>
<li>这若干个 <code>select</code> 子句输出列的数据类型至少是兼容的。</li>
</ol>


<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL 数据库 学习 030 查询-13 --- 查询语句的顺序]]></title>
    <link href="http://aobojaing.github.io/blog/2016/10/21/SQL-Learning-030-Query-13-Query-order-of-order/"/>
    <updated>2016-10-21T20:54:28+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/10/21/SQL-Learning-030-Query-13-Query-order-of-order</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>我的电脑系统：<strong>Windows  10</strong> 64位</li>
<li><strong>SQL Server</strong> 软件版本： <strong>SQL Server 2014 Express</strong></li>
</ul>


<hr />

<h2><strong>SQL Server</strong> 查询语句的顺序</h2>

<pre><code class="sql">select top ...
    from A
    join B
    on ...
    join C
    on ...
    where ...
    group by ...
    having ...
    order by ...
</code></pre>

<hr />

<h2>例子</h2>

<blockquote><p>本例子里面使用了 <code>scott</code> 库，如何你现在还没有添加这个库到你的服务器里面，请在查看本篇博客前，访问<a href="http://www.aobosir.com/blog/2016/10/16/SQL-Learning-016-how-to-attach-a-database/">这篇博文</a>来在你的服务器里面附加<code>scott</code>库。</p></blockquote>

<hr />

<p><strong>求出平均薪水最好的部门的标号和部门的平均工资</strong></p>

<pre><code class="sql">--求出平均薪水最好的部门的标号和部门的平均工资
--第1种写法：
select top 1 deptno, avg(sal) "avg_sal"
    from emp "E"
    group by deptno
    order by avg(sal) desc
</code></pre>

<p><img src="/images/2016-10-21-SQL-Learning-030-Query-13-Query-order-of-order/1477040016720.png" alt="Alt text" /></p>

<p>等价于：</p>

<pre><code class="sql">--求出平均薪水最好的部门的标号和部门的平均工资
--第2种写法：
select "E".*
    from (
        select deptno, avg(sal) "avg_sal"
            from emp
            group by deptno
    ) "E"
    where "E"."avg_sal" = (
        select max("avg_sal") 
            from (
                select deptno, avg(sal) "avg_sal" 
                    from emp 
                    group by deptno
            ) "T"
    )
</code></pre>

<p><img src="/images/2016-10-21-SQL-Learning-030-Query-13-Query-order-of-order/1477044470627.png" alt="Alt text" /></p>

<hr />
]]></content>
  </entry>
  
</feed>
