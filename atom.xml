<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[AoboSir 的博客]]></title>
  <link href="http://aobojaing.github.io/atom.xml" rel="self"/>
  <link href="http://aobojaing.github.io/"/>
  <updated>2016-10-16T19:40:50+08:00</updated>
  <id>http://aobojaing.github.io/</id>
  <author>
    <name><![CDATA[Aobo Jaing]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SQL 数据库 学习 017 查询-00 介绍 Scott 例子库]]></title>
    <link href="http://aobojaing.github.io/blog/2016/10/16/SQL-Learning-017-Query-00-Introdiction-scott-Sample-Library/"/>
    <updated>2016-10-16T19:40:10+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/10/16/SQL-Learning-017-Query-00-Introdiction-scott-Sample-Library</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>我的电脑系统：<strong>Windows  10</strong> 64位</li>
<li><strong>SQL Server</strong> 软件版本： <strong>SQL Server 2014 Express</strong></li>
</ul>


<hr />

<p>我们要查数据，总先得有数据要查吧，所以我们需要先找一个例子库。<strong>Orale</strong>软件里面就有一个例子库，这个库很经典，就是：<code>scott</code> 库。</p>

<h2>附加 <code>scott</code> 库</h2>

<p>如何添加一个 <code>scott</code> 数据库 到服务器中，请参考<a href="http://www.aobosir.com/blog/2016/10/16/SQL-Learning-016-how-to-attach-a-database/">这个网站</a>。</p>

<hr />

<h2>介绍 <code>scott</code> 库</h2>

<p>要想查询一个表，第一件事情就必须十分了解一个库里面所有的表 和 表与表之间的关系。</p>

<p>这个 <code>scott</code> 库里面一共有三个表：</p>

<p><img src="http://aobojaing.github.io/images/2016-10-16-SQL-Learning-017-Query-00-Introdiction-scott-Sample-Library/1476616454316.png" alt="Alt text" /></p>

<hr />

<p>先看看 <code>emp</code> 表（<strong>员工表</strong>）</p>

<p><img src="http://aobojaing.github.io/images/2016-10-16-SQL-Learning-017-Query-00-Introdiction-scott-Sample-Library/1476616536461.png" alt="Alt text" /></p>

<p>员工表里面有8个属性：</p>

<p><code>EMPNO</code>（员工编号）、<code>ename</code>（姓名）、<code>job</code>（职称）、<code>mgr</code>（上级编号）、<code>hiredate</code>（雇佣日期）、<code>sal</code>（工资）、<code>comm</code>（奖金）、<code>deptno</code>（部门编号）。</p>

<p>里面 <code>job</code> 属性里面的英文单词翻译：</p>

<ul>
<li><strong>CLERK</strong> ：普通职员</li>
<li><strong>SALESMAN</strong> ：销售人员</li>
<li><strong>MANAGER</strong> ：经理</li>
<li><strong>ANALYST</strong> ：研究人员</li>
<li><strong>PRESIDENT</strong> ：总统</li>
</ul>


<hr />

<p>现在我们看看 <code>dept</code> 表 （<strong>部门表</strong>）：</p>

<p><img src="http://aobojaing.github.io/images/2016-10-16-SQL-Learning-017-Query-00-Introdiction-scott-Sample-Library/1476617073131.png" alt="Alt text" /></p>

<p>部门表里面有3个属性：<code>deptno</code>（部门编号）、<code>dname</code>（部门名称）、<code>loc</code>（地址）。</p>

<hr />

<p>在看看最后一个表：<code>SALGRAGE</code> 表。（这个<strong>表</strong>表示的是<strong>工资的等级</strong>表。）</p>

<p><img src="http://aobojaing.github.io/images/2016-10-16-SQL-Learning-017-Query-00-Introdiction-scott-Sample-Library/1476617149867.png" alt="Alt text" /></p>

<p><code>SALGRADE</code> 表里面有3个属性：<code>GRADE</code>（等级）、<code>LOSAL</code>（下限）、<code>HISAL</code>（上限）。</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL 数据库 学习 016 如何附加数据库]]></title>
    <link href="http://aobojaing.github.io/blog/2016/10/16/SQL-Learning-016-how-to-attach-a-database/"/>
    <updated>2016-10-16T19:06:49+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/10/16/SQL-Learning-016-how-to-attach-a-database</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>我的电脑系统：<strong>Windows  10</strong> 64位</li>
<li><strong>SQL Server</strong> 软件版本： <strong>SQL Server 2014 Express</strong></li>
</ul>


<hr />

<p><strong>scott</strong> 例子库可以在下面的链接中下载：
（百度云）</p>

<p>链接：<a href="http://pan.baidu.com/s/1sl9zbm1">http://pan.baidu.com/s/1sl9zbm1</a> 密码：<code>nyly</code></p>

<p>这个例子库可以通过 <strong>附加</strong> 的方式添加到 <strong>SQL Server</strong> 软件里面。（这个例子很经典。<strong>SQL Server</strong>软件 和 <code>Orale</code> 软件 都可以使用到这个例子库。）</p>

<h2>添加 <code>scott</code> 库 到<strong>SQL Server</strong> 软件</h2>

<p><strong>Step 1 . </strong> 鼠标右键点击 <strong>数据库</strong> -> <strong>附加(A)&hellip;</strong></p>

<p><img src="http://aobojaing.github.io/images/2016-10-16-SQL-Learning-016-how-to-attach-a-database/1476610765494.png" alt="Alt text" /></p>

<p><strong>Step 2 . </strong></p>

<p><img src="http://aobojaing.github.io/images/2016-10-16-SQL-Learning-016-how-to-attach-a-database/1476610825463.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-10-16-SQL-Learning-016-how-to-attach-a-database/1476610863975.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-10-16-SQL-Learning-016-how-to-attach-a-database/1476610918053.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-10-16-SQL-Learning-016-how-to-attach-a-database/1476610933947.png" alt="Alt text" /></p>

<blockquote><p>如果你遇到下面的问题，请访问<a href="http://www.aobosir.com/blog/2016/10/16/SQL-Solve-problem-Microsoft-SQL-Server-error-5120/">这个网站</a>解决问题。</p>

<p><img src="http://aobojaing.github.io/images/2016-10-16-SQL-Learning-016-how-to-attach-a-database/1476610946090.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-10-16-SQL-Learning-016-how-to-attach-a-database/1476612674466.png" alt="Alt text" /></p></blockquote>

<p>成功添加：</p>

<p><img src="http://aobojaing.github.io/images/2016-10-16-SQL-Learning-016-how-to-attach-a-database/1476615669199.png" alt="Alt text" /></p>

<hr />

<h2>搞定</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL 数据库 解决问题：无法打开物理文件 "XXX.mdf"。操作系统错误 5:"5(拒绝访问。)"。 (Microsoft SQL Server，错误: 5120) --- 附加数据库时出错。有关详细信息，请单击“消息”列中的超链接。]]></title>
    <link href="http://aobojaing.github.io/blog/2016/10/16/SQL-Solve-problem-Microsoft-SQL-Server-error-5120/"/>
    <updated>2016-10-16T18:52:33+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/10/16/SQL-Solve-problem-Microsoft-SQL-Server-error-5120</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>我的电脑系统：<strong>Windows  10</strong> 64位</li>
<li><strong>SQL Server</strong> 软件版本： <strong>SQL Server 2014 Express</strong></li>
</ul>


<hr />

<h2>出现的问题</h2>

<p>在你 <strong>附加</strong>  一个外部数据库到服务器上是，出现下面的错误：</p>

<p><img src="http://aobojaing.github.io/images/2016-10-16-SQL-Solve-problem-Microsoft-SQL-Server-error-5120/1476612776678.png" alt="Alt text | center" /></p>

<p><img src="http://aobojaing.github.io/images/2016-10-16-SQL-Solve-problem-Microsoft-SQL-Server-error-5120/1476612808460.png" alt="Alt text | center" /></p>

<hr />

<h2>解决办法</h2>

<ol>
<li><p>找到要附加的<code>.mdf</code>文件&mdash;&mdash;&mdash;>右键&mdash;&mdash;&mdash;>属性&mdash;&mdash;&mdash;>安全&mdash;&mdash;&mdash;>选择当前用户&mdash;&mdash;&mdash;>编辑&mdash;&mdash;&mdash;>完全控制。</p>

<ul>
<li><img src="http://aobojaing.github.io/images/2016-10-16-SQL-Solve-problem-Microsoft-SQL-Server-error-5120/1476613072444.png" alt="Alt text" /></li>
<li><img src="http://aobojaing.github.io/images/2016-10-16-SQL-Solve-problem-Microsoft-SQL-Server-error-5120/1476613183163.png" alt="Alt text" /></li>
</ul>
</li>
<li><p>对.<code>log</code>文件进行相同的处理。</p></li>
</ol>


<hr />

<h2>搞定</h2>

<hr />

<p>参考网站：</p>

<p><a href="http://blog.csdn.net/justdb/article/details/8457487">http://blog.csdn.net/justdb/article/details/8457487</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL 数据库 学习 015 开始学习查询 查询综述]]></title>
    <link href="http://aobojaing.github.io/blog/2016/10/16/SQL-Learning-015-getting-started-query-query-summary/"/>
    <updated>2016-10-16T17:28:06+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/10/16/SQL-Learning-015-getting-started-query-query-summary</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>我的电脑系统：<strong>Windows  10</strong> 64位</li>
<li><strong>SQL Server</strong> 软件版本： <strong>SQL Server 2014 Express</strong></li>
</ul>


<hr />

<p><strong>查询</strong> 是数据库里面最重要的知识点，而且知识点很多，下面我们将<strong>查询</strong>的知识点先列出来：</p>

<ol>
<li><code>scott</code> 表介绍（例子表）</li>
<li>计算列</li>
<li><code>distinct</code></li>
<li><code>between</code></li>
<li><code>in</code></li>
<li><code>top</code></li>
<li><code>null</code></li>
<li><code>order by</code></li>
<li>模糊查询</li>
<li>聚合函数</li>
<li><code>group by</code></li>
<li><code>having</code></li>
<li>链接查询

<ul>
<li>定义</li>
<li>分类

<ul>
<li>内连接</li>
<li>外连接</li>
<li>完全连接</li>
<li>交叉连接</li>
<li>字连接</li>
<li>联合</li>
</ul>
</li>
</ul>
</li>
<li>嵌套查询（<code>orale</code> 中讲）</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL 数据库 学习 014 外键的具体定义 设计外键要注意的问题]]></title>
    <link href="http://aobojaing.github.io/blog/2016/10/16/SQL-Learning-014-foreign-key-specific-definition-and-attention/"/>
    <updated>2016-10-16T17:12:56+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/10/16/SQL-Learning-014-foreign-key-specific-definition-and-attention</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>我的电脑系统：<strong>Windows  10</strong> 64位</li>
<li><strong>SQL Server</strong> 软件版本： <strong>SQL Server 2014 Express</strong></li>
</ul>


<hr />

<h2>外键的具体定义</h2>

<p>如果一个表中的若干个字段是来自另外若干个表的主键或唯一键，则这若干个字段就是外键。（我们讲<a href="http://www.aobosir.com/blog/2016/10/14/SQL-Learning-011-relationship-one-to-one-one-to-many-many-to-many/">多对多</a>的时候，一个表里面就有两个外键。）</p>

<h2>设计外键要注意的问题</h2>

<ul>
<li>外键通常是来自另外表的主键而不是唯一（<code>unique</code>）键，因为唯一键可能为<code>null</code>。</li>
<li>外键不一定是来自另外的表，也可能来自本表的主键</li>
<li>含有外键的表叫外键表，外键字段来自的那一张表叫做主键表</li>
</ul>


<hr />

<h2>问题：</h2>

<p><strong>Q：</strong> 先删除主键表还是先删除外键表？</p>

<p><strong>A：</strong> 先删除外键表，再删主键表。如果先删除主键表，会报错，因为这会导致外键表中的数据引用失效。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL 数据库 学习 013 主键的具体定义 设计主键要注意的问题]]></title>
    <link href="http://aobojaing.github.io/blog/2016/10/16/SQL-Learning-013-primary-key-specific-definition-and-attention/"/>
    <updated>2016-10-16T16:50:11+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/10/16/SQL-Learning-013-primary-key-specific-definition-and-attention</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>我的电脑系统：<strong>Windows  10</strong> 64位</li>
<li><strong>SQL Server</strong> 软件版本： <strong>SQL Server 2014 Express</strong></li>
</ul>


<hr />

<h2>主键的具体定义</h2>

<p>能够唯一标识一个事物的一个字段或者多个字段的组合，被称为主键</p>

<hr />

<h2>设计主键要注意的问题</h2>

<ul>
<li>含有主键的表叫做主键表</li>
<li>主键通常都是整数，不建议使用字符串为主键。（如果主键是用于集群式服务（指跨数据库服务，比如：跨行转账），才可以考虑用字符串当主键。）</li>
<li>主键的值通常都不允许 修改，除非本记录被删除</li>
<li>主键不要定义成<code>id</code>，而要定义成<code>表名id</code> 或者 <code>表名_id</code></li>
<li>要用代理主键，不要用业务主键

<ul>
<li>任何一张表，强烈建议不要使用业务含义的字段充当主键，我们通常都是在表中单独添加一个整型的编号充当主键字段。</li>
</ul>
</li>
</ul>


<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL 数据库 学习 012 数据库关系图]]></title>
    <link href="http://aobojaing.github.io/blog/2016/10/16/SQL-Learning-012-database-diagram/"/>
    <updated>2016-10-16T15:47:58+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/10/16/SQL-Learning-012-database-diagram</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>我的电脑系统：<strong>Windows  10</strong> 64位</li>
<li><strong>SQL Server</strong> 软件版本： <strong>SQL Server 2014 Express</strong></li>
</ul>


<hr />

<p>我们现在写一个 多对多关系的表：（这段代码你可以在<a href="http://www.aobosir.com/blog/2016/10/14/SQL-Learning-011-relationship-one-to-one-one-to-many-many-to-many/">这篇博文</a>里面看到它的代码解释。）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="c1">--班级表</span>
</span><span class='line'><span class="k">create</span> <span class="k">table</span> <span class="n">banji</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>  <span class="n">banji_id</span> <span class="nb">int</span> <span class="k">primary</span> <span class="k">key</span><span class="p">,</span>
</span><span class='line'>  <span class="n">banji_num</span> <span class="nb">int</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>  <span class="n">banji_name</span> <span class="n">nvarchar</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--教师</span>
</span><span class='line'><span class="k">create</span> <span class="k">table</span> <span class="n">jiaoshi</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>  <span class="n">jiaoshi_id</span> <span class="nb">int</span> <span class="k">primary</span> <span class="k">key</span><span class="p">,</span>
</span><span class='line'>  <span class="n">jiaoshi_name</span> <span class="n">nvarchar</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--第三张表：用来模拟班级和教师的关系</span>
</span><span class='line'><span class="k">create</span> <span class="k">table</span> <span class="n">banji_jiaoshi_mapping</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>  <span class="n">banji_id</span> <span class="nb">int</span> <span class="k">constraint</span> <span class="n">fk_banji_id</span> <span class="k">foreign</span> <span class="k">key</span> <span class="k">references</span> <span class="n">banji</span><span class="p">(</span><span class="n">bianji_id</span><span class="p">),</span>
</span><span class='line'>  <span class="n">jiaoshi_id</span> <span class="nb">int</span> <span class="k">foreign</span> <span class="k">key</span> <span class="k">references</span> <span class="n">jiaoshi</span><span class="p">(</span><span class="n">jiaoshi_id</span><span class="p">),</span>
</span><span class='line'>  <span class="n">kecheng</span> <span class="n">nvarchar</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span>
</span><span class='line'>  <span class="k">constraint</span> <span class="n">pk_banji_id_jiaoshi_id</span> <span class="k">primary</span> <span class="k">key</span> <span class="p">(</span><span class="n">banji_id</span><span class="p">,</span> <span class="n">jiaoshi_id</span><span class="p">,</span> <span class="n">kecheng</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>虽然，现在我们已经将表与表之间的关系都建好了。但是我现在怎么才能知道他们之间的关系到底有没有见好啊。
<strong>SQL Server</strong> 为我们提供了另外一个工具：<strong>数据库关系图</strong>。</p>

<p>我们新建一个：</p>

<p><img src="http://aobojaing.github.io/images/2016-10-16-SQL-Learning-012-database-diagram/1476602645224.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-10-16-SQL-Learning-012-database-diagram/1476602656133.png" alt="Alt text" /></p>

<p>外键添加到多的一方。</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL 数据库 学习 011 关系、一对一、一对多、多对多]]></title>
    <link href="http://aobojaing.github.io/blog/2016/10/14/SQL-Learning-011-relationship-one-to-one-one-to-many-many-to-many/"/>
    <updated>2016-10-14T21:18:48+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/10/14/SQL-Learning-011-relationship-one-to-one-one-to-many-many-to-many</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>我的电脑系统：<strong>Windows  10</strong> 64位</li>
<li><strong>SQL Server</strong> 软件版本： <strong>SQL Server 2014 Express</strong></li>
</ul>


<hr />

<h2>什么是关系</h2>

<p>定义：</p>

<ul>
<li>表和表之间的联系。</li>
</ul>


<p>实现方式：</p>

<ul>
<li>通过设置不同形式的外键来体现表和表的不同关系。</li>
</ul>


<h2>关系的分类（假设是A表和B表）</h2>

<h2>第一种分类： 一对一  （详述一对一关系及其实现）</h2>

<p> （一对一，几乎不使用。所以，我们就一句话带过。）</p>

<p>一对一的实现：既可以把表A的主键充当表B的外键，也可以把表B的主键充当表A的外键。</p>

<p>一对多 和 多对多 才是我们学习的重点。</p>

<h2>第二种分类：一对多   （详述一对多关系及其实现）</h2>

<p>一对多事怎么实现的？</p>

<p>表A（一）与表B（多）（我们现在希望，表A中的一条记录对应表B中的多条记录）之间要是有关系，就必须要有外键。把表A的主键添加到表B里面，充当表B的外键。</p>

<p>一对多的实现：在多的一方的表里面，添加外键。</p>

<h2>第三种分类：多对多 （详述多对多关系及其实现）</h2>

<p>现实中，什么事物和什么事物之间是多对多的关系？</p>

<p>班级和老师的关系。（一个班级有很多老师上课，一个老师可以去很多班级上课。）</p>

<p>多对多其实就是：一对多 和 多对一 的一个组合。</p>

<p>多对多的实现：多对多 必须要通过单独的一张表来表示。</p>

<ul>
<li>班级是一张表</li>
<li>教师是一张表</li>
<li>班级和教师的关系也是一张表</li>
</ul>


<p>用一个实例来解释 多对多。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="c1">--班级表</span>
</span><span class='line'><span class="k">create</span> <span class="k">table</span> <span class="n">banji</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>  <span class="n">banji_id</span> <span class="nb">int</span> <span class="k">primary</span> <span class="k">key</span><span class="p">,</span>
</span><span class='line'>  <span class="n">banji_num</span> <span class="nb">int</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>  <span class="n">banji_name</span> <span class="n">nvarchar</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--教师</span>
</span><span class='line'><span class="k">create</span> <span class="k">table</span> <span class="n">jiaoshi</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>  <span class="n">jiaoshi_id</span> <span class="nb">int</span> <span class="k">primary</span> <span class="k">key</span><span class="p">,</span>
</span><span class='line'>  <span class="n">jiaoshi_name</span> <span class="n">nvarchar</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--第三张表：用来模拟班级和教师的关系</span>
</span><span class='line'><span class="k">create</span> <span class="k">table</span> <span class="n">banji_jiaoshi_mapping</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>  <span class="n">banji_id</span> <span class="nb">int</span> <span class="k">constraint</span> <span class="n">fk_banji_id</span> <span class="k">foreign</span> <span class="k">key</span> <span class="k">references</span> <span class="n">banji</span><span class="p">(</span><span class="n">bianji_id</span><span class="p">),</span>
</span><span class='line'>  <span class="n">jiaoshi_id</span> <span class="nb">int</span> <span class="k">foreign</span> <span class="k">key</span> <span class="k">references</span> <span class="n">jiaoshi</span><span class="p">(</span><span class="n">jiaoshi_id</span><span class="p">),</span>
</span><span class='line'>  <span class="n">kecheng</span> <span class="n">nvarchar</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span>
</span><span class='line'>  <span class="k">constraint</span> <span class="n">pk_banji_id_jiaoshi_id</span> <span class="k">primary</span> <span class="k">key</span> <span class="p">(</span><span class="n">banji_id</span><span class="p">,</span> <span class="n">jiaoshi_id</span><span class="p">,</span> <span class="n">kecheng</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>解释代码：</p>

<p>其中<code>banji_id int constraint fk_banji_id foreign key references banji(bianji_id),</code> 代码中的 <code>fk_banji_id</code> 是约束的名字，<code>foreign key references banji(bianji_id)</code> 指的是：当前这个表里面的 <code>banji_id</code> 属性是来自 <code>banji</code> 表的主键 <code>banji_id</code>，也就是说：当前表中的 <code>banji_id</code> 是一个外键（<code>foreign key</code>）。</p>

<p>其中<code>jiaoshi_id int foreign key references jiaoshi(jiaoshi_id),</code>里面，这里没有命名约束的名字，约束的名字可以省略不写，所以这里没有写也没有问题。同理上面那句代码。</p>

<p>其中<code>constraint pk_banji_id_jiaoshi_id primary key (banji_id, jiaoshi_id, kecheng)</code>中的 <code>pk_banji_id_jiaoshi_id</code> 这个是约束的名字。<code>primary key (banji_id, jiaoshi_id, kecheng)</code> 是设置<code>jiaoshi_id</code> 和 <code>banji_id</code>  和 <code>kecheng</code> 三个属性的组合是一个<strong>主键</strong>（<code>primary key</code>）。</p>

<p>现在<strong>执行</strong>，生成了3个表。</p>

<p>现在我们在这3个表里面插入数据。</p>

<p><strong>banji</strong></p>

<p><img src="http://aobojaing.github.io/images/2016-10-14-SQL-Learning-011-relationship-one-to-one-one-to-many-many-to-many/1476450660605.png" alt="Alt text" /></p>

<p><strong>jiaoshi</strong></p>

<p><img src="http://aobojaing.github.io/images/2016-10-14-SQL-Learning-011-relationship-one-to-one-one-to-many-many-to-many/1476450683275.png" alt="Alt text" /></p>

<p><strong>banji_jiaoshi_mapping</strong></p>

<p><img src="http://aobojaing.github.io/images/2016-10-14-SQL-Learning-011-relationship-one-to-one-one-to-many-many-to-many/1476450197120.png" alt="Alt text" /></p>

<p>都不会有错误，说明多对多生成成功。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EDA Learning 001 （Windows系统 软件安装） Quartus II 9.0正式版下载、安装、破解详细图解]]></title>
    <link href="http://aobojaing.github.io/blog/2016/10/14/EDA-Learning-001-QuartusII-90-software-download-install-crack/"/>
    <updated>2016-10-14T11:33:46+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/10/14/EDA-Learning-001-QuartusII-90-software-download-install-crack</id>
    <content type="html"><![CDATA[<hr />

<p>一共三步：下载、安装、破解。</p>

<h2>一 . 下载</h2>

<p><a href="ftp://ftp.altera.com/outgoing/release/">Quartus II 9.0正式版</a>。下载地址：<a href="ftp://ftp.altera.com/outgoing/release/90_quartus_windows.exe">ftp://ftp.altera.com/outgoing/release/90_quartus_windows.exe</a></p>

<blockquote><p>Quartus II 是Altera公司的综合性PLD/FPGA开发软件，原理图、VHDL、VerilogHDL以及AHDL（Altera Hardware 支持Description Language）等多种设计输入形式，内嵌自有的综合器以及仿真器，可以完成从设计输入到硬件配置的完整PLD设计流程。</p></blockquote>

<p><a href="http://download.csdn.net/detail/snzigod/3773166">Quartus_II_9.0_SP2破解器.exe、Quartus_II_9.0破解器.exe、Quartus_II_9.1破解器.exe</a></p>

<p>当你下载<strong>破解器</strong>软件的时候，电脑会判断这个文件是病毒，电脑会自动删除这个文件，导致你无法下载这个文件。
解决办法就是将杀毒软件和电脑自带的杀毒软件关闭，即可。</p>

<p><strong>Windows 10</strong> 关闭自动杀毒：</p>

<p><img src="http://aobojaing.github.io/images/2016-10-14-EDA-Learning-001-QuartusII-90-software-download-install-crack/1474283996339.png" alt="Alt text" /></p>

<p>关闭下面这一项：</p>

<p><img src="http://aobojaing.github.io/images/2016-10-14-EDA-Learning-001-QuartusII-90-software-download-install-crack/1474284016890.png" alt="Alt text" /></p>

<h2>二 . 安装</h2>

<p>双击运行，先是解压：</p>

<p><img src="http://aobojaing.github.io/images/2016-10-14-EDA-Learning-001-QuartusII-90-software-download-install-crack/1474278644162.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-10-14-EDA-Learning-001-QuartusII-90-software-download-install-crack/1474278728866.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-10-14-EDA-Learning-001-QuartusII-90-software-download-install-crack/1474278737223.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-10-14-EDA-Learning-001-QuartusII-90-software-download-install-crack/1474278765103.png" alt="Alt text" /></p>

<p>安装到默认路径就可以：</p>

<p><img src="http://aobojaing.github.io/images/2016-10-14-EDA-Learning-001-QuartusII-90-software-download-install-crack/1474278784253.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-10-14-EDA-Learning-001-QuartusII-90-software-download-install-crack/1474278793439.png" alt="Alt text" /></p>

<p>安装：</p>

<p><img src="http://aobojaing.github.io/images/2016-10-14-EDA-Learning-001-QuartusII-90-software-download-install-crack/1474278803589.png" alt="Alt text" /></p>

<p>确定信息：</p>

<p><img src="http://aobojaing.github.io/images/2016-10-14-EDA-Learning-001-QuartusII-90-software-download-install-crack/1474278816638.png" alt="Alt text" /></p>

<p>正在安装：</p>

<p><img src="http://aobojaing.github.io/images/2016-10-14-EDA-Learning-001-QuartusII-90-software-download-install-crack/1474278841380.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-10-14-EDA-Learning-001-QuartusII-90-software-download-install-crack/1474279490381.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-10-14-EDA-Learning-001-QuartusII-90-software-download-install-crack/1474279506171.png" alt="Alt text" /></p>

<p>完成：</p>

<p><img src="http://aobojaing.github.io/images/2016-10-14-EDA-Learning-001-QuartusII-90-software-download-install-crack/1474279510464.png" alt="Alt text" /></p>

<p>让其自动关闭。</p>

<h2>三 . 破解</h2>

<p>双击启动：<strong>Quartus_II_9.0破解器.exe</strong> 。点击 <strong>应用补丁</strong></p>

<p><img src="http://aobojaing.github.io/images/2016-10-14-EDA-Learning-001-QuartusII-90-software-download-install-crack/1474280706147.png" alt="Alt text" /></p>

<p>点击 <strong>是</strong></p>

<p><img src="http://aobojaing.github.io/images/2016-10-14-EDA-Learning-001-QuartusII-90-software-download-install-crack/1474280762103.png" alt="Alt text" /></p>

<blockquote><p>如果直接把该破解器Copy到C:\altera\90\quartus\bin下，就不会出现这个对话框，而是直接开始破解！</p></blockquote>

<p><img src="http://aobojaing.github.io/images/2016-10-14-EDA-Learning-001-QuartusII-90-software-download-install-crack/1474280847144.png" alt="Alt text" /></p>

<p>破解后，生成一个 <code>license.DAT</code> 文件，保存它（license文件存放的路径名称不能包含汉字和空格，空格可以用下划线代替。）</p>

<p><img src="http://aobojaing.github.io/images/2016-10-14-EDA-Learning-001-QuartusII-90-software-download-install-crack/1474280894953.png" alt="Alt text" /></p>

<p>搞定： 点击 <strong>退出</strong> 即可。</p>

<p><img src="http://aobojaing.github.io/images/2016-10-14-EDA-Learning-001-QuartusII-90-software-download-install-crack/1474280939390.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-10-14-EDA-Learning-001-QuartusII-90-software-download-install-crack/1474281007873.png" alt="Alt text" /></p>

<p>记事本打开它：</p>

<p><img src="http://aobojaing.github.io/images/2016-10-14-EDA-Learning-001-QuartusII-90-software-download-install-crack/1474281188304.png" alt="Alt text" /></p>

<p>查看电脑的 <strong>IP</strong> 地址。在 <strong>DOS</strong> 窗口中执行  <code>ipconfig  /all</code>  命令：</p>

<p><img src="http://aobojaing.github.io/images/2016-10-14-EDA-Learning-001-QuartusII-90-software-download-install-crack/1474282104125.png" alt="Alt text" /></p>

<p>把 <strong>license.dat</strong> 里的两个XXXXXXXXXXXX 用您的物理地址替换。保存文件。</p>

<p><img src="http://aobojaing.github.io/images/2016-10-14-EDA-Learning-001-QuartusII-90-software-download-install-crack/1474282227305.png" alt="Alt text" /></p>

<hr />

<h2>破解完成。</h2>

<h2>四 . 启动 软件</h2>

<p>一共安装了两个 <strong>Quartus II</strong> 软件，一个32位的 一个是64位的。我们只能破解32位的，64位的那个就不要使用了。</p>

<p>双击 运行 32位的这个 <strong>Quartus II</strong> 软件：</p>

<p><img src="http://aobojaing.github.io/images/2016-10-14-EDA-Learning-001-QuartusII-90-software-download-install-crack/1474283601830.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-10-14-EDA-Learning-001-QuartusII-90-software-download-install-crack/1474282695283.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-10-14-EDA-Learning-001-QuartusII-90-software-download-install-crack/1474282962497.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-10-14-EDA-Learning-001-QuartusII-90-software-download-install-crack/1474282992516.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-10-14-EDA-Learning-001-QuartusII-90-software-download-install-crack/1474283003725.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-10-14-EDA-Learning-001-QuartusII-90-software-download-install-crack/1474283024488.png" alt="Alt text" /></p>

<h1>大功告成</h1>

<p><img src="http://aobojaing.github.io/images/2016-10-14-EDA-Learning-001-QuartusII-90-software-download-install-crack/1474283051006.png" alt="Alt text" /></p>

<h1>Over</h1>

<p>为了防止不合格的破解流行，影响客户的正常使用，我们在启动画面中加入了“Altera中国区代理――骏龙科技有限公司”的防伪字样，客户启动时可以看到这行汉字。</p>

<p>重新启动软件，你只要看到下面的启动画面，那么久说明破解已经成功的。</p>

<p><img src="http://aobojaing.github.io/images/2016-10-14-EDA-Learning-001-QuartusII-90-software-download-install-crack/1474283525105.png" alt="Alt text" /></p>

<p>只不过，每次启动的时候，都会出现这么这个窗口，没有关系，你只需要选择第3个选项：</p>

<p><img src="http://aobojaing.github.io/images/2016-10-14-EDA-Learning-001-QuartusII-90-software-download-install-crack/1474283718224.png" alt="Alt text" /></p>

<p>在点击 <strong>OK</strong>，就可以：</p>

<p><img src="http://aobojaing.github.io/images/2016-10-14-EDA-Learning-001-QuartusII-90-software-download-install-crack/1474283758095.png" alt="Alt text" /></p>

<h1>Over</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL 数据库 学习 010 表和约束的区别、check约束、default约束、unique约束、not Null约束]]></title>
    <link href="http://aobojaing.github.io/blog/2016/10/13/SQL-Learning-010-differences-tables-contraints-check-default-unique-not-null/"/>
    <updated>2016-10-13T12:40:11+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/10/13/SQL-Learning-010-differences-tables-contraints-check-default-unique-not-null</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>我的电脑系统：<strong>Windows  10</strong> 64位</li>
<li><strong>SQL Server</strong> 软件版本： <strong>SQL Server 2014 Express</strong></li>
</ul>


<hr />

<h2>表和约束的区别</h2>

<ul>
<li>数据库是通过表来解决事物的存储问题的。</li>
<li>数据库是用过约束来解决事物取值的有效性和合法性的问题。</li>
<li>建表的过程就是指定事物属性及其事物属性各种约束的过程。</li>
</ul>


<hr />

<h2>check 约束</h2>

<p>意义：保证事物属性的取值在合法的范围之内。</p>

<p>我们先创建一个表：（建表之前，先确保选中了指定的库）</p>

<p><img src="http://aobojaing.github.io/images/2016-10-13-SQL-Learning-010-differences-tables-contraints-check-default-unique-not-null/1476251551513.png" alt="Alt text" /></p>

<p>点击 <strong>新建查询</strong> 按钮。输入下面的指令来新建一个带有<code>check</code> 约束的学生表：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">create</span> <span class="k">table</span> <span class="n">student</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>  <span class="n">stu_id</span> <span class="nb">int</span> <span class="k">primary</span> <span class="k">key</span><span class="p">,</span>
</span><span class='line'>  <span class="n">stu_sal</span> <span class="nb">int</span> <span class="k">check</span> <span class="p">(</span><span class="n">stu_sal</span><span class="o">&gt;=</span><span class="mi">1000</span> <span class="k">and</span> <span class="n">stu_sal</span><span class="o">&lt;=</span><span class="mi">8000</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在，选中，然后点击执行。</p>

<p>现在刷新右侧栏<code>test</code>库的 <strong>表</strong> ，就可以看到刚刚建的学生表：</p>

<p><img src="http://aobojaing.github.io/images/2016-10-13-SQL-Learning-010-differences-tables-contraints-check-default-unique-not-null/1476251700453.png" alt="Alt text" /></p>

<p>接下来是，向这个表里面插数据：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">insert</span> <span class="k">into</span> <span class="n">student</span> <span class="k">values</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'><span class="k">insert</span> <span class="k">into</span> <span class="n">student</span> <span class="k">values</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">10000</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>这就是所谓的第4代语言。全都是命令，你不需要知道它里面是如何实现的。这就是第4代编程语言。</p></blockquote>

<p>现在<code>student(2)</code> 的工资已经超出了约束。如果你现在选中这两行命令。点击 <strong>执行</strong>，就会出现错误。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="err">消息</span> <span class="mi">547</span><span class="err">，级别</span> <span class="mi">16</span><span class="err">，状态</span> <span class="mi">0</span><span class="err">，第</span> <span class="mi">8</span> <span class="err">行</span>
</span><span class='line'><span class="k">INSERT</span> <span class="err">语句与</span> <span class="k">CHECK</span> <span class="err">约束</span><span class="ss">&quot;CK__student__stu_sal__1A14E395&quot;</span><span class="err">冲突。该冲突发生于数据库</span><span class="ss">&quot;test&quot;</span><span class="err">，表</span><span class="ss">&quot;dbo.student&quot;</span><span class="p">,</span> <span class="k">column</span> <span class="s1">&#39;stu_sal&#39;</span><span class="err">。</span>
</span><span class='line'><span class="err">语句已终止。</span>
</span></code></pre></td></tr></table></div></figure>


<p>这就是 <code>check</code> 约束。</p>

<hr />

<h2>default约束</h2>

<p>意义：保证事物的属性一定会有一个值。</p>

<p>我们还是写 学生表。我们先把上面新建的学生表先删除掉。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">create</span> <span class="k">table</span> <span class="n">student</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>  <span class="n">stu_id</span> <span class="nb">int</span> <span class="k">primary</span> <span class="k">key</span><span class="p">,</span>
</span><span class='line'>  <span class="n">stu_sal</span> <span class="nb">int</span> <span class="k">check</span> <span class="p">(</span><span class="n">stu_sal</span><span class="o">&gt;=</span><span class="mi">1000</span> <span class="k">and</span> <span class="n">stu_sal</span><span class="o">&lt;=</span><span class="mi">8000</span><span class="p">),</span>
</span><span class='line'>  <span class="n">stu_sex</span> <span class="k">nchar</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">default</span> <span class="p">(</span><span class="s1">&#39;男&#39;</span><span class="p">)</span> <span class="c1">--()可以省略。在数据库中字符串是必须用&#39;&#39;括起来的</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里简单的解释一下：<code>''</code> 和 <code>""</code> 在数据库里面有什么区别？</p>

<p><strong>A：</strong> <code>''</code> 就是表示一个字符串；<code>""</code> 就是表示一个数据的名字。（比如：为某一个事物去一个名字，用<code>""</code>。表的名字、约束的名字、列的名字、计算列的名字、临时表的名字。总之，只要是为一个事物取一个名字，就是：<code>""</code>。）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">insert</span> <span class="k">into</span> <span class="n">student</span><span class="p">(</span><span class="n">stu_id</span><span class="p">,</span> <span class="n">stu_sal</span><span class="p">)</span> <span class="k">values</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'><span class="k">insert</span> <span class="k">into</span> <span class="n">student</span> <span class="k">values</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">6000</span><span class="p">,</span> <span class="s1">&#39;女&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>选中这两行，点击 <strong>执行</strong> 按钮。</p>

<p><img src="http://aobojaing.github.io/images/2016-10-13-SQL-Learning-010-differences-tables-contraints-check-default-unique-not-null/1476254095140.png" alt="Alt text" /></p>

<blockquote><p><code>insert into student values (3, 2000)</code> 这样的命令是会报错的。因为表里面有3列值，你只输入了2列的数据。所以如果你想要让 <code>stu_sex</code> 使用默认值，必须要要这样写：<code>insert into student(stu_id, stu_sal) values (1, 1000)</code>，指定你赋值的两列。</p></blockquote>

<hr />

<h2>unique（唯一）约束</h2>

<p>意义：它保证了事物的属性的取值不允许重复，但是允许为空。</p>

<p>它都唯一了，那它和主键还有什么区别啊？</p>

<p><code>unique（唯一）约束</code> 和 <code>允许为空</code> 是可以组合使用的。而 <code>主键</code> 和 <code>允许为空</code> 是不能组合使用的。</p>

<p>（<strong>不允许为空</strong>（<code>not null</code>）都可以和<code>unique（唯一）约束</code>、 <code>主键</code>  组合使用。）</p>

<p> 表里的项，如果不设置为 <code>not null</code> ，默认是：<strong>允许为空</strong> 的。</p>

<p>创建表：学生表2</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">create</span> <span class="k">table</span> <span class="n">student2</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>  <span class="n">stu_id</span> <span class="nb">int</span> <span class="k">primary</span> <span class="k">key</span><span class="p">,</span>
</span><span class='line'>  <span class="n">stu_sal</span> <span class="nb">int</span> <span class="k">check</span> <span class="p">(</span><span class="n">stu_sal</span><span class="o">&gt;=</span><span class="mi">1000</span> <span class="k">and</span> <span class="n">stu_sal</span><span class="o">&lt;=</span><span class="mi">8000</span><span class="p">),</span>
</span><span class='line'>  <span class="n">stu_sex</span> <span class="k">nchar</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">default</span> <span class="p">(</span><span class="s1">&#39;男&#39;</span><span class="p">),</span> <span class="c1">--()可以省略。在数据库中字符串是必须用&#39;&#39;括起来的</span>
</span><span class='line'>  <span class="n">stu_name</span> <span class="n">nvarchar</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span> <span class="k">unique</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们执行下面的指令就会出错。因为 <code>stu_name</code> 项是有唯一约束的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">insert</span> <span class="k">into</span> <span class="n">student2</span> <span class="n">vaules</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2000</span><span class="p">,</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span> <span class="s1">&#39;张三&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">insert</span> <span class="k">into</span> <span class="n">student2</span> <span class="n">vaules</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4000</span><span class="p">,</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span> <span class="s1">&#39;张三&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们执行下面的命令不会出错：（因为：<code>unique（唯一）约束</code> 和 <code>允许为空</code> 是可以组合使用的。）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">insert</span> <span class="k">into</span> <span class="n">student2</span> <span class="k">values</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6000</span><span class="p">,</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span> <span class="k">null</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果我们执行下面的指令，就会出错：（因为，主键是不允许为空的。）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">insert</span> <span class="k">into</span> <span class="n">student2</span> <span class="k">values</span> <span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="mi">6000</span><span class="p">,</span> <span class="s1">&#39;女&#39;</span><span class="p">,</span> <span class="s1">&#39;王麻子&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果现在再插入一个为空的元组，就会出错：（错误时：重复）</p>

<p>（唯一约束不允许重复，但唯一约束允许为空，但是只允许其中有一列为空。）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">insert</span> <span class="k">into</span> <span class="n">student2</span> <span class="k">values</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">6000</span><span class="p">,</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span> <span class="k">null</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p><strong>Q：</strong> <code>unique（唯一）约束</code> 是否 允许多列为 <code>空</code>?</p>

<p><strong>A：</strong>
在 <strong>SQL Server</strong> 软件只允许一个 <code>unique</code> 列为空；
<code>Oracle</code> 允许多个 <code>unique</code> 列为空。</p>

<hr />

<h2>如何合理的利用主键和唯一约束建表</h2>

<p>一个比较重要的问题：
<strong>Q：</strong> 唯一约束 和 主键 有什么区别？如何辨别？如何合理的利用主键和唯一约束建表？</p>

<p><strong>A：</strong></p>

<p>我们上网的时候，经常要登录，有些网站使用用户名，有的还可以使用邮箱登录。邮箱或者用户名，是唯一的。但不能使用它来当主键，我们不能使用业务信息当主键，因为用户名和邮箱是可以修改的。主键永远不可以修改。因为主键不但是本表的主键，而可能是其他表的外键，如果主键改变了，那么其他表的外键也要修改。所以，这个唯一键和主键的第一个区别。</p>

<p>第二区别，主键一遍最好使用数字，不要使用字符串。使用数字为主键，查新速度非常快，相比使用字符串。所以不能使用有实际意义的字符串当主键。再说一次：不要使用业务逻辑（虽然它也是不允许重复的，比如用户名和邮箱）当主键，要使用没有实际意义的编号当主键。（如果数据量太大，可能主键里面还需要加一下字母。）</p>

<p>主键最好不直接录入，我们最好使用 <code>identity</code> 关键字，让其自动增长，自动生成主键。（不使用业务逻辑当主键，使用代理主键（就是编号）当主键）</p>

<hr />

<h2>什么是<code>not null</code> 约束 以及 其 <code>not null</code> 约束与 <code>default</code> 约束的异同</h2>

<p>我认为 <code>not null</code>  就是一个约束。它要求用户必须得为该属性赋一个值，否则语法出错！</p>

<p>如果一个字段不写<code>null</code> ，也不写 <code>not null</code> ，则默认是  <code>null</code> ，即默认允许为空，用户可以不给该字段赋值。</p>

<p>如果用户没有为该字段赋值，则该字段的值默认是 <code>null</code>。</p>

<p>要注意 <code>nul</code> 和 <code>default</code> 的区别。</p>

<ul>
<li>相同点：都允许用户不赋值</li>
<li>不同点：<code>null</code> 修饰的字段如果用户不赋值则默认是<code>null</code>；<code>default</code> 修饰的字段如果用户不赋值则默认是<code>default</code> 指定的那个值。</li>
</ul>


<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 搭建静态博客站点 --- 为站点侧边栏添加分类列表（Categories）]]></title>
    <link href="http://aobojaing.github.io/blog/2016/10/12/octopress-build-static-blog-site-add-categories-list-for-site-sidebar/"/>
    <updated>2016-10-12T16:15:13+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/10/12/octopress-build-static-blog-site-add-categories-list-for-site-sidebar</id>
    <content type="html"><![CDATA[<hr />

<p>一共三步，很简单。跟着走就可以。</p>

<hr />

<p><strong>Step 1 . </strong>  增加 <code>category_list</code> 插件</p>

<p>在 <code>octopress\plugins\</code> 文件夹里面，新建一个文件，取名为：<code>category_list_tag.rb</code>。并将下面的代码粘贴到里面。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>module Jekyll
</span><span class='line'>  class CategoryListTag &lt; Liquid::Tag
</span><span class='line'>    def render(context)
</span><span class='line'>      html = ""
</span><span class='line'>      categories = context.registers[:site].categories.keys
</span><span class='line'>      categories.sort.each do |category|
</span><span class='line'>        posts_in_category = context.registers[:site].categories[category].size
</span><span class='line'>        category_dir = context.registers[:site].config['category_dir']
</span><span class='line'>        category_url = File.join(category_dir, category.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').downcase)
</span><span class='line'>        html &lt;&lt; "&lt;li class='category'&gt;&lt;a href='http://aobojaing.github.io/#{category_url}/'&gt;#{category} (#{posts_in_category})&lt;/a&gt;&lt;/li&gt;\n"
</span><span class='line'>      end
</span><span class='line'>      html
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>Liquid::Template.register_tag('category_list', Jekyll::CategoryListTag)</span></code></pre></td></tr></table></div></figure>


<p>这个插件会向<code>liquid</code>注册一个名为<code>category_list</code>的<code>tag</code>，该<code>tag</code>就是以<code>li</code>的形式将站点所有的<code>category</code>组织起来。如果要将<code>category</code>加入到侧边导航栏，需要增加一个<code>aside</code>。</p>

<hr />

<p><strong>Step 2 . </strong> 增加 <code>aside</code></p>

<p>在 <code>octopress\source\_includes\asides\</code> 文件夹里面，新建一个文件，取名为：<code>category_list.html</code> 。并粘贴下面的代码：</p>

<p><strong>注意：</strong> 去掉 <code>%</code> 前面的 <code>\</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;section&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h1&gt;</span>Categories<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;categories&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      {\% category_list \%}
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p><strong>Step 3 . </strong> 在 <code>_config.yml</code> 文件里面 ，修改 <code>default_asides</code> 项</p>

<p>打开 <code>octopress\_config.yml</code> 文件，修改里面的 <code>default_asides</code> 项，将 <code>asides/category_list.html</code> 添加进去。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>default_asides: [asides/category_list.html, ......]
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>搞定</h2>

<p>现在，我们执行 <code>rake generate</code> 命令来生成最新的博客站点。然后执行 <code>rake preview</code> 命令在本地预览博客站点。 看看修改后的效果。</p>

<p><img src="http://aobojaing.github.io/images/2016-10-12-octopress-build-static-blog-site-add-categories-list-for-site-sidebar/1476259852727.png" alt="Alt text" /></p>

<hr />

<hr />

<p>参考网站：</p>

<p>为octopress添加分类(category)列表
<a href="http://codemacro.com/2012/07/18/add-category-list-to-octopress/">http://codemacro.com/2012/07/18/add-category-list-to-octopress/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL 数据库 学习 009 通过SQL命令 建表 和 主外键约束]]></title>
    <link href="http://aobojaing.github.io/blog/2016/10/12/SQL-Learning-009-build-table-and-primary-key-foreign-key-constraints-through-command/"/>
    <updated>2016-10-12T11:15:01+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/10/12/SQL-Learning-009-build-table-and-primary-key-foreign-key-constraints-through-command</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>我的电脑系统：<strong>Windows  10</strong> 64位</li>
<li><strong>SQL Server</strong> 软件版本： <strong>SQL Server 2014 Express</strong></li>
</ul>


<hr />

<p>之前，我们介绍了<a href="http://www.aobosir.com/blog/2016/10/11/SQL-Learning-008-build-tables-and-primary-foreign-key-constraints-with-GUI/">如何使用图形化操作建表和主外键约束</a>。这一节我们来介绍如何使用<strong>命令</strong>来<strong>建表和主外键约束</strong>。</p>

<hr />

<h2>使用命令 建表</h2>

<p><strong>Step 0 . </strong> 先把之前在<a href="http://www.aobosir.com/blog/2016/10/11/SQL-Learning-008-build-tables-and-primary-foreign-key-constraints-with-GUI/">这篇博客</a>里面建的表删除，我们先使用命令重新建。（如果你没有看这篇博客，就不需要做这一步的操作了。）</p>

<p><strong>Step 1 . </strong> 先选中（要建表的）库，然后点击 <strong>新建查询</strong>，输入下面的命令：（先建部门（<code>dept</code>）表，再建员工（<code>emp</code>）表）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">create</span> <span class="k">table</span> <span class="n">dept</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>  <span class="n">dept_id</span> <span class="nb">int</span> <span class="k">primary</span> <span class="k">key</span><span class="p">,</span>
</span><span class='line'>  <span class="n">dept_name</span> <span class="n">nvarchar</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>  <span class="n">dept_address</span> <span class="n">nvarchar</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Step 2 . </strong> 现在点击 对号 图标（分析），看看有没有语法错误。然后点击 <strong>执行(X)</strong> 按钮，来生成表。现在在做出的 <strong>表</strong> 里面右键 ，选择 <strong>刷新</strong> 。现在你就看到了，创建了一个新的表 <code>dept</code> 。</p>

<p><img src="http://aobojaing.github.io/images/2016-10-12-SQL-Learning-009-build-table-and-primary-key-foreign-key-constraints-through-command/1476239675315.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-10-12-SQL-Learning-009-build-table-and-primary-key-foreign-key-constraints-through-command/1476239692934.png" alt="Alt text" /></p>

<p>解释：<code>--</code>后面跟注释信息。<strong>SQL</strong> 定义变量和 <strong>C++</strong> 定义变量是反着的。</p>

<p><strong>Step 3 . </strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">create</span> <span class="k">table</span> <span class="n">emp</span>
</span><span class='line'><span class="p">(</span> <span class="c1">--不能写成{} ，C++才写成}</span>
</span><span class='line'>  <span class="n">emp_id</span> <span class="nb">int</span> <span class="k">constraint</span> <span class="n">pk_emp_id_haha</span> <span class="k">primary</span> <span class="k">key</span><span class="p">,</span>
</span><span class='line'>  <span class="n">emp_name</span> <span class="n">nvarchar</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>  <span class="n">emp_sex</span> <span class="k">nchar</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span>
</span><span class='line'>  <span class="n">dept_id</span> <span class="nb">int</span> <span class="k">constraint</span> <span class="n">fk_dept_id_heihei</span> <span class="k">foreign</span> <span class="k">key</span> <span class="k">references</span> <span class="n">dept</span><span class="p">(</span><span class="n">dept_id</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>解释：
1. 对于<strong>约束</strong>（<code>constraint</code>），要写一个名字（<code>pk_emp_id_haha</code> 和 <code>fk_dept_id_heihei</code> 都是自定义的名字），如果你不写名字，系统会自动给它分配一个名字。
2. <code>primary key</code> 是主键； <code>foreign key</code> 是外键。
3. <code>create table</code> 最后一个字段的后面建议不要写 <code>,</code> （逗号）。</p>

<p>选中这些命令。点击 <code>执行</code> 按钮。并刷新 <strong>表</strong>，<code>emp</code> 表就会出现。</p>

<p><img src="http://aobojaing.github.io/images/2016-10-12-SQL-Learning-009-build-table-and-primary-key-foreign-key-constraints-through-command/1476240682691.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-10-12-SQL-Learning-009-build-table-and-primary-key-foreign-key-constraints-through-command/1476240702251.png" alt="Alt text" /></p>

<p><code>PK</code> 指的是 <strong>主键</strong> ；<code>FK</code> 指的是 <code>外键</code>。</p>

<p><img src="http://aobojaing.github.io/images/2016-10-12-SQL-Learning-009-build-table-and-primary-key-foreign-key-constraints-through-command/1476240725526.png" alt="Alt text" /></p>

<p>下面的是我们刚刚定义的 <code>emp</code> 表的主键和外键的名字：</p>

<p><img src="http://aobojaing.github.io/images/2016-10-12-SQL-Learning-009-build-table-and-primary-key-foreign-key-constraints-through-command/1476240863958.png" alt="Alt text" /></p>

<p>下面的是我们没有给取名字的 <code>dept</code> 表的主键的默认名字：</p>

<p><img src="http://aobojaing.github.io/images/2016-10-12-SQL-Learning-009-build-table-and-primary-key-foreign-key-constraints-through-command/1476240944813.png" alt="Alt text" /></p>

<hr />

<p><strong>总结：</strong></p>

<p>使用命令 <code>create table</code> 来建表。</p>

<p><strong>Q：</strong> 什么是约束？
<strong>A：</strong> <strong>主键约束</strong> 和 <strong>外键约束</strong> 的作用：</p>

<ul>
<li>定义

<ul>
<li>对一个表中的属性操作的限制叫做约束。</li>
</ul>
</li>
<li>分类

<ul>
<li>主键约束

<ul>
<li>不允许重复元素 避免了数据的冗余。</li>
</ul>
</li>
<li>外键约束

<ul>
<li>通过外键约束从语法上保证了本事物所关联的其他事物一定是存在的。（就是说：事物与事物之前的关系是通过外键来体现的）</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>你要是感觉命令很难，就多敲，敲一敲就好了。</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 搭建静态博客站点 --- 为站点侧边栏添加标签云（Tag Cloud）]]></title>
    <link href="http://aobojaing.github.io/blog/2016/10/12/octopress-build-static-blog-site-add-tag-cloud-to-site-sidebar/"/>
    <updated>2016-10-12T00:00:00+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/10/12/octopress-build-static-blog-site-add-tag-cloud-to-site-sidebar</id>
    <content type="html"><![CDATA[<hr />

<h2>下载</h2>

<p>首先到 <a href="https://github.com/robbyedwards/octopress-tag-pages">https://github.com/robbyedwards/octopress-tag-pages</a> 和 <a href="https://github.com/robbyedwards/octopress-tag-cloud">https://github.com/robbyedwards/octopress-tag-cloud</a> clone这两个项目的代码。</p>

<pre><code>```
$ git clone https://github.com/robbyedwards/octopress-tag-cloud.git
$ git clone https://github.com/robbyedwards/octopress-tag-cloud.git
```
</code></pre>

<hr />

<h2>octopress-tag-pages</h2>

<p><strong>Step 1 . </strong> 将 <code>octopress-tag-pages\plugins</code> 路径里面的 <code>tag_generator.rb</code> 文件复制到 <code>octopress\plugins\</code> 文件夹里面。</p>

<p><strong>Step 2 . </strong> 将 <code>octopress-tag-pages\source\_includes\custom</code> 路径里面的 <code>tag_feed.xml</code> 文件复制到 <code>octopress\source\_includes\custom\</code> 文件夹。</p>

<p><strong>Step 3 . </strong> 将 <code>octopress-tag-pages\source\_layouts</code> 路径里面的 <code>tag_index.html</code> 文件复制到 <code>octopress\source\_layouts\</code> 文件夹里。</p>

<hr />

<h2>octopress-tag-cloud</h2>

<p><strong>Step 1 . </strong> 将 <code>octopress-tag-cloud\plugins</code>  路径里面的 <code>tag_cloud.rb</code>  文件复制到 <code>octopress\plugins\</code>  文件夹里面。</p>

<p><strong>Step 2 . </strong> 将下面的代码复制到 <code>octopress\source\_includes\custom\asides\tags.html</code>。（这个文件需要你自己新建。）
<strong>注意：</strong> 先去掉 <code>%</code> 前面的反斜杠。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;section&gt;
</span><span class='line'>  &lt;h1&gt;Tags&lt;/h1&gt;
</span><span class='line'>  &lt;ul class="tag-cloud"&gt;
</span><span class='line'>    {\% tag_cloud font-size: 90-210%, limit: 15, style: para \%}
</span><span class='line'>  &lt;/ul&gt;
</span><span class='line'>&lt;/section&gt;</span></code></pre></td></tr></table></div></figure>


<p>解释上面这段代码：</p>

<p><code>tag_cloud</code> 的参数中。 <code>font-size</code> 指定 <code>tag</code> 的大小范围；<code>limit</code> 限定 <code>15</code> 个 <code>tag</code> ；<code>style :para</code> 指定不使用 <code>li</code> 来分割。</p>

<p><strong>Step 3 . </strong></p>

<p>在 <code>octopress\_config.yml</code> 中的 <code>default_asides</code> 中添加 <code>custom/asides/tags.html</code>。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>default_asides: [custom/asides/tags.html, .....]</span></code></pre></td></tr></table></div></figure>


<hr />

<p>现在执行 <code>rake generate</code> 生成博客。在使用 <code>rake preview</code> 在本地预览博客。</p>

<p>你会发现，在导航栏里面出现了 <strong>Tags</strong> 字段，但是里面没有标签。（不用担心，你已经成功添加了标签云。只不过你的博文里面没有标签，所以在标签云里面就没有标签。）</p>

<p><img src="http://aobojaing.github.io/images/2016-10-12-octopress-build-static-blog-site-add-tag-cloud-to-site-sidebar/1476209931221.png" alt="Alt text" /></p>

<p>我们写一个带标签的博文。怎么写一个带标签的博文：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tags: [tag1, tag2, tag3]</span></code></pre></td></tr></table></div></figure>


<p><img src="http://aobojaing.github.io/images/2016-10-12-octopress-build-static-blog-site-add-tag-cloud-to-site-sidebar/1476210344633.png" alt="Alt text" /></p>

<hr />

<p>执行 <code>rake generate</code> 命令时出现了问题：</p>

<p><img src="http://aobojaing.github.io/images/2016-10-12-octopress-build-static-blog-site-add-tag-cloud-to-site-sidebar/1476211427887.png" alt="Alt text" /></p>

<h2>解决：<code>comparison of Array with Array failed in _layouts/page.html</code> 错误</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  Liquid Exception: comparison of Array with Array failed in _layouts/page.html</span></code></pre></td></tr></table></div></figure>


<p>在 <code>octopress\plugins\tag_cloud.rb</code> 中第74行是这么写的:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if @limit &gt; 0 and @sort != 'rand'
</span><span class='line'>    # sort the tag pairs by frequency in descending order
</span><span class='line'>    weighted.sort! { |a,b| b[1] &lt;=&gt; a[1] }
</span><span class='line'>    # then slice off the top @limit tag pairs
</span><span class='line'>    weighted = weighted[0,@limit]
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p><code>weighted = weighted[0,@limit]</code> 应该就是取指定数目的标签。如果你的标签数量少于 <code>@limit</code> ，那么就会报错。</p>

<p>所以我们修改第74行为:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  if @limit &gt; 0 and @sort != 'rand' and @limit &lt; weighted.length</span></code></pre></td></tr></table></div></figure>


<p>同样的，将第95行修改为:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>    if @limit &gt; 0 and @limit &lt; weighted.length</span></code></pre></td></tr></table></div></figure>


<p>现在所有的修改都完成了，执行 <code>rake generate</code> 命令时，就不会再出现上面的错误了，但是现在却出现了下面的警告：</p>

<p><img src="http://aobojaing.github.io/images/2016-10-12-octopress-build-static-blog-site-add-tag-cloud-to-site-sidebar/1476211894282.png" alt="Alt text" /></p>

<p>我们现在执行 <code>rake preview</code> 命令来预览看看。标签云是成功添加上去了:</p>

<p><img src="http://aobojaing.github.io/images/2016-10-12-octopress-build-static-blog-site-add-tag-cloud-to-site-sidebar/1476211997018.png" alt="Alt text" /></p>

<h2>解决 <code>Build Warning: Layout 'nil' requested in tags/标签名/atom.xml does not exist.</code> 警告问题</h2>

<p>将 <code>octopress\source\_includes\custom\tag_feed.xml</code> 文件里面 <code>nil</code> 改为 <code>null</code> ：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>layout: null
</span><span class='line'>---</span></code></pre></td></tr></table></div></figure>


<p>搞定，现在再执行 <code>rake generate</code> 命令就不会出现这个警告了。不会出现任何问题。</p>

<h2>搞定</h2>

<hr />

<hr />

<p>参考网站：</p>

<p>(扩充)为 octopress 添加标签云：
<a href="http://yang3wei.github.io/blog/2013/01/30/zhuan-zai-wei-octopress-tian-jia-biao-qian-yun/">http://yang3wei.github.io/blog/2013/01/30/zhuan-zai-wei-octopress-tian-jia-biao-qian-yun/</a>
分类标签：
<a href="http://wiki.jikexueyuan.com/project/github-page/classification.html">http://wiki.jikexueyuan.com/project/github-page/classification.html</a>
在Octopress中添加标签：
<a href="http://devma.cn/blog/2016/04/02/zai-octopresszhong-tian-jia-biao-qian/">http://devma.cn/blog/2016/04/02/zai-octopresszhong-tian-jia-biao-qian/</a></p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL 数据库 学习 008 如何通过图形化界面建表 和 建主外键约束]]></title>
    <link href="http://aobojaing.github.io/blog/2016/10/11/SQL-Learning-008-build-tables-and-primary-foreign-key-constraints-with-GUI/"/>
    <updated>2016-10-11T23:49:40+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/10/11/SQL-Learning-008-build-tables-and-primary-foreign-key-constraints-with-GUI</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>我的电脑系统：<strong>Windows  10</strong> 64位</li>
<li><strong>SQL Server</strong> 软件版本： <strong>SQL Server 2014 Express</strong></li>
</ul>


<hr />

<p>在库里面建表。所以我们现在需要先新建一个库，然后在库里面新建一个表。</p>

<p>所以，先建一个 <strong>库</strong> ，取名为：<code>test</code></p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-008-How-to-build-tables-and-build-primary-foreign-key-constraints-through-graphical-interface/1476180331922.png" alt="Alt text" /></p>

<p>输入新建库的名字：<code>test</code> 。 现在点击 <strong>确定</strong> 按钮。</p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-008-How-to-build-tables-and-build-primary-foreign-key-constraints-through-graphical-interface/1476180873442.png" alt="Alt text" /></p>

<blockquote><p>如果你在创建库的时候，遇到了下面这个异常。请查看<a href="http://blog.csdn.net/u010800530/article/details/12093999">这篇博客</a>解决问题。</p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-008-How-to-build-tables-and-build-primary-foreign-key-constraints-through-graphical-interface/1476180567450.png" alt="Alt text" /></p></blockquote>

<p>新建成功：</p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-008-How-to-build-tables-and-build-primary-foreign-key-constraints-through-graphical-interface/1476180912977.png" alt="Alt text" /></p>

<hr />

<p>我们现在在库里面在建表。</p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-008-How-to-build-tables-and-build-primary-foreign-key-constraints-through-graphical-interface/1476181053705.png" alt="Alt text" /></p>

<p>建表的方式有两种：一种是鼠标点击的方式；一种是输入命令的方式。（但是不推荐鼠标去点。如果你想要这个命令正确的执行成功，并且它很稳定，一般都是使用命令去实现。）</p>

<hr />

<p>现在我们先来介绍如何使用鼠标来操作：</p>

<h2>下面使用点击鼠标的方式（图形化界面 ）进行建表：</h2>

<p>对着 <strong>库</strong> 的 <strong>表</strong>  点击右击，点击 <strong>表(T)&hellip;</strong></p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-008-How-to-build-tables-and-build-primary-foreign-key-constraints-through-graphical-interface/1476181347994.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-008-How-to-build-tables-and-build-primary-foreign-key-constraints-through-graphical-interface/1476181423485.png" alt="Alt text" /></p>

<p><strong>列</strong> 名这里使用英文，后面选择 <strong>数据类型</strong> 。</p>

<p>目前第一个列取名为：<code>emp_ename</code> 。数据类型选择为：<code>nvarchar(MAX)</code> 。（表示的是：一个国际化编码可变的字符串。<code>n</code> 指的是：国际化，对汉字也支持；<code>var</code> 指的是：变量。所以：<code>nvarchar(MAX)</code> 指的是：可以存储汉字的字符串长度可以变化的字符串数据。）。后面的 <code>允许  Null 值</code>，如果你勾选了，意味着这一列的值可以是空的，所以我们不勾选。
其它<strong>列</strong>按照员工表对应的输入。</p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-008-How-to-build-tables-and-build-primary-foreign-key-constraints-through-graphical-interface/1476181807481.png" alt="Alt text" /></p>

<p>最终建出来的表就是下面这个样子的。（我们现在还没有添加 <strong>部门编号</strong>，为什么不添加？因为现在我们还没有部门这个表。（所以，如果我们先新建部门表，再建员工表就好了。））</p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-008-How-to-build-tables-and-build-primary-foreign-key-constraints-through-graphical-interface/1476181822333.png" alt="Alt text" /></p>

<blockquote><p><code>nchar</code> 中的 <code>n</code> 指的也是：支持国际化，支持汉字。</p></blockquote>

<p>现在按 <strong>Ctrl + S</strong> 保存，将这个表取名为：<code>emp</code> 。 点击 <strong>确定</strong> 按钮。</p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-008-How-to-build-tables-and-build-primary-foreign-key-constraints-through-graphical-interface/1476182492779.png" alt="Alt text" /></p>

<p>现在这个 <strong>员工</strong> 表建立完成。</p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-008-How-to-build-tables-and-build-primary-foreign-key-constraints-through-graphical-interface/1476182514880.png" alt="Alt text" /></p>

<p>现在，我们就可以在：<strong>对象资源管理器</strong> 里面看到 <strong>test</strong>数据库里面的 <strong>表</strong> 选单里面多出来一个 <code>dbo.emp</code> 表。</p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-008-How-to-build-tables-and-build-primary-foreign-key-constraints-through-graphical-interface/1476185855379.png" alt="Alt text" /></p>

<blockquote><p>如果你没有在这里面看到刚刚新建的 <code>dbo.emp</code> 表。进行下面的操作：（刷新一下，就出现了。）</p>

<p> <img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-008-How-to-build-tables-and-build-primary-foreign-key-constraints-through-graphical-interface/1476186193963.png" alt="Alt text" /></p></blockquote>

<p>展开 <code>dbo.emp</code> 表，你可以看到：</p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-008-How-to-build-tables-and-build-primary-foreign-key-constraints-through-graphical-interface/1476189999622.png" alt="Alt text" /></p>

<p>现在还没有添加主键。（刚刚并没有设置主键。）如果没有主键，数据就容易 <strong>冗余</strong>。</p>

<p>举个例子：</p>

<p>在表中添加内容：</p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-008-How-to-build-tables-and-build-primary-foreign-key-constraints-through-graphical-interface/1476190370338.png" alt="Alt text" /></p>

<p>如果添加的两条记录一模一样，那么得到的数据就 <strong>冗余</strong> 了。</p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-008-How-to-build-tables-and-build-primary-foreign-key-constraints-through-graphical-interface/1476190501239.png" alt="Alt text" /></p>

<blockquote><p>如何添加记录？</p>

<p>数据添加完之后，点击框框中的地方：</p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-008-How-to-build-tables-and-build-primary-foreign-key-constraints-through-graphical-interface/1476190612519.png" alt="Alt text" /></p>

<p>点击后，红色的叹号消失：</p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-008-How-to-build-tables-and-build-primary-foreign-key-constraints-through-graphical-interface/1476190654517.png" alt="Alt text" /></p>

<p>如果你添加的是冗余的数据，还有在点击执行按钮，叹号才会消失。</p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-008-How-to-build-tables-and-build-primary-foreign-key-constraints-through-graphical-interface/1476190697805.png" alt="Alt text" /></p></blockquote>

<p>在设计字段的时候，编号就是不能重复的，但是上面的两条冗余数据导致了编号的重复，所以现在编号就不能设置为主键了。不信，我们现在来试试。</p>

<p>对表的结构进行修改，点击 <strong>设计</strong></p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-008-How-to-build-tables-and-build-primary-foreign-key-constraints-through-graphical-interface/1476190945148.png" alt="Alt text" /></p>

<p>对 <code>emp_id</code> 属性 右键 ，选择 ：<strong>设置主键(Y)</strong></p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-008-How-to-build-tables-and-build-primary-foreign-key-constraints-through-graphical-interface/1476190972850.png" alt="Alt text" /></p>

<p>然后保存。（保存就会出错。）</p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-008-How-to-build-tables-and-build-primary-foreign-key-constraints-through-graphical-interface/1476191085152.png" alt="Alt text" /></p>

<p>目前数据里面的 <code>emp_id</code> 属性有重复的数据，现在你又想将其设置为不可重复的主键，所以就出错了。</p>

<p>现在，我需要将表里面的 <code>emp_id</code> 属性里的数据进行修改。目的就是：不能让里面的数据内容重复。（我使用图形界面（就是鼠标点击）的方式修改不了表里面的数据；我们修改数据使用敲命令的方法也是修改不了的，这说明了：数据不能有冗余。）</p>

<p>我们现在只能将两条数据都删除。（使用图形界面（就是鼠标点击）的方式删除不了的；我们修改使用命令来删除）</p>

<p>新建一个查询文件（<code>.sql</code> 后缀的文件）。</p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-008-How-to-build-tables-and-build-primary-foreign-key-constraints-through-graphical-interface/1476191767692.png" alt="Alt text" /></p>

<p>在里面输入下面的命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">delete</span> <span class="k">from</span> <span class="n">emp</span>
</span></code></pre></td></tr></table></div></figure>


<p>点击 <strong>执行</strong> 按钮。</p>

<p>现在数据还在。</p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-008-How-to-build-tables-and-build-primary-foreign-key-constraints-through-graphical-interface/1476192430675.png" alt="Alt text" /></p>

<p>点击 <strong>执行</strong> 图标。</p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-008-How-to-build-tables-and-build-primary-foreign-key-constraints-through-graphical-interface/1476192471479.png" alt="Alt text" /></p>

<p>数据消失。（这个软件真是好弱啊！）</p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-008-How-to-build-tables-and-build-primary-foreign-key-constraints-through-graphical-interface/1476192510506.png" alt="Alt text" /></p>

<hr />

<p>折腾了一顿。</p>

<h2>下面使用点击鼠标的方式（图形化界面 ）进行建主外键约束：</h2>

<p>所以，我们应该先设置主键，然后 <code>Ctrl + S</code> 保存。接下来在添加数据。这才是正确的步骤。</p>

<p>接着添加，数据：</p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-008-How-to-build-tables-and-build-primary-foreign-key-constraints-through-graphical-interface/1476192873680.png" alt="Alt text" /></p>

<p>现在有了主键，导致了：主键里面的数据不能一样。</p>

<hr />

<p>现在，我们在写一个表： <strong>部门表</strong> 。并添加下面的数据，同时将 <code>dept_id</code> 属性设置为 <strong>主键</strong>。</p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-008-How-to-build-tables-and-build-primary-foreign-key-constraints-through-graphical-interface/1476195050064.png" alt="Alt text" /></p>

<p>按 <code>Ctrl + S</code> 保存此表，命名为：<code>dept</code></p>

<blockquote><p>注意：数据是中文的无所谓。但是你不要把表的结构和库的结构也写成中文。</p></blockquote>

<p>现在我们来到 <strong>emp</strong> 表。添加 <code>dept_id</code> 这个属性（注意：这个属性的 <code>允许Null值</code>要勾选）。（目的是：将其设置为<strong>外键</strong>）</p>

<p>然后右键，点击 <strong>关系</strong></p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-008-How-to-build-tables-and-build-primary-foreign-key-constraints-through-graphical-interface/1476197842775.png" alt="Alt text" /></p>

<p>然后点击 <strong>添加</strong></p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-008-How-to-build-tables-and-build-primary-foreign-key-constraints-through-graphical-interface/1476197065843.png" alt="Alt text" /></p>

<p>点击 下面红框框里面的按钮。</p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-008-How-to-build-tables-and-build-primary-foreign-key-constraints-through-graphical-interface/1476197186532.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-008-How-to-build-tables-and-build-primary-foreign-key-constraints-through-graphical-interface/1476197233271.png" alt="Alt text" /></p>

<p>设置为下面这个样子。将 <code>dept_id</code> 这个属性设置为 <strong>外键</strong>。</p>

<p>解释一下：存在外键的表叫做 <strong>外键表</strong>，（<strong>外键</strong>：就是来自于另外一个表的<strong>主键</strong>）。 <code>emp</code>（员工） 表里面有一个<code>dept_id</code> （部门编号）这个外键，它就是 <code>dept</code> （部门）表的主键。</p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-008-How-to-build-tables-and-build-primary-foreign-key-constraints-through-graphical-interface/1476197347119.png" alt="Alt text" /></p>

<p>点击 <strong>确定</strong>， 再点击 <strong>关闭</strong>。现在按 <code>Ctrl + S</code> 保存，会弹出下面的窗口。点击 <strong>是</strong> 按钮。</p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-008-How-to-build-tables-and-build-primary-foreign-key-constraints-through-graphical-interface/1476197679992.png" alt="Alt text" /></p>

<hr />

<p>我现在在 <code>dept</code> （部门）表里面添加数据。</p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-008-How-to-build-tables-and-build-primary-foreign-key-constraints-through-graphical-interface/1476198258461.png" alt="Alt text" /></p>

<p>现在再来到 <code>emp</code> （员工）表里面，给<code>dept_id</code>（部门编号）（外键） 添加数据。（如果你打开<code>emp</code>表发现里面现在还没有<code>dept_id</code>这个属性，就关闭这个页面，重新打开这个<code>emp</code>表，就有了。（这个软件正弱！））</p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-008-How-to-build-tables-and-build-primary-foreign-key-constraints-through-graphical-interface/1476198701835.png" alt="Alt text" /></p>

<hr />

<hr />

<p>我们来<strong>总结</strong>一下：应该先建部门表，然后在建员工表，是最好的。也就是说：先建<strong>主键表</strong>，然后再将<strong>外键表</strong>（因为<strong>外键表</strong>有数据来自另外的表（<strong>主键表</strong>））。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL 数据库 学习 007 通过一个示例简单介绍什么是字段、属性、列、元组、记录、表、主键、外键]]></title>
    <link href="http://aobojaing.github.io/blog/2016/10/11/SQL-Learning-007-Field-Attributes-Column-Tuple-recording-table-Primary_key-Foreign_key/"/>
    <updated>2016-10-11T15:09:45+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/10/11/SQL-Learning-007-Field-Attributes-Column-Tuple-recording-table-Primary_key-Foreign_key</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>我的电脑系统：<strong>Windows  10</strong> 64位</li>
<li><strong>SQL Server</strong> 软件版本： <strong>SQL Server 2014 Express</strong></li>
</ul>


<hr />

<p>我们来介绍一下：数据库是如何存储数据的。</p>

<h2>数据库是如何存储数据的</h2>

<p>来看一个小例子</p>

<p>现在，假如我们现在想存储 员工的信息。也就是说：我们来通过这个例子来看看 <strong>字段</strong>、<strong>记录</strong>、<strong>表</strong> 是一个什么东西。</p>

<p>我们下面通过存储一个员工的信息，来把这些专业术语都来解释一遍。</p>

<p>假设有4个信息：</p>

<p>| 员工姓名      |     员工工资 |   员工性别   | 员工年龄 |</p>

<p>我们能不能这样去存储数据。比如举例：</p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-007-Field-Attributes-Column-Tuple-recording-table-Primary_key-Foreign_key/1474946865354.png" alt="Alt text" /></p>

<p>如果我们按照正常的思维，这样存储是没有问题的。（其实这个员工表还缺少一列数据）但是如果我们真的在数据库里面这样存储数据的话，是会出问题的。
我们想象一下：如果你只是写了员工的姓名、工资、性别、年龄，将来可不可能会出现一个人和里面员工的人有一模一样的姓名。如果出现了一模一样的数据，数据库该如何辨别？</p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-007-Field-Attributes-Column-Tuple-recording-table-Primary_key-Foreign_key/1474947092362.png" alt="Alt text" /></p>

<p>所以，它需要设置一个东西，来标识唯一的<strong>记录</strong>（行）。</p>

<p>如果信息（行）一样，那么保存起来就浪费了，术语叫：<strong>冗余</strong>。（简单的说：就是有两条数据彼此之间无法辨别了。）</p>

<p><strong>Q：</strong> 那我们怎么办？</p>

<p><strong>A：</strong> 我们在现实中，是使用编号来解决这个问题的。</p>

<blockquote><p>不管是人也好，产品也好，都是使用编号来标识唯一的一个事物的。</p></blockquote>

<h2>主键</h2>

<p>所以：</p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-007-Field-Attributes-Column-Tuple-recording-table-Primary_key-Foreign_key/1474947488293.png" alt="Alt text" /></p>

<p>张三这个人之前有4个属性：姓名、工资、性别 和 年龄。而确定一个数据唯一性的属性，有一个专门的词：<strong>主键</strong>。（当前例子指的就是：<strong>学生编号</strong>。）（现在张三这个人有5个属性了。）</p>

<p><strong>主键</strong>：它也是事物的一个属性，它是<strong>可以标识事物唯一性的属性</strong>。</p>

<hr />

<p>如果我们这样存放：</p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-007-Field-Attributes-Column-Tuple-recording-table-Primary_key-Foreign_key/1474969612804.png" alt="Alt text" /></p>

<p>那么 部门姓名 和 部门地址 还有 部门人数 都会重复的出现，这样存储太消耗空间了。</p>

<p>所以我们将他们分开存储：</p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-007-Field-Attributes-Column-Tuple-recording-table-Primary_key-Foreign_key/1474969757254.png" alt="Alt text" /></p>

<p><strong>Q：</strong> 请问： 部门 需不需要 编号 这个属性呢？</p>

<p><strong>A：</strong> 需要。</p>

<p>记住：我们设计任何一个事物都需要<strong>主键</strong>（唯一的标识符）。如果没有唯一的标识符，那么事物和事物之间的区别就没有了。</p>

<p>所以，只要你想存数据，数据就必须要有<strong>主键</strong>。没有主键，事物与事物之间没有办法区分。添加主键就是添加<strong>编号</strong>属性。</p>

<p>比如说人。人的身份证算不算是一个人的属性，身份证是单独添加的。我们人有鼻子，眼睛，嘴。身份证严格上讲并不是一个人的属性，只不过是为了标识，使用编号是很方便的。所以每个人才有了身份证号这个属性。</p>

<blockquote><p>编号（主键）是无意义的，但是因为它太普遍的，我们认为它有意义。</p></blockquote>

<p>在保存数据的时候，都是单独添加一个没有实际意义的、只为了编号的 数据来充当主键。它只起个标识作用。（现实生活中我们就是这样使用的，在实际的设计库的时候，我们也是这样设计的，和我们日常中是一模一样的。）</p>

<hr />

<h2>外键</h2>

<p><strong>Q：</strong> 员工和部门之间是有关系的，那么这个关系怎么去表达？</p>

<p><strong>Q、：</strong> 如果，我们想要将现实生活中特别复杂的事物保存到硬盘上，我们要如何存储？</p>

<p>你应该这样去考虑：</p>

<p>第一：个体如何存储；</p>

<p>第二：个体之间的关系如何存储。</p>

<p>把这两个搞定了，基本就都搞定了。</p>

<hr />

<p>我们现在已经解决了<strong>个体</strong>如何存储。接下来就是<strong>个体之间的关系</strong>如何存储了。我们主流使用的数据库都是关系型数据库（就是一个二维表），而我们使用的编程语言是<strong>Java</strong>、<strong>C#</strong>这种面向对象的语言，这两种完全不同的解决问题的思想。</p>

<p><strong>Q：</strong> 中间服务器是使用<strong>Java</strong> 或者 <strong>C#</strong> 实现的，后端是数据库实现的，它们之间如何进行交互的？</p>

<p><strong>A：</strong> 是通过<strong>Hibernate</strong>实现 一个映射，日后的博客中会介绍它。（如果日后，我们的数据库也是使用面向对象的思想实现的，那么这个<strong>Hibernate</strong> 就没用了。但是现在没有面向对象的数据库，这种思想的数据库技术还不成熟，所以 <strong>Hibernate</strong>现在还是需要学习的。）</p>

<p><strong>Q：</strong> 什么是面向对象，大家已经知道了。但是，什么是关系？</p>

<p><strong>A：</strong> 面向对象思想是通过类来实现的，而关系型数据库是通过表来实现的。而表与表之间的关系是通过什么来实现的呢？是通过一个叫：<strong>外键</strong> 的东西来表示的。</p>

<p>我们现在在员工表里面在添加一个：<strong>部门编号</strong>。</p>

<blockquote><p><strong>扩展：</strong>（编号通常是整型数字，如果数据量太大，整型数字不够用的话，编号通常是字母和数字组合使用。当时我们推荐编号使用整型数字。因为整型查找的时候很快，而字符串查找的时候很慢。）</p></blockquote>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-007-Field-Attributes-Column-Tuple-recording-table-Primary_key-Foreign_key/1474974928303.png" alt="Alt text" /></p>

<p>这个 <strong>部门编号</strong> 就是 <strong>外键</strong>。我们在员工表上添加了一列（部门编号），就解决了 <strong>表</strong>（员工表）与 <strong>表</strong>（部门表）之间的<strong>关系</strong>了。</p>

<blockquote><p><strong>Q：</strong> 我们想象一下，如果我们不在员工表里面添加 <strong>部门编号</strong>。而是在 部门表里面添加 <strong>员工编号</strong>。这样行不行？</p>

<p><strong>A：</strong> 当时是不行的，一个部门里面里面有很多的员工，并且员工的数量不同。所以，如果我们在部门表里面添加员工编号的话，有些部分的字段就很多，而有些部门的编号就很少，这样就不合适了吧。如果你想这样设计也可以，但是这样设计不好。</p></blockquote>

<p>你在设计表之前，要想：员工与部门之间的关系是一对多还是多对一。意思就是：一个员工 对应 很多部门，还是 一个部门 对应 很多员工？
是一个部分对应多个员工。我们会<strong>将外键添加到多的一方</strong>，这样是最合理的。</p>

<blockquote><p>我们日后会讲：多对多，一对一，一对多 这样的情况下，都如何使用外键来表示关系。现在大概有个印象就可以。</p></blockquote>

<p><strong>Q：</strong> 再解释一次：什么是外键？</p>

<p><strong>A：</strong> 连接两个表的字段叫做外键。</p>

<p>但是能不能再换一种更好的解释方式。主键是：标识唯一一个事物。而外键是：一个表中的数据来自另外一个表。（解释：员工表里面的一列数据（部门编号），它不是员工表本身的，它的数据是来自另外一个表（部门表）。）</p>

<hr />

<h2><strong>总结：</strong></h2>

<p>在数据库里面的专业术语：</p>

<p>这样的一列叫：<strong>列</strong> 或者 <strong>字段</strong>。模拟的是：一个事物的某一个静态的特征。<strong>列</strong>：字段的另一种称谓。</p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-007-Field-Attributes-Column-Tuple-recording-table-Primary_key-Foreign_key/1474975819543.png" alt="Alt text" /></p>

<hr />

<p>这样的一行叫：<strong>记录</strong> 或者 <strong>元组</strong>。模拟的是：字段的组合，表示的是一个具体的事物。<strong>元组</strong>：记录的另一种称谓。</p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-007-Field-Attributes-Column-Tuple-recording-table-Primary_key-Foreign_key/1474975928980.png" alt="Alt text" /></p>

<hr />

<p>这样的一行叫：<strong>记录</strong> 或者 <strong>元组</strong> 或者 <strong>属性</strong>。<strong>属性</strong>：<strong>记录</strong>的另一种称谓。</p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-007-Field-Attributes-Column-Tuple-recording-table-Primary_key-Foreign_key/1474975996931.png" alt="Alt text" /></p>

<hr />

<p>这一个整体叫：<strong>表</strong>。记录的组合。模拟的是（表示的是）：同一类事物的一个集合。</p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-007-Field-Attributes-Column-Tuple-recording-table-Primary_key-Foreign_key/1474976030725.png" alt="Alt text" /></p>

<hr />

<p>表、字段和记录的关系：</p>

<ul>
<li>字段是事物的属性</li>
<li>记录是事物本身</li>
<li>表示事物的集合</li>
</ul>


<hr />

<p>表中唯一能辨别一个记录与另一个记录不同的字段叫：<strong>主键</strong>。</p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-007-Field-Attributes-Column-Tuple-recording-table-Primary_key-Foreign_key/1474976130605.png" alt="Alt text" /></p>

<hr />

<p>如果有一个记录（列）不是来自于表本身的，是来自另外一个表的，它叫：<strong>外键</strong>。</p>

<p><img src="http://aobojaing.github.io/images/2016-10-11-SQL-Learning-007-Field-Attributes-Column-Tuple-recording-table-Primary_key-Foreign_key/1474976186110.png" alt="Alt text" /></p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows系统 下载并安装 Notepad++ 图文教程]]></title>
    <link href="http://aobojaing.github.io/blog/2016/10/10/Windows-install-Notepad++/"/>
    <updated>2016-10-10T10:44:52+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/10/10/Windows-install-Notepad++</id>
    <content type="html"><![CDATA[<hr />

<h2>下载</h2>

<p>（<strong>Notepad</strong> 文本编辑器软件是免费的，并且非常的好。属于电脑必备软件。）</p>

<p>到这个网站下载：<a href="https://notepad-plus-plus.org/download/v7.html">https://notepad-plus-plus.org/download/v7.html</a></p>

<p>点击相应的 <strong>安装包</strong> 进行下载：
（我电脑是64位的，所以下载64位的。<strong>Installer</strong> 是安装包； <strong>压缩包</strong> 是绿色版的，下载解压后直接就能使用，无需安装。）</p>

<p><img src="http://aobojaing.github.io/images/2016-10-10-Windows-install-Notepad++/1475993346774.png" alt="Alt text" /></p>

<hr />

<h2>安装</h2>

<p><img src="http://aobojaing.github.io/images/2016-10-10-Windows-install-Notepad++/1475993288957.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-10-10-Windows-install-Notepad++/1475993358700.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-10-10-Windows-install-Notepad++/1475993364763.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-10-10-Windows-install-Notepad++/1475993371316.png" alt="Alt text" /></p>

<p>什么都不选，直接<strong>下一步</strong>。</p>

<p><img src="http://aobojaing.github.io/images/2016-10-10-Windows-install-Notepad++/1475993422195.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-10-10-Windows-install-Notepad++/1475993429978.png" alt="Alt text" /></p>

<h2>搞定</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 搭建静态博客站点 --- 自定义字体设置]]></title>
    <link href="http://aobojaing.github.io/blog/2016/10/10/use-octopress-build-blog-site-custom-fonts/"/>
    <updated>2016-10-10T10:04:40+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/10/10/use-octopress-build-blog-site-custom-fonts</id>
    <content type="html"><![CDATA[<hr />

<p>字体配置文件在 <code>octopress/sass/custom/</code> 文件里面：<code>_fonts.scss</code> 文件。</p>

<p><img src="http://aobojaing.github.io/images/2016-10-10-use-octopress-build-blog-site-custom-fonts/1476063413831.png" alt="Alt text" /></p>

<p>默认情况下字体配置都是被注释掉的。我们将注释都去掉。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$sans: "Optima", sans-serif;
</span><span class='line'>$serif: "Baskerville", serif;
</span><span class='line'>$mono: "Courier", monospace;
</span><span class='line'>$heading-font-family: "Verdana", sans-serif;
</span><span class='line'>$header-title-font-family: "Futura", sans-serif;
</span><span class='line'>$header-subtitle-font-family: "Futura", sans-serif;</span></code></pre></td></tr></table></div></figure>


<blockquote><p>引号里面的是：<strong>字体名</strong>。后面跟的是：<code>sans-serif</code>(无衬线字体)、<code>serif</code>（衬线）、<code>monospace</code>（等宽字体）。</p></blockquote>

<ul>
<li><code>$sans</code>：定义的是无衬线正文的字体

<ul>
<li><img src="http://aobojaing.github.io/images/2016-10-10-use-octopress-build-blog-site-custom-fonts/1476063715659.png" alt="Alt text" /></li>
</ul>
</li>
<li><code>$serif</code>：定义的是衬线正文的字体</li>
<li><code>$mono</code>：定义的是代码的字体</li>
<li><code>$heading-font-family</code>：定义的是文章标题的字体</li>
<li><code>$header-title-font-family</code>：定义的是博客标题的字体</li>
<li><code>$header-subtitle-font-family</code>：定义的是博客子标题的字体</li>
</ul>


<p>我将它们修改为下面这样的配置。（就是将所有的字体都设置为：<code>Comic Sans MS</code>）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$sans: "Comic Sans MS", sans-serif;
</span><span class='line'>$serif: "Comic Sans MS", serif;
</span><span class='line'>$mono: "Comic Sans MS", monospace;
</span><span class='line'>$heading-font-family: "Comic Sans MS", sans-serif;
</span><span class='line'>$header-title-font-family: "Comic Sans MS", sans-serif;
</span><span class='line'>$header-subtitle-font-family: "Comic Sans MS", sans-serif;</span></code></pre></td></tr></table></div></figure>


<p>现在执行 <code>rake generate</code> 命令生成博客站点。在执行 <code>rake preview</code> 命令在本地开设4000端口。在浏览器中浏览 <code>localhost:4000</code> 端口进行预览。（效果不错。）</p>

<p><img src="http://aobojaing.github.io/images/2016-10-10-use-octopress-build-blog-site-custom-fonts/1476064562554.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-10-10-use-octopress-build-blog-site-custom-fonts/1476064543308.png" alt="Alt text" /></p>

<hr />

<p>参考网站：
利用Octopress和Github搭建个人博客（四）：自定义字体
<a href="http://glgjing.github.io/blog/2015/01/31/li-yong-octopresshe-githubda-jian-ge-ren-bo-ke-%28si-%29:zi-ding-yi-zi-ti/">http://glgjing.github.io/blog/2015/01/31/li-yong-octopresshe-githubda-jian-ge-ren-bo-ke-(si-):zi-ding-yi-zi-ti/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决 GitHub for Windows 客户端软件中代码的中文显示乱码问题]]></title>
    <link href="http://aobojaing.github.io/blog/2016/10/10/slove-GitHub-For-Windows-chinese-garbled-coding/"/>
    <updated>2016-10-10T07:47:34+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/10/10/slove-GitHub-For-Windows-chinese-garbled-coding</id>
    <content type="html"><![CDATA[<hr />

<p><code>README.md</code> 文件里面是有中文的。在 <code>GitHub For Windows</code> 客户端软件里面显示中文是乱码的。</p>

<p><img src="http://aobojaing.github.io/images/2016-10-10-slove-GitHub-For-Windows-chinese-garbled-coding/1476055346118.png" alt="Alt text" /></p>

<p>解决办法：</p>

<p><strong>Step 1 . </strong> 将 <code>README.md</code> 文件使用 <strong>Notepad++</strong> 软件打开。
（如果你的电脑上没有 <strong>Notepad++</strong> 软件，你可以参考<a href="http://www.aobosir.com/blog/2016/10/10/Windows-install-Notepad++/">这篇博客</a>来下载安装它。）</p>

<p><strong>Step 2 . </strong> 选择： <strong>格式</strong> -> <strong>转为 Utf-8 无 BOM 编码格式</strong></p>

<p><strong>Step 3 . </strong> 保存 <code>README.md</code> 文件</p>

<p><strong>Step 4 . </strong> 将修改重新推送到 <strong>GitHub</strong> 远程。</p>

<p>问题解决：</p>

<p><img src="http://aobojaing.github.io/images/2016-10-10-slove-GitHub-For-Windows-chinese-garbled-coding/1476055880353.png" alt="Alt text" /></p>

<hr />

<blockquote><p><strong>GitHub For Windows </strong> 客户端软件是一个非常好的软件，它实现了：即使你不会 <code>git</code> 命令行工具的时候，一样可以使用 <strong>GitHub For Windows </strong> 客户端软件里面简单点的点击按钮就可以一样将代码推送到 <strong>GitHub</strong> 远程。</p></blockquote>

<hr />

<blockquote><p>下载、安装、配置 <strong>GitHub For Windows </strong> 客户端软件的图文教程可以参考这篇博客。</p></blockquote>

<hr />

<blockquote><p>因为 <strong>GitHub</strong> 在推送代码到远程的时候，会自动将所有文件的编码方式转换为 <code>UTF-8</code> ，所有在网页里面浏览你的 <strong>GitHub</strong> 仓库的时候，中文是不会出现乱码的。
但是在本地，要想在 <strong>GitHub For Windows</strong> 客户端软件里面也能正常看到 中文，而不是乱码，就要自己手动的将含有中文的文件转换为：<code>UTF-8</code>编码方法。（如果是 <strong>Windows</strong> 系统就要转为：<code>Utf-8 无 BOM</code> 编码格式）</p></blockquote>
]]></content>
  </entry>
  
</feed>
