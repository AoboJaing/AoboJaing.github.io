<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: 正则表达式 | AoboSir 博客]]></title>
  <link href="http://aobojaing.github.io/tags/zheng-ze-biao-da-shi/atom.xml" rel="self"/>
  <link href="http://aobojaing.github.io/"/>
  <updated>2017-03-06T19:21:44+08:00</updated>
  <id>http://aobojaing.github.io/</id>
  <author>
    <name><![CDATA[Aobo Jaing]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning Python 008 正则表达式-007 匹配的字符串模板中如果只有前面有字符串，而后面没有字符串时，这个匹配模板要怎么写]]></title>
    <link href="http://aobojaing.github.io/blog/2017/02/21/python-regular-expression-match-string-no-string-in-behind/"/>
    <updated>2017-02-21T01:19:10+08:00</updated>
    <id>http://aobojaing.github.io/blog/2017/02/21/python-regular-expression-match-string-no-string-in-behind</id>
    <content type="html"><![CDATA[<hr />

<h2>开发环境</h2>

<ul>
<li>Python第三方库：lxml、Twisted、pywin32、scrapy</li>
<li>Python 版本：python-3.5.0-amd64</li>
<li>PyCharm软件版本：pycharm-professional-2016.1.4</li>
<li>电脑系统：Windows 10 64位</li>
</ul>


<p>如果你还没有搭建好开发环境，请到<a href="http://www.aobosir.com/blog/2016/11/26/python3-large-web-crawler-001-Build-development-environment/">这篇博客</a>。</p>

<hr />

<h2></h2>

<p>例子程序在这里：<a href="https://github.com/AoboJaing/learning_python/blob/master/learning_python08_06.py">learning_python_08_06.py</a></p>

<p>参考网站：<a href="http://www.cnblogs.com/dyfblog/p/5880728.html">python正则表达式详解</a></p>

<p><img src="/images/2017-2-21-python-regular-expression-match-string-no-string-in-behind/1487610263474.png" alt="Alt text" /></p>

<p>当我们的匹配字符串的末尾处没有字符串的时候，我们使用<code>\Z</code>来表示结束处。</p>

<blockquote><p>同样的道理：当我们的匹配字符串的开头处没有字符串的时候，我们使用<code>\A</code>来表示开头处。</p></blockquote>

<pre><code class="python"># -!- coding:utf-8 -!-

import re

# Learning Python 008 正则表达式-007 匹配的字符串模板中如果只有前面有字符串，而后面没有字符串时，这个匹配模板要怎么写 --- 2017年2月20日 星期一
# 博文的链接地址：http://www.aobosir.com/blog/2017/02/21/python-regular-expression-match-string-no-string-in-behind/

# 这个程序的功能：获取'.\data\2017-2-19-3D-printer-hot-bed.markdown'文件里面所有的图片链接的地址。

# 这个demo 程序使用了两次正则表达式的方式，成功的将所有的图片链接地址都获取了出来。（其中有："![Alt text](/images/2017-2-21-python-regular-expression-match-string-no-string-in-behind/1485166773479.png)"这种形式的，还是"![Alt text | 240x0](./1485166756931.png)"这种形式的。）

file = open(r'.\data\2017-2-19-3D-printer-hot-bed.markdown', 'rt', encoding='utf-8')
data = file.read()
print(data)

image_local_path_step1 = re.findall('!\[Alt text(.*?)\)', data, re.S)
for i in range(len(image_local_path_step1)):
    print(image_local_path_step1[i])
    pass

for i in range(len(image_local_path_step1)):
    image_local_path_step1_this = image_local_path_step1[i]
    image_local_path_step2 = re.findall(']\((.*?)\Z', image_local_path_step1_this, re.S)
    print(image_local_path_step2[0])
    pass


file.close()
</code></pre>

<p>这个demo程序中，使用了两层正则表达式。</p>

<p>第一层的匹配字符串是：<code>!\[Alt text(.*?)\)</code>。它可以得到<code>](./1485164492501.png</code>这样或者<code>| 240x0](./1485166756931.png</code>这样的结果。</p>

<p>解决我们将得到的结果再进行一次正则表示匹配。这次使用的匹配字符串是：<code>]\((.*?)\Z</code>。通过这次匹配，得到的结果就都是图片的地址了。（想这样：<code>./1485181859693.png</code>）</p>

<blockquote><p>注意：在匹配字符串中的<code>(</code>和<code>)</code>需要使用转义字符<code>\</code>修饰。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Python 008 正则表达式-006 正则表达式中如果有换行，代码要怎么写]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/08/python-Regular-Expressions-Line-feed/"/>
    <updated>2016-12-08T07:24:18+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/08/python-Regular-Expressions-Line-feed</id>
    <content type="html"><![CDATA[<hr />

<h2>开发环境</h2>

<ul>
<li>Python第三方库：lxml、Twisted、pywin32、scrapy</li>
<li>Python 版本：python-3.5.0-amd64</li>
<li>PyCharm软件版本：pycharm-professional-2016.1.4</li>
<li>电脑系统：Windows 10 64位</li>
</ul>


<p>如果你还没有搭建好开发环境，请到<a href="http://www.aobosir.com/blog/2016/11/26/python3-large-web-crawler-001-Build-development-environment/">这篇博客</a>。</p>

<hr />

<p>当我在使用正则表达式去提取网页源代码中的有效数据的时候。发现：我要提取的有效数据所需要使用的正则表达式中有换行。那么这个时候，正则表达式要怎么写？</p>

<p>目标网站：<a href="http://blog.csdn.net/github_35160620/article/details/53512977">http://blog.csdn.net/github_35160620/article/details/53512977</a></p>

<p>要提取的有效信息：访问的数量</p>

<p><img src="/images/2016-12-8-python-Regular-Expressions-Line-feed/1481152435523.png" alt="Alt text" /></p>

<p>查看网页源代码：</p>

<p><img src="/images/2016-12-8-python-Regular-Expressions-Line-feed/1481152530825.png" alt="Alt text" /></p>

<p>所以，如果我们想提取出访问数量，需要使用的正则表达式中会存在换行：</p>

<pre><code>'''&lt;dt class="item"&gt;(.^?)&lt;/dt&gt;
            &lt;dd class="item_name"&gt;访问'''
</code></pre>

<p>但是这样是不能匹配到结果。而正确的正则表达式是下面这样的：</p>

<pre><code>'&lt;dt class="item"&gt;(.*?)&lt;/dt&gt;\r\n            &lt;dd class="item_name"&gt;访问'
</code></pre>

<blockquote><p>使用转义字符 <code>\r\n</code> 来表示换行。</p></blockquote>

<p>代码：</p>

<pre><code>    def next(self, response):
        pattam_visits = '&lt;dt class="item"&gt;(.*?)&lt;/dt&gt;\r\n            &lt;dd class="item_name"&gt;访问'
        # print('response.body type is ', type(response.body))
        # print('response.body.decode type is ', type(response.body.decode('utf-8', 'ignore')))

        body_data = response.body.decode('utf-8', 'ignore') # .replace(u'\xa9', u'')
        visits = re.compile(pattam_visits).findall(body_data)[0]
        print('当前访问量为：', visits)
        print('-------------------')
        pass
</code></pre>

<blockquote><p><code>compile()</code> 函数的使用方法<a href="http://www.aobosir.com/blog/2016/12/08/python-compile-Regular-Expressions-pattam/">在这里</a>可以了解。</p></blockquote>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Python 008 正则表达式-005 compile模板的使用]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/08/python-compile-Regular-Expressions-pattam/"/>
    <updated>2016-12-08T07:05:09+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/08/python-compile-Regular-Expressions-pattam</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>使用的电脑系统：Windows 10 64位</li>
<li>使用的开发集成环境：PyCharm 2016.1.4</li>
<li>使用的Python的版本：python 2.7.10 和 python 3.5.0</li>
</ul>


<hr />

<h2>compile()函数的用法</h2>

<pre><code class="python">import re
str = 'fdfgdrthxxi--gdfgexxlove--dsdfwesdxxyou--dfgdf'
pattam_str = 'xx(.*?)--'
result = re.compile(pattam_str).findall(str)
print(result)
</code></pre>

<p>运行：</p>

<pre><code>&gt;python learningpython29.py
['i', 'love', 'you']
</code></pre>

<p>解释：</p>

<ul>
<li>其中<code>pattam_str</code> 就是<strong>正则表达式</strong>字符串。</li>
<li><code>str</code> 就是目标字符串</li>
<li><code>result</code> 就是得到的结果</li>
</ul>


<p>代码中的</p>

<pre><code class="python">result = re.compile(pattam_str).findall(str)
print(result)
</code></pre>

<p>等价于：</p>

<pre><code class="python">result = re.findall(pattam_str, str)
</code></pre>

<p>运行输出的结果是一样的。</p>

<hr />
]]></content>
  </entry>
  
</feed>
