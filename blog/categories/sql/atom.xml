<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Sql | AoboSir 的博客]]></title>
  <link href="http://aobojaing.github.io/blog/categories/sql/atom.xml" rel="self"/>
  <link href="http://aobojaing.github.io/"/>
  <updated>2016-10-16T16:51:29+08:00</updated>
  <id>http://aobojaing.github.io/</id>
  <author>
    <name><![CDATA[Aobo Jaing]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SQL 数据库 学习 013 主键的具体定义 设计主键要注意的问题]]></title>
    <link href="http://aobojaing.github.io/blog/2016/10/16/SQL-Learning-013-primary-key-specific-definition-and-attention/"/>
    <updated>2016-10-16T16:50:11+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/10/16/SQL-Learning-013-primary-key-specific-definition-and-attention</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>我的电脑系统：<strong>Windows  10</strong> 64位</li>
<li><strong>SQL Server</strong> 软件版本： <strong>SQL Server 2014 Express</strong></li>
</ul>


<hr />

<h2>主键的具体定义</h2>

<p>能够唯一标识一个事物的一个字段或者多个字段的组合，被称为主键</p>

<hr />

<h2>设计主键要注意的问题</h2>

<ul>
<li>含有主键的表叫做主键表</li>
<li>主键通常都是整数，不建议使用字符串为主键。（如果主键是用于集群式服务（指跨数据库服务，比如：跨行转账），才可以考虑用字符串当主键。）</li>
<li>主键的值通常都不允许 修改，除非本记录被删除</li>
<li>主键不要定义成<code>id</code>，而要定义成<code>表名id</code> 或者 <code>表名_id</code></li>
<li>要用代理主键，不要用业务主键

<ul>
<li>任何一张表，强烈建议不要使用业务含义的字段充当主键，我们通常都是在表中单独添加一个整型的编号充当主键字段。</li>
</ul>
</li>
</ul>


<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL 数据库 学习 012 数据库关系图]]></title>
    <link href="http://aobojaing.github.io/blog/2016/10/16/SQL-Learning-012-database-diagram/"/>
    <updated>2016-10-16T15:47:58+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/10/16/SQL-Learning-012-database-diagram</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>我的电脑系统：<strong>Windows  10</strong> 64位</li>
<li><strong>SQL Server</strong> 软件版本： <strong>SQL Server 2014 Express</strong></li>
</ul>


<hr />

<p>我们现在写一个 多对多关系的表：（这段代码你可以在<a href="http://www.aobosir.com/blog/2016/10/14/SQL-Learning-011-relationship-one-to-one-one-to-many-many-to-many/">这篇博文</a>里面看到它的代码解释。）</p>

<pre><code class="sql">--班级表
create table banji
(
    banji_id int primary key,
    banji_num int not null,
    banji_name nvarchar(100)
)

--教师
create table jiaoshi
(
    jiaoshi_id int primary key,
    jiaoshi_name nvarchar(200)
)

--第三张表：用来模拟班级和教师的关系
create table banji_jiaoshi_mapping
(
    banji_id int constraint fk_banji_id foreign key references banji(bianji_id),
    jiaoshi_id int foreign key references jiaoshi(jiaoshi_id),
    kecheng nvarchar(20),
    constraint pk_banji_id_jiaoshi_id primary key (banji_id, jiaoshi_id, kecheng)

)
</code></pre>

<p>虽然，现在我们已经将表与表之间的关系都建好了。但是我现在怎么才能知道他们之间的关系到底有没有见好啊。
<strong>SQL Server</strong> 为我们提供了另外一个工具：<strong>数据库关系图</strong>。</p>

<p>我们新建一个：</p>

<p><img src="/images/2016-10-16-SQL-Learning-012-database-diagram/1476602645224.png" alt="Alt text" /></p>

<p><img src="/images/2016-10-16-SQL-Learning-012-database-diagram/1476602656133.png" alt="Alt text" /></p>

<p>外键添加到多的一方。</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL 数据库 学习 011 关系、一对一、一对多、多对多]]></title>
    <link href="http://aobojaing.github.io/blog/2016/10/14/SQL-Learning-011-relationship-one-to-one-one-to-many-many-to-many/"/>
    <updated>2016-10-14T21:18:48+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/10/14/SQL-Learning-011-relationship-one-to-one-one-to-many-many-to-many</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>我的电脑系统：<strong>Windows  10</strong> 64位</li>
<li><strong>SQL Server</strong> 软件版本： <strong>SQL Server 2014 Express</strong></li>
</ul>


<hr />

<h2>什么是关系</h2>

<p>定义：</p>

<ul>
<li>表和表之间的联系。</li>
</ul>


<p>实现方式：</p>

<ul>
<li>通过设置不同形式的外键来体现表和表的不同关系。</li>
</ul>


<h2>关系的分类（假设是A表和B表）</h2>

<h2>第一种分类： 一对一  （详述一对一关系及其实现）</h2>

<p> （一对一，几乎不使用。所以，我们就一句话带过。）</p>

<p>一对一的实现：既可以把表A的主键充当表B的外键，也可以把表B的主键充当表A的外键。</p>

<p>一对多 和 多对多 才是我们学习的重点。</p>

<h2>第二种分类：一对多   （详述一对多关系及其实现）</h2>

<p>一对多事怎么实现的？</p>

<p>表A（一）与表B（多）（我们现在希望，表A中的一条记录对应表B中的多条记录）之间要是有关系，就必须要有外键。把表A的主键添加到表B里面，充当表B的外键。</p>

<p>一对多的实现：在多的一方的表里面，添加外键。</p>

<h2>第三种分类：多对多 （详述多对多关系及其实现）</h2>

<p>现实中，什么事物和什么事物之间是多对多的关系？</p>

<p>班级和老师的关系。（一个班级有很多老师上课，一个老师可以去很多班级上课。）</p>

<p>多对多其实就是：一对多 和 多对一 的一个组合。</p>

<p>多对多的实现：多对多 必须要通过单独的一张表来表示。</p>

<ul>
<li>班级是一张表</li>
<li>教师是一张表</li>
<li>班级和教师的关系也是一张表</li>
</ul>


<p>用一个实例来解释 多对多。</p>

<pre><code class="sql">--班级表
create table banji
(
    banji_id int primary key,
    banji_num int not null,
    banji_name nvarchar(100)
)

--教师
create table jiaoshi
(
    jiaoshi_id int primary key,
    jiaoshi_name nvarchar(200)
)

--第三张表：用来模拟班级和教师的关系
create table banji_jiaoshi_mapping
(
    banji_id int constraint fk_banji_id foreign key references banji(bianji_id),
    jiaoshi_id int foreign key references jiaoshi(jiaoshi_id),
    kecheng nvarchar(20),
    constraint pk_banji_id_jiaoshi_id primary key (banji_id, jiaoshi_id, kecheng)

)
</code></pre>

<p>解释代码：</p>

<p>其中<code>banji_id int constraint fk_banji_id foreign key references banji(bianji_id),</code> 代码中的 <code>fk_banji_id</code> 是约束的名字，<code>foreign key references banji(bianji_id)</code> 指的是：当前这个表里面的 <code>banji_id</code> 属性是来自 <code>banji</code> 表的主键 <code>banji_id</code>，也就是说：当前表中的 <code>banji_id</code> 是一个外键（<code>foreign key</code>）。</p>

<p>其中<code>jiaoshi_id int foreign key references jiaoshi(jiaoshi_id),</code>里面，这里没有命名约束的名字，约束的名字可以省略不写，所以这里没有写也没有问题。同理上面那句代码。</p>

<p>其中<code>constraint pk_banji_id_jiaoshi_id primary key (banji_id, jiaoshi_id, kecheng)</code>中的 <code>pk_banji_id_jiaoshi_id</code> 这个是约束的名字。<code>primary key (banji_id, jiaoshi_id, kecheng)</code> 是设置<code>jiaoshi_id</code> 和 <code>banji_id</code>  和 <code>kecheng</code> 三个属性的组合是一个<strong>主键</strong>（<code>primary key</code>）。</p>

<p>现在<strong>执行</strong>，生成了3个表。</p>

<p>现在我们在这3个表里面插入数据。</p>

<p><strong>banji</strong></p>

<p><img src="/images/2016-10-14-SQL-Learning-011-relationship-one-to-one-one-to-many-many-to-many/1476450660605.png" alt="Alt text" /></p>

<p><strong>jiaoshi</strong></p>

<p><img src="/images/2016-10-14-SQL-Learning-011-relationship-one-to-one-one-to-many-many-to-many/1476450683275.png" alt="Alt text" /></p>

<p><strong>banji_jiaoshi_mapping</strong></p>

<p><img src="/images/2016-10-14-SQL-Learning-011-relationship-one-to-one-one-to-many-many-to-many/1476450197120.png" alt="Alt text" /></p>

<p>都不会有错误，说明多对多生成成功。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL 数据库 学习 010 表和约束的区别、check约束、default约束、unique约束、not Null约束]]></title>
    <link href="http://aobojaing.github.io/blog/2016/10/13/SQL-Learning-010-differences-tables-contraints-check-default-unique-not-null/"/>
    <updated>2016-10-13T12:40:11+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/10/13/SQL-Learning-010-differences-tables-contraints-check-default-unique-not-null</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>我的电脑系统：<strong>Windows  10</strong> 64位</li>
<li><strong>SQL Server</strong> 软件版本： <strong>SQL Server 2014 Express</strong></li>
</ul>


<hr />

<h2>表和约束的区别</h2>

<ul>
<li>数据库是通过表来解决事物的存储问题的。</li>
<li>数据库是用过约束来解决事物取值的有效性和合法性的问题。</li>
<li>建表的过程就是指定事物属性及其事物属性各种约束的过程。</li>
</ul>


<hr />

<h2>check 约束</h2>

<p>意义：保证事物属性的取值在合法的范围之内。</p>

<p>我们先创建一个表：（建表之前，先确保选中了指定的库）</p>

<p><img src="/images/2016-10-13-SQL-Learning-010-differences-tables-contraints-check-default-unique-not-null/1476251551513.png" alt="Alt text" /></p>

<p>点击 <strong>新建查询</strong> 按钮。输入下面的指令来新建一个带有<code>check</code> 约束的学生表：</p>

<pre><code class="sql">create table student
(
    stu_id int primary key,
    stu_sal int check (stu_sal&gt;=1000 and stu_sal&lt;=8000)
)
</code></pre>

<p>现在，选中，然后点击执行。</p>

<p>现在刷新右侧栏<code>test</code>库的 <strong>表</strong> ，就可以看到刚刚建的学生表：</p>

<p><img src="/images/2016-10-13-SQL-Learning-010-differences-tables-contraints-check-default-unique-not-null/1476251700453.png" alt="Alt text" /></p>

<p>接下来是，向这个表里面插数据：</p>

<pre><code>insert into student values (1, 1000)
insert into student values (2, 10000)
</code></pre>

<blockquote><p>这就是所谓的第4代语言。全都是命令，你不需要知道它里面是如何实现的。这就是第4代编程语言。</p></blockquote>

<p>现在<code>student(2)</code> 的工资已经超出了约束。如果你现在选中这两行命令。点击 <strong>执行</strong>，就会出现错误。</p>

<pre><code>消息 547，级别 16，状态 0，第 8 行
INSERT 语句与 CHECK 约束"CK__student__stu_sal__1A14E395"冲突。该冲突发生于数据库"test"，表"dbo.student", column 'stu_sal'。
语句已终止。
</code></pre>

<p>这就是 <code>check</code> 约束。</p>

<hr />

<h2>default约束</h2>

<p>意义：保证事物的属性一定会有一个值。</p>

<p>我们还是写 学生表。我们先把上面新建的学生表先删除掉。</p>

<pre><code class="sql">create table student
(
    stu_id int primary key,
    stu_sal int check (stu_sal&gt;=1000 and stu_sal&lt;=8000),
    stu_sex nchar(1) default ('男') --()可以省略。在数据库中字符串是必须用''括起来的
)
</code></pre>

<p>这里简单的解释一下：<code>''</code> 和 <code>""</code> 在数据库里面有什么区别？</p>

<p><strong>A：</strong> <code>''</code> 就是表示一个字符串；<code>""</code> 就是表示一个数据的名字。（比如：为某一个事物去一个名字，用<code>""</code>。表的名字、约束的名字、列的名字、计算列的名字、临时表的名字。总之，只要是为一个事物取一个名字，就是：<code>""</code>。）</p>

<pre><code class="sql">insert into student(stu_id, stu_sal) values (1, 1000)
insert into student values (2, 6000, '女')
</code></pre>

<p>选中这两行，点击 <strong>执行</strong> 按钮。</p>

<p><img src="/images/2016-10-13-SQL-Learning-010-differences-tables-contraints-check-default-unique-not-null/1476254095140.png" alt="Alt text" /></p>

<blockquote><p><code>insert into student values (3, 2000)</code> 这样的命令是会报错的。因为表里面有3列值，你只输入了2列的数据。所以如果你想要让 <code>stu_sex</code> 使用默认值，必须要要这样写：<code>insert into student(stu_id, stu_sal) values (1, 1000)</code>，指定你赋值的两列。</p></blockquote>

<hr />

<h2>unique（唯一）约束</h2>

<p>意义：它保证了事物的属性的取值不允许重复，但是允许为空。</p>

<p>它都唯一了，那它和主键还有什么区别啊？</p>

<p><code>unique（唯一）约束</code> 和 <code>允许为空</code> 是可以组合使用的。而 <code>主键</code> 和 <code>允许为空</code> 是不能组合使用的。</p>

<p>（<strong>不允许为空</strong>（<code>not null</code>）都可以和<code>unique（唯一）约束</code>、 <code>主键</code>  组合使用。）</p>

<p> 表里的项，如果不设置为 <code>not null</code> ，默认是：<strong>允许为空</strong> 的。</p>

<p>创建表：学生表2</p>

<pre><code class="sql">create table student2
(
    stu_id int primary key,
    stu_sal int check (stu_sal&gt;=1000 and stu_sal&lt;=8000),
    stu_sex nchar(1) default ('男'), --()可以省略。在数据库中字符串是必须用''括起来的
    stu_name nvarchar(200) unique
)
</code></pre>

<p>我们执行下面的指令就会出错。因为 <code>stu_name</code> 项是有唯一约束的：</p>

<pre><code>insert into student2 vaules (1, 2000, '男', '张三')
insert into student2 vaules (2, 4000, '男', '张三')
</code></pre>

<p>我们执行下面的命令不会出错：（因为：<code>unique（唯一）约束</code> 和 <code>允许为空</code> 是可以组合使用的。）</p>

<pre><code class="sql">insert into student2 values (3, 6000, '男', null)
</code></pre>

<p>如果我们执行下面的指令，就会出错：（因为，主键是不允许为空的。）</p>

<pre><code class="sql">insert into student2 values (null, 6000, '女', '王麻子')
</code></pre>

<p>如果现在再插入一个为空的元组，就会出错：（错误时：重复）</p>

<p>（唯一约束不允许重复，但唯一约束允许为空，但是只允许其中有一列为空。）</p>

<pre><code>insert into student2 values (4, 6000, '男', null)
</code></pre>

<hr />

<p><strong>Q：</strong> <code>unique（唯一）约束</code> 是否 允许多列为 <code>空</code>?</p>

<p><strong>A：</strong>
在 <strong>SQL Server</strong> 软件只允许一个 <code>unique</code> 列为空；
<code>Oracle</code> 允许多个 <code>unique</code> 列为空。</p>

<hr />

<h2>如何合理的利用主键和唯一约束建表</h2>

<p>一个比较重要的问题：
<strong>Q：</strong> 唯一约束 和 主键 有什么区别？如何辨别？如何合理的利用主键和唯一约束建表？</p>

<p><strong>A：</strong></p>

<p>我们上网的时候，经常要登录，有些网站使用用户名，有的还可以使用邮箱登录。邮箱或者用户名，是唯一的。但不能使用它来当主键，我们不能使用业务信息当主键，因为用户名和邮箱是可以修改的。主键永远不可以修改。因为主键不但是本表的主键，而可能是其他表的外键，如果主键改变了，那么其他表的外键也要修改。所以，这个唯一键和主键的第一个区别。</p>

<p>第二区别，主键一遍最好使用数字，不要使用字符串。使用数字为主键，查新速度非常快，相比使用字符串。所以不能使用有实际意义的字符串当主键。再说一次：不要使用业务逻辑（虽然它也是不允许重复的，比如用户名和邮箱）当主键，要使用没有实际意义的编号当主键。（如果数据量太大，可能主键里面还需要加一下字母。）</p>

<p>主键最好不直接录入，我们最好使用 <code>identity</code> 关键字，让其自动增长，自动生成主键。（不使用业务逻辑当主键，使用代理主键（就是编号）当主键）</p>

<hr />

<h2>什么是<code>not null</code> 约束 以及 其 <code>not null</code> 约束与 <code>default</code> 约束的异同</h2>

<p>我认为 <code>not null</code>  就是一个约束。它要求用户必须得为该属性赋一个值，否则语法出错！</p>

<p>如果一个字段不写<code>null</code> ，也不写 <code>not null</code> ，则默认是  <code>null</code> ，即默认允许为空，用户可以不给该字段赋值。</p>

<p>如果用户没有为该字段赋值，则该字段的值默认是 <code>null</code>。</p>

<p>要注意 <code>nul</code> 和 <code>default</code> 的区别。</p>

<ul>
<li>相同点：都允许用户不赋值</li>
<li>不同点：<code>null</code> 修饰的字段如果用户不赋值则默认是<code>null</code>；<code>default</code> 修饰的字段如果用户不赋值则默认是<code>default</code> 指定的那个值。</li>
</ul>


<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL 数据库 学习 009 通过SQL命令 建表 和 主外键约束]]></title>
    <link href="http://aobojaing.github.io/blog/2016/10/12/SQL-Learning-009-build-table-and-primary-key-foreign-key-constraints-through-command/"/>
    <updated>2016-10-12T11:15:01+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/10/12/SQL-Learning-009-build-table-and-primary-key-foreign-key-constraints-through-command</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>我的电脑系统：<strong>Windows  10</strong> 64位</li>
<li><strong>SQL Server</strong> 软件版本： <strong>SQL Server 2014 Express</strong></li>
</ul>


<hr />

<p>之前，我们介绍了<a href="http://www.aobosir.com/blog/2016/10/11/SQL-Learning-008-build-tables-and-primary-foreign-key-constraints-with-GUI/">如何使用图形化操作建表和主外键约束</a>。这一节我们来介绍如何使用<strong>命令</strong>来<strong>建表和主外键约束</strong>。</p>

<hr />

<h2>使用命令 建表</h2>

<p><strong>Step 0 . </strong> 先把之前在<a href="http://www.aobosir.com/blog/2016/10/11/SQL-Learning-008-build-tables-and-primary-foreign-key-constraints-with-GUI/">这篇博客</a>里面建的表删除，我们先使用命令重新建。（如果你没有看这篇博客，就不需要做这一步的操作了。）</p>

<p><strong>Step 1 . </strong> 先选中（要建表的）库，然后点击 <strong>新建查询</strong>，输入下面的命令：（先建部门（<code>dept</code>）表，再建员工（<code>emp</code>）表）</p>

<pre><code class="sql">create table dept
(
    dept_id int primary key,
    dept_name nvarchar(100) not null,
    dept_address nvarchar(100)
)
</code></pre>

<p><strong>Step 2 . </strong> 现在点击 对号 图标（分析），看看有没有语法错误。然后点击 <strong>执行(X)</strong> 按钮，来生成表。现在在做出的 <strong>表</strong> 里面右键 ，选择 <strong>刷新</strong> 。现在你就看到了，创建了一个新的表 <code>dept</code> 。</p>

<p><img src="/images/2016-10-12-SQL-Learning-009-build-table-and-primary-key-foreign-key-constraints-through-command/1476239675315.png" alt="Alt text" /></p>

<p><img src="/images/2016-10-12-SQL-Learning-009-build-table-and-primary-key-foreign-key-constraints-through-command/1476239692934.png" alt="Alt text" /></p>

<p>解释：<code>--</code>后面跟注释信息。<strong>SQL</strong> 定义变量和 <strong>C++</strong> 定义变量是反着的。</p>

<p><strong>Step 3 . </strong></p>

<pre><code class="sql">create table emp
( --不能写成{} ，C++才写成}
    emp_id int constraint pk_emp_id_haha primary key,
    emp_name nvarchar(20) not null,
    emp_sex nchar(1),
    dept_id int constraint fk_dept_id_heihei foreign key references dept(dept_id)
)
</code></pre>

<p>解释：
1. 对于<strong>约束</strong>（<code>constraint</code>），要写一个名字（<code>pk_emp_id_haha</code> 和 <code>fk_dept_id_heihei</code> 都是自定义的名字），如果你不写名字，系统会自动给它分配一个名字。
2. <code>primary key</code> 是主键； <code>foreign key</code> 是外键。
3. <code>create table</code> 最后一个字段的后面建议不要写 <code>,</code> （逗号）。</p>

<p>选中这些命令。点击 <code>执行</code> 按钮。并刷新 <strong>表</strong>，<code>emp</code> 表就会出现。</p>

<p><img src="/images/2016-10-12-SQL-Learning-009-build-table-and-primary-key-foreign-key-constraints-through-command/1476240682691.png" alt="Alt text" /></p>

<p><img src="/images/2016-10-12-SQL-Learning-009-build-table-and-primary-key-foreign-key-constraints-through-command/1476240702251.png" alt="Alt text" /></p>

<p><code>PK</code> 指的是 <strong>主键</strong> ；<code>FK</code> 指的是 <code>外键</code>。</p>

<p><img src="/images/2016-10-12-SQL-Learning-009-build-table-and-primary-key-foreign-key-constraints-through-command/1476240725526.png" alt="Alt text" /></p>

<p>下面的是我们刚刚定义的 <code>emp</code> 表的主键和外键的名字：</p>

<p><img src="/images/2016-10-12-SQL-Learning-009-build-table-and-primary-key-foreign-key-constraints-through-command/1476240863958.png" alt="Alt text" /></p>

<p>下面的是我们没有给取名字的 <code>dept</code> 表的主键的默认名字：</p>

<p><img src="/images/2016-10-12-SQL-Learning-009-build-table-and-primary-key-foreign-key-constraints-through-command/1476240944813.png" alt="Alt text" /></p>

<hr />

<p><strong>总结：</strong></p>

<p>使用命令 <code>create table</code> 来建表。</p>

<p><strong>Q：</strong> 什么是约束？
<strong>A：</strong> <strong>主键约束</strong> 和 <strong>外键约束</strong> 的作用：</p>

<ul>
<li>定义

<ul>
<li>对一个表中的属性操作的限制叫做约束。</li>
</ul>
</li>
<li>分类

<ul>
<li>主键约束

<ul>
<li>不允许重复元素 避免了数据的冗余。</li>
</ul>
</li>
<li>外键约束

<ul>
<li>通过外键约束从语法上保证了本事物所关联的其他事物一定是存在的。（就是说：事物与事物之前的关系是通过外键来体现的）</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>你要是感觉命令很难，就多敲，敲一敲就好了。</p>

<hr />
]]></content>
  </entry>
  
</feed>
