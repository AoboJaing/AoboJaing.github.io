<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Python | AoboSir 博客]]></title>
  <link href="http://aobojaing.github.io/tags/python/atom.xml" rel="self"/>
  <link href="http://aobojaing.github.io/"/>
  <updated>2016-12-25T15:14:43+08:00</updated>
  <id>http://aobojaing.github.io/</id>
  <author>
    <name><![CDATA[Aobo Jaing]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning Python 023 类编程]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/01/class-programming-object/"/>
    <updated>2016-12-01T07:03:26+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/01/class-programming-object</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>使用的电脑系统：Windows 10 64位</li>
<li>使用的开发集成环境：PyCharm 2016.1.4</li>
<li>使用的Python的版本：python 3.5.0</li>
</ul>


<hr />

<h1>怎么使用python编写一个 <strong>类</strong></h1>

<p>参考网站：<a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c08/p01_change_string_representation_of_instances.html">Python3-cookbook 类与对象</a></p>

<p>随便编写一个Python类，类里面至少有下面三个函数：</p>

<pre><code class="python">class Pair:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __repr__(self):
        return 'Pair({0.x!r}, {0.y!r})'.format(self)

    def __str__(self):
        return '({0.x!s}, {0.y!s})'.format(self)
</code></pre>

<ul>
<li><code>__init__()</code> 函数就是类的构造函数。</li>
<li><code>__repr__()</code>  和 <code>__str__()</code> 函数 都是用来输出字符串用的。</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; p = Pair(3, 4)
&gt;&gt;&gt; p
Pair(3, 4) # __repr__() output
&gt;&gt;&gt; print(p)
(3, 4) # __str__() output
&gt;&gt;&gt;
</code></pre>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Python 022 调用DOS命令 --- 实例：调用Windows里面的copy命令]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/01/python-DOS-system-windows-Command-Line-os/"/>
    <updated>2016-12-01T05:47:12+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/01/python-DOS-system-windows-Command-Line-os</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>使用的电脑系统：Windows 10 64位</li>
<li>使用的开发集成环境：PyCharm 2016.1.4</li>
<li>使用的Python的版本：python 2.7.10 和 python 3.5.0</li>
</ul>


<hr />

<blockquote><p>本篇博客对 Python2 和 Python3 都适用。</p></blockquote>

<hr />

<h2>实例：调用Windows里面的<code>copy</code>命令</h2>

<p>比如现在，我想把这个路径<code>F:\原文件夹</code>里面的所有文件复制到这个路径<code>F:\目标文件夹</code>里面。可以在<strong>DOS</strong>命令行窗口里面执行：</p>

<pre><code>copy "F:\原文件夹\*" "F:\目标文件夹\"
</code></pre>

<p>所以，我们要使用Python调用DOS命令行工具的步骤就两步：</p>

<ol>
<li>构造命令字符串。</li>
<li>使用<code>os.system()</code>函数执行命令字符串。</li>
</ol>


<hr />

<p>我们使用python调用Windows系统DOS命令行里面的<strong>copy</strong>工具来进行文件的复制。代码如下：</p>

<p>适合在Python3中执行的代码：</p>

<pre><code class="python"># -*- coding: utf-8 -*-

import os

org_folder = r'F:\原文件夹'
res_folder = r'F:\目标文件夹'

# 构造命令字符串
copy_command = 'copy "' + org_folder + r'\*" "' + res_folder + r'\"'
# copy_command = copy_command.decode('utf-8').encode('GB18030')
print(copy_command) # 如果你使用的是Python2，需要将这一行的注释去掉。
# print(copy_command)
# 使用os.system()函数执行命令字符串
os.system(copy_command)
</code></pre>

<p>上面的代码如果在python2中执行，不将第10行的注释去掉的话，会因为字符串编码和解码的不正确问题，导致系统找不到指定的路径。：</p>

<pre><code>copy "F:\鍘熸枃浠跺す\*" "F:\鐩爣鏂囦欢澶筡"
系统找不到指定的路径。
</code></pre>

<hr />

<h2>经验：我发现了两件事：</h2>

<p><strong>第一件事 .</strong> 在<strong>DOS</strong> 里面，执行下面的命令，有的是对的，有的是错的：</p>

<pre><code># Succesfull
copy "F:\原文件夹\*" "F:\目标文件夹\"
# Succesfull
copy "F:\原文件夹\\*" "F:\目标文件夹\\"

# error
copy "F:/原文件夹/*" "F:/目标文件夹/"
# error
copy "F://原文件夹//*" "F://目标文件夹//"
</code></pre>

<p>总结：</p>

<ol>
<li><code>\</code>是一个特殊字符，它不能再字符串中正常的显示，如果必须显示，就这样写：<code>\\</code></li>
<li><strong>DOS</strong> 命令里面指定文件路径时，只能使用<code>\</code>，不能使用<code>/</code> 和 <code>//</code> ，使用这两个都是错的，都会导致 <strong>DOS</strong>找不到指定的文件路径</li>
<li>在<strong>DOS</strong> 命令里面，指定文件路径的 <code>\</code> ，你写成 <code>\\</code> 或者 <code>\\\</code> 或者 <code>\\\\\\</code> &hellip; 对是可以正常执行的，不会出现错误。</li>
</ol>


<hr />

<p><strong>第二件事 .</strong> 同时，我发现：</p>

<p>python 的字符串前面加上<code>r</code>，说明这个字符串是<code>raw string</code>，即无需转义的字符串，意思就是这个字符串里面有什么就是什么。</p>

<p>但是我发现了python的一个bug：</p>

<pre><code class="python"># error
str = r'D:\WorkSpace\test_ws\'
# 经验：就算是在字符串前面加上了 r ，字符串最后一个字符也不能是 /
</code></pre>

<pre><code class="python"># succes
str = r'D:\WorkSpace\test_ws\\'
print(str)
# 输出：D:\WorkSpace\test_ws\\
</code></pre>

<pre><code class="python"># succes,但是不是我们要的结果
str = 'D:\WorkSpace\test_ws\\'
print(str)
# 输出：D:\WorkSpace est_ws\
</code></pre>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Python 021 创建文件夹、创建文件]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/01/python-create-file-create-folder-open/"/>
    <updated>2016-12-01T04:45:53+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/01/python-create-file-create-folder-open</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>使用的电脑系统：Windows 10 64位</li>
<li>使用的开发集成环境：PyCharm 2016.1.4</li>
<li>使用的Python的版本：python 2.7.10 和 python 3.5.0</li>
</ul>


<hr />

<blockquote><p>本篇博客对 Python2 和 Python3 都适用。</p></blockquote>

<h2>Python 创建文件夹</h2>

<p>参考网站：</p>

<ul>
<li><a href="http://www.qttc.net/201209207.html">Python创建目录文件夹</a></li>
<li><a href="http://www.cnblogs.com/zhoujie/archive/2013/04/10/python7.html">python学习笔记（七）——文件和目录操作</a></li>
</ul>


<hr />

<pre><code class="python"># -*- coding: utf-8 -*-

import os

folder_name = '2016-11-27-demo'
root_directory = 'D:/WorkSpace/test_ws/'

os.mkdir(root_directory+folder_name)
</code></pre>

<blockquote><p>注意：如果想要创建的文件夹是已经存在的，那么执行上面的程序会出现下面的错误：<code>FileExistsError: [WinError 183] 当文件已存在时，无法创建该文件。</code></p></blockquote>

<p>所以这段代码容易出现错误：如果文件夹已存在或者文件夹名中有不允许使用的字符时，<code>os.mkdir()</code>函数都会执行失败。所以，这段代码需要进行异常处理：</p>

<p>参考网站：<a href="http://www.runoob.com/python/python-exceptions.html">Python 异常处理</a></p>

<pre><code class="python">try:
    os.mkdir(root_directory+folder_name)
except OSError:
    pass
</code></pre>

<p>这样，在运行程序的时候就不会再出现错误了。但是当你给定的文件名中有非法字符时，创建文件夹是不会成功的，但是程序不会报错。</p>

<h2>Python 创建文件</h2>

<p>参考网站：<a href="https://blog.linuxeye.com/365.html">Python文件处理 open()</a></p>

<p>比如你想在<code>F:\</code>根目录里面创建一个名为 <code>data.txt</code> 文件，你可以这样做：</p>

<pre><code class="python">file_path = r'F:\data.txt'
file = open(file_path, 'w') 
</code></pre>

<p>第二个参数 <code>'w'</code> 也可以写成：<code>'wt'</code>。它们等价。</p>

<p>或者</p>

<p>如果你想创建以指定编码的文件，请参考这篇博客：<a href="http://www.aobosir.com/blog/2016/11/29/python-open-save-file-specify-encoding-utf-8/">写文件时，将其用指定的编码方式保存（比如：UTF-8无BOM编码方式）</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Python 020 pass 的用法]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/01/python-pass/"/>
    <updated>2016-12-01T04:12:13+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/01/python-pass</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>使用的电脑系统：Windows 10 64位</li>
<li>使用的开发集成环境：PyCharm 2016.1.4</li>
<li>使用的Python的版本：python 2.7.10 和 python 3.5.0</li>
</ul>


<hr />

<h2>pass 的用法</h2>

<p>参考网站：<a href="http://www.runoob.com/python/python-pass-statement.html">Python pass 语句</a></p>

<blockquote><p>Python2 和 Python3 中 pass 的用法都是一样的。</p></blockquote>

<p><code>pass</code> 就是一个空语句，没有任何实际意义，作用是保存程序结构的完整性。</p>

<p>因为Python不像C/C++语言那样，定义一个代码块使用 <code>{}</code>。Python是使用<strong>缩进</strong>的形式来表述一个代码块的。</p>

<p>比如说想C语言里面的下面这段代码，如果换成Python，怎么写呢？</p>

<pre><code class="cpp">while(1){
}
</code></pre>

<p>换成Python，这样写：</p>

<pre><code class="python">while True:
    pass
</code></pre>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Python 019 生成器（Generators）和 yield]]></title>
    <link href="http://aobojaing.github.io/blog/2016/11/30/python2-python3-Generators-yield/"/>
    <updated>2016-11-30T23:17:17+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/11/30/python2-python3-Generators-yield</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>使用的电脑系统：Windows 10 64位</li>
<li>使用的开发集成环境：PyCharm 2016.1.4</li>
<li>使用的Python的版本：python 2.7.10 和 python 3.5.0</li>
</ul>


<hr />

<h2>知识点：生成器</h2>

<p><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c04/p03_create_new_iteration_with_generators.html">生成器只能用于迭代操作。</a></p>

<p>一个函数，其中带 <code>yield</code>    关键字的代码，它不会执行，只是记下有这个操作；其他代码正常的执行。而被记下的这些操作会像队列一样存起来，这个“队列”就是 <strong>生成器</strong>，并且会类似于<code>return</code>一样返回。</p>

<p>一个函数的代码里面有 <code>yield</code> 关键字，那么这个函数就是一个<strong>制造生成器的函数</strong>。</p>

<blockquote><p>生成器是Python中的高级特性。我之前学习过，还写了一个博客：<a href="http://blog.csdn.net/github_35160620/article/details/51985596?locationNum=1&amp;fps=1">Learning Python 011 高级特性 2</a></p></blockquote>

<hr />

<h2>Python3 例子</h2>

<pre><code class="python">&gt;&gt;&gt; def f():
...     yield 1
...     yield 2
...     yield 3
...
</code></pre>

<pre><code class="python">&gt;&gt;&gt; g = f()
&gt;&gt;&gt; g
&lt;generator object f at 0x0000023B63151258&gt;
&gt;&gt;&gt; type(g)
&lt;class 'generator'&gt;
&gt;&gt;&gt; next(g)
1
&gt;&gt;&gt; next(g)
2
&gt;&gt;&gt; next(g)
3
&gt;&gt;&gt; next(g)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
&gt;&gt;&gt; list(g)
[]
&gt;&gt;&gt; g = f()
&gt;&gt;&gt; list(g)
[1, 2, 3]
&gt;&gt;&gt; list(g)
[]
&gt;&gt;&gt;
</code></pre>

<hr />

<pre><code class="python">&gt;&gt;&gt; def counter(num):
...     print('Run to the ' + str(num) + ' yield')
...
&gt;&gt;&gt; def f():
...     print('start!')
...     yield counter(1)
...     yield counter(2)
...     yield counter(3)
...     print('Done!')
...
</code></pre>

<pre><code class="python">&gt;&gt;&gt; g = f()
&gt;&gt;&gt; g
&lt;generator object f at 0x000001D4843E1258&gt;
&gt;&gt;&gt; next(g)
start!
Run to the 1 yield
&gt;&gt;&gt; next(g)
Run to the 2 yield
&gt;&gt;&gt; next(g)
Run to the 3 yield
&gt;&gt;&gt; next(g)
Done!
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
&gt;&gt;&gt; list(g)
[]
&gt;&gt;&gt; g = f()
&gt;&gt;&gt; list(g)
start!
Run to the 1 yield
Run to the 2 yield
Run to the 3 yield
Done!
[None, None, None]
&gt;&gt;&gt;
</code></pre>

<hr />

<h2>Python2 实例</h2>

<p>生成器在 python2 的用法和在python3中的用法一样，唯一的区别是：</p>

<ul>
<li>python2 中 可以使用<code>next(g)</code> 或者 <code>g.next()</code>。 这样两个等价</li>
<li>python3 中 只有<code>next(g)</code>，没有<code>g.next()</code>。</li>
</ul>


<hr />

<p>参考网站：<a href="http://wiki.jikexueyuan.com/project/start-learning-python/215.html">生成器</a></p>
]]></content>
  </entry>
  
</feed>
