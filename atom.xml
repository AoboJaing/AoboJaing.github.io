<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[AoboSir 博客]]></title>
  <link href="http://aobojaing.github.io/atom.xml" rel="self"/>
  <link href="http://aobojaing.github.io/"/>
  <updated>2017-02-11T08:22:12+08:00</updated>
  <id>http://aobojaing.github.io/</id>
  <author>
    <name><![CDATA[Aobo Jaing]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Windows 安装OpenNI2]]></title>
    <link href="http://aobojaing.github.io/blog/2017/02/11/Windows-install-OpenNI2/"/>
    <updated>2017-02-11T08:20:56+08:00</updated>
    <id>http://aobojaing.github.io/blog/2017/02/11/Windows-install-OpenNI2</id>
    <content type="html"><![CDATA[<hr />

<h2>下载</h2>

<p>到这个网站下载：<a href="https://structure.io/openni">https://structure.io/openni</a></p>

<p>我们下载 x86的，就是32位的。</p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Windows-install-OpenNI2/1486673648122.png" alt="Alt text" /></p>

<p>下载完成后，解压：</p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Windows-install-OpenNI2/1486673700821.png" alt="Alt text" /></p>

<hr />

<p>双击这个 <code>.msi</code> 文件，开始安装OpenNI2：</p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Windows-install-OpenNI2/1486673740660.png" alt="Alt text" /></p>

<hr />

<p><img src="http://aobojaing.github.io/images/2017-2-11-Windows-install-OpenNI2/1486673618477.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Windows-install-OpenNI2/1486673750699.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Windows-install-OpenNI2/1486673806305.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Windows-install-OpenNI2/1486673820166.png" alt="Alt text" /></p>

<h2></h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows 上 使用CMake-GUI 软件生成 Zlib 和 Png 库的编译文件，然后使用VS2010编译]]></title>
    <link href="http://aobojaing.github.io/blog/2017/02/11/Compile-zlib-and-png-using-CMake-GUI-and-VS2010/"/>
    <updated>2017-02-11T08:08:16+08:00</updated>
    <id>http://aobojaing.github.io/blog/2017/02/11/Compile-zlib-and-png-using-CMake-GUI-and-VS2010</id>
    <content type="html"><![CDATA[<hr />

<p>当我在编译Windows 上编译 PCL源代码的时候，它zlib库和png库的依赖，但是现在我的电脑里面并没有两个库。所以，我们现在就来手动的下载这两个库的源代码，然后亲自编译它们。</p>

<hr />

<p>参考网站：<a href="http://www.voidcn.com/blog/glunoy/article/p-6019106.html">http://www.voidcn.com/blog/glunoy/article/p-6019106.html</a></p>

<p>我现在知道了。png库是依赖于zlib库的。（所以我们需要先编译zlib库）</p>

<p>现在我们电脑里面已经有zlib库了（我也不知道这个库是正有还是假有。不过当我们下面使用CMake-GUI软件生成png库的时候，CMake-GUI软件自动的天添加了zlib库的include文件的路径。所以，现在，我们就姑且认为当前的电脑立里面已经存在zlib库了。（但是我们继续后面的步骤发现，其实电脑里面并没有zlib库。）），但是没有png库，我们现在需要下载源码并编译：</p>

<p>到这里png库官网下载：<a href="http://libpng.sourceforge.net/index.html">http://libpng.sourceforge.net/index.html</a></p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486733756039.png" alt="Alt text" /></p>

<p>下载 <code>libpng16</code>库：</p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486733871091.png" alt="Alt text" /></p>

<p>下载，人下载最多的那个：</p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486733985739.png" alt="Alt text" /></p>

<p>接着是：</p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486734040450.png" alt="Alt text" /></p>

<p>下载后解压。</p>

<p>然后使用CMake-GUI软件生成编译文件：</p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486734198117.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486734205651.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486734211664.png" alt="Alt text" /></p>

<p>出现一个错误：</p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486734240388.png" alt="Alt text" /></p>

<p>错误的原因就是没有找到<code>ZLIB</code>库的链接文件：</p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486734281258.png" alt="Alt text" /></p>

<p>手动添加，这个两个（Debug 和 Release）都填写同一个文件：</p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486734344171.png" alt="Alt text" /></p>

<p>现在再点击 <strong>Configure</strong> 按钮。</p>

<p>没有错误了。但是现在有红色的条目：</p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486734380225.png" alt="Alt text" /></p>

<p>现在再点击一次 <code>Configure</code> 按钮。红色条目消失：</p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486734519705.png" alt="Alt text" /></p>

<p>现在点击 <strong>Generate</strong> 按钮生成编译文件：</p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486734548317.png" alt="Alt text" /></p>

<hr />

<p>现在开始使用VS2010软件编译：</p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486734582464.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486734726006.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486734698502.png" alt="Alt text" /></p>

<p>看来现在不行啊，我需要先下载并编译<code>zlib</code>库，然后在下载并编译<code>png</code>库。这才是正确的步骤。</p>

<hr />

<p>我们现在下载并编译zlib库：</p>

<p>下载zlib库源代码：</p>

<p>下载：<a href="https://sourceforge.net/projects/libpng/files/">https://sourceforge.net/projects/libpng/files/</a></p>

<p>依次的步骤是：</p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486735206889.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486735242472.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486735278358.png" alt="Alt text" /></p>

<p>下载完成后，我使用7-zip软件对其进行了两次解压。</p>

<p>然后使用CMake-GUI软件给它生产编译文件：</p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486735448018.png" alt="Alt text" /></p>

<p>点击 <strong>Configure</strong>按钮进行配置：</p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486735463109.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486735469279.png" alt="Alt text" /></p>

<p>没有出现错误，出现了红色的条目：</p>

<p>我们现在来仔细的看看<strong>INSTALL</strong>条目：</p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486735527480.png" alt="Alt text" /></p>

<p>默认的添加的路径都是<code>C:\Program Files (x86)</code>。我们不能使用这个安装路径，原因是当我们一会在使用VS2010软件编译生成的编译文件的时候，会出现错误的，错误的原因是：没有权限。所以，我需要将这部分INSTALL条目的路径都修改为我们有权限的路径。</p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486735689013.png" alt="Alt text" /></p>

<p>然后在点击 <strong>COnfigure</strong> 按钮。红色条目消失。</p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486735739401.png" alt="Alt text" /></p>

<p>然后在点击 <strong>Generate</strong> 按钮。</p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486735744957.png" alt="Alt text" /></p>

<hr />

<p>现在使用VS2010软甲打开刚刚生成的<code>.sln</code>文件：</p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486735790730.png" alt="Alt text" /></p>

<p>生成：</p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486735812669.png" alt="Alt text" /></p>

<p>很快，不到1秒钟就编译完成了：</p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486735840702.png" alt="Alt text" /></p>

<p>然后对 <strong>INSTALL</strong>项目进行<strong>生成</strong></p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486735888551.png" alt="Alt text" /></p>

<p>也是秒速编译完成：</p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486735908123.png" alt="Alt text" /></p>

<p>生成成功：</p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486735924463.png" alt="Alt text" /></p>

<p>现在，我们将这个生成的文件夹，剪切到<code>C:\third_packages</code>路径里面。（我自己的一个习惯，我喜欢将第三方库放在这个路径下。）</p>

<p>我们还需要将zlib库的png路径添加到系统的环境变量里面。</p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486736460782.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486736449182.png" alt="Alt text" /></p>

<hr />

<p>现在我们可以将下面这两个文件夹给删除了。（一个是zlib的源代码。一个是zlib的编译文件）（当然，我们删除这两个文件夹之前，需要先关闭VS2010软件，因为刚刚VS2010软件一直在使用其中一个文件。CMake-GUI软件可以不用关闭，它不影响。）</p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486736039738.png" alt="Alt text" /></p>

<hr />

<p>接下来，我们来编译 png库：</p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486736190279.png" alt="Alt text" /></p>

<p>修改zlib库（png库依赖于这个库）条目为正确的路径：</p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486736285036.png" alt="Alt text" /></p>

<p>现在点击 <strong>Configure</strong> 按钮。</p>

<p>红色的条目都消失了。现在有用一个点：我们需要注意这个安装路径：</p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486736543109.png" alt="Alt text" /></p>

<p>和zlib库是一样，我们需要给这个安装路径修改为一个我们可以控制的权限的路径。</p>

<p>修改为：</p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486736593446.png" alt="Alt text" /></p>

<p>现在点击 <strong>Configure</strong> 按钮，然后在点击 <strong>Generate</strong> 按钮：搞定</p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486736628850.png" alt="Alt text" /></p>

<hr />

<p>现在使用VS2010软件对生成的编译文件进行编译：</p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486736678641.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486736696702.png" alt="Alt text" /></p>

<p>编译成功，一共没有用了3秒钟：</p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486736728357.png" alt="Alt text" /></p>

<hr />

<p>然后是编译 <strong>INSTALL</strong>项目：</p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486736754817.png" alt="Alt text" /></p>

<p>秒速编译完成：</p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486736783846.png" alt="Alt text" /></p>

<p>一样，我们将得到的文件夹剪切到 <code>C:\third_packages</code>这个路径里面。</p>

<p>然后将<code>png</code>路径添加到环境变量里面：</p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486736889900.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2017-2-11-Compile-zlib-and-png-using-CMake-GUI-and-VS2010/1486736877915.png" alt="Alt text" /></p>

<hr />

<p>最后一步就是清理战场：删除下面两个文件夹：（清理前，需要先关闭VS2010软件）</p>

<hr />

<p>好的，这样，zlib 和 png 这两个库就编译完成了。</p>

<h2>搞定</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决问题：QGLWidget：No Such File or Directory]]></title>
    <link href="http://aobojaing.github.io/blog/2017/02/11/solve-Qt-QGLWidget-No-such-file-or-directory/"/>
    <updated>2017-02-11T08:01:11+08:00</updated>
    <id>http://aobojaing.github.io/blog/2017/02/11/solve-Qt-QGLWidget-No-such-file-or-directory</id>
    <content type="html"><![CDATA[<hr />

<p>参考网站：<a href="%E6%97%A0%E6%B3%95%E6%89%BE%E5%88%B0QT%20OpenGL%20QGLWidget">无法找到QT OpenGL QGLWidget</a></p>

<hr />

<p>现在出现了这个问题：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>QGLWidget: No such file or directory</span></code></pre></td></tr></table></div></figure>


<p><img src="http://aobojaing.github.io/images/2017-2-11-solve-Qt-QGLWidget-No-such-file-or-directory/1486743476422.png" alt="Alt text" /></p>

<h2>解决办法</h2>

<p>在<code>.pro</code>文件里面，添加：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>QT += opengl</span></code></pre></td></tr></table></div></figure>


<p>参考网站：<a href="http://doc.qt.io/qt-5/qtopengl-index.html#details">Qt OpenGL</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决OpenNI问题：XnOS.h：No Such File or Directory]]></title>
    <link href="http://aobojaing.github.io/blog/2017/02/11/solve-openni-XnOS-No-such-file-or-directory/"/>
    <updated>2017-02-11T07:51:03+08:00</updated>
    <id>http://aobojaing.github.io/blog/2017/02/11/solve-openni-XnOS-No-such-file-or-directory</id>
    <content type="html"><![CDATA[<hr />

<p>参考网站：<a href="https://forum.openframeworks.cc/t/ofxopenni-xnopenni-h-no-such-file-or-directory/14286">ofxOpenNI：XnOpenNI.h：没有这样的文件或目录</a></p>

<hr />

<h2>遇到的问题</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>XnOS.h: No such file or directory</span></code></pre></td></tr></table></div></figure>


<p><img src="http://aobojaing.github.io/images/2017-2-11-solve-openni-XnOS-No-such-file-or-directory/1486745884346.png" alt="Alt text" /></p>

<hr />

<h2>解决办法</h2>

<p>查找<code>openni</code>相关的软件包。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aobo@aobo-tp:~$ apt-cache search openni
</span><span class='line'>libopenni-dev - headers for OpenNI 'Natural Interaction' frameworks
</span><span class='line'>libopenni-java - Java framework for sensor-based 'Natural Interaction'
</span><span class='line'>libopenni-sensor-pointclouds-dev - headers for Kinect sensor modules for the OpenNI framework
</span><span class='line'>libopenni-sensor-pointclouds0 - Microsoft Kinect sensor modules for the OpenNI framework
</span><span class='line'>libopenni-sensor-primesense-dev - headers for working with PrimeSense sensor OpenNI modules
</span><span class='line'>libopenni-sensor-primesense0 - PrimeSense sensor modules for the OpenNI framework
</span><span class='line'>libopenni0 - framework for sensor-based 'Natural Interaction'
</span><span class='line'>libopenni2-0 - framework for sensor-based 'Natural Interaction'
</span><span class='line'>libopenni2-dev - headers for OpenNI 'Natural Interaction' frameworks
</span><span class='line'>openni-doc - developer documentation for OpenNI frameworks
</span><span class='line'>openni-utils - debug and test utilities OpenNI framework
</span><span class='line'>openni2-doc - developer documentation for OpenNI frameworks
</span><span class='line'>openni2-utils - debug and test utilities OpenNI2 framework
</span><span class='line'>primesense-nite-nonfree - OpenNI module providing gesture and skeleton tracking
</span><span class='line'>ros-kinetic-depth-image-proc - Contains nodelets for processing depth images such as those produced by OpenNI camera.
</span><span class='line'>ros-kinetic-ecto-openni - Ecto bindings for the openni sensor.
</span><span class='line'>ros-kinetic-freenect-camera - A libfreenect-based ROS driver for the Microsoft Kinect.
</span><span class='line'>ros-kinetic-freenect-launch - Launch files for freenect_camera to produce rectified, registered or disparity images.
</span><span class='line'>ros-kinetic-openni-camera - A ROS driver for OpenNI depth (+ RGB) cameras.
</span><span class='line'>ros-kinetic-openni-launch - Launch files to open an OpenNI device and load all nodelets to convert raw depth/RGB/IR streams to depth images, disparity images, and (registered) point clouds.
</span><span class='line'>ros-kinetic-openni2-camera - Drivers for the Asus Xtion and Primesense Devices.
</span><span class='line'>ros-kinetic-openni2-launch - Launch files to start the openni2_camera drivers using rgbd_launch.</span></code></pre></td></tr></table></div></figure>


<p>安装 <code>libopenni-dev</code> ：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aobo@aobo-tp:~$ sudo apt-get install libopenni-dev 
</span><span class='line'>[sudo] password for aobo: 
</span><span class='line'>Reading package lists... Done
</span><span class='line'>Building dependency tree       
</span><span class='line'>Reading state information... Done
</span><span class='line'>libopenni-dev is already the newest version (1.5.4.0-14).
</span><span class='line'>libopenni-dev set to manually installed.
</span><span class='line'>The following packages were automatically installed and are no longer required:
</span><span class='line'>  linux-headers-4.4.0-36 linux-headers-4.4.0-36-generic linux-headers-4.4.0-57
</span><span class='line'>  linux-headers-4.4.0-57-generic linux-image-4.4.0-36-generic
</span><span class='line'>  linux-image-4.4.0-57-generic linux-image-extra-4.4.0-36-generic
</span><span class='line'>  linux-image-extra-4.4.0-57-generic
</span><span class='line'>Use 'sudo apt autoremove' to remove them.
</span><span class='line'>0 upgraded, 0 newly installed, 0 to remove and 140 not upgraded.
</span><span class='line'>aobo@aobo-tp:~$ </span></code></pre></td></tr></table></div></figure>


<p>检测安装路径：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aobo@aobo-tp:~$ dpkg -L libopenni-dev
</span><span class='line'>/.
</span><span class='line'>/usr
</span><span class='line'>/usr/share
</span><span class='line'>/usr/share/doc
</span><span class='line'>/usr/share/doc/libopenni-dev
</span><span class='line'>/usr/share/doc/libopenni-dev/copyright
</span><span class='line'>/usr/include
</span><span class='line'>/usr/include/ni
</span><span class='line'>/usr/include/ni/XnEnumerationErrors.h
</span><span class='line'>/usr/include/ni/Linux-Powerpc
</span><span class='line'>/usr/include/ni/Linux-Powerpc/XnPlatformLinux-Powerpc.h
</span><span class='line'>/usr/include/ni/XnProfiling.h
</span><span class='line'>/usr/include/ni/XnCppWrapper.h
</span><span class='line'>/usr/include/ni/XnStack.h
</span><span class='line'>/usr/include/ni/XnModuleInterface.h
</span><span class='line'>/usr/include/ni/XnDump.h
</span><span class='line'>/usr/include/ni/XnGeneralBuffer.h
</span><span class='line'>/usr/include/ni/XnInternalDefs.h
</span><span class='line'>/usr/include/ni/XnOpenNI.h
</span><span class='line'>/usr/include/ni/XnStringsHashT.h
</span><span class='line'>/usr/include/ni/XnOS.h
</span><span class='line'>/usr/include/ni/XnMacros.h
</span><span class='line'>/usr/include/ni/XnModuleCppInterface.h
</span><span class='line'>/usr/include/ni/XnBaseNode.h
</span><span class='line'>/usr/include/ni/XnDataTypes.h
</span><span class='line'>/usr/include/ni/XnFPSCalculator.h
</span><span class='line'>/usr/include/ni/XnCodecIDs.h
</span><span class='line'>/usr/include/ni/XnPropNames.h
</span><span class='line'>/usr/include/ni/XnUtils.h
</span><span class='line'>/usr/include/ni/XnOSStrings.h
</span><span class='line'>/usr/include/ni/XnUSB.h
</span><span class='line'>/usr/include/ni/XnCyclicQueueT.h
</span><span class='line'>/usr/include/ni/XnLicensing.h
</span><span class='line'>/usr/include/ni/XnQueue.h
</span><span class='line'>/usr/include/ni/XnArray.h
</span><span class='line'>/usr/include/ni/XnStackT.h
</span><span class='line'>/usr/include/ni/XnModuleCppRegistratration.h
</span><span class='line'>/usr/include/ni/XnCallback.h
</span><span class='line'>/usr/include/ni/XnDerivedCast.h
</span><span class='line'>/usr/include/ni/XnDumpWriters.h
</span><span class='line'>/usr/include/ni/XnHash.h
</span><span class='line'>/usr/include/ni/XnOSMemory.h
</span><span class='line'>/usr/include/ni/XnModuleCFunctions.h
</span><span class='line'>/usr/include/ni/XnStatusCodes.h
</span><span class='line'>/usr/include/ni/XnPrdNodeInfoList.h
</span><span class='line'>/usr/include/ni/Linux-Mips
</span><span class='line'>/usr/include/ni/Linux-Mips/XnPlatformLinux-Mips.h
</span><span class='line'>/usr/include/ni/XnStringsHash.h
</span><span class='line'>/usr/include/ni/XnLog.h
</span><span class='line'>/usr/include/ni/XnBitSet.h
</span><span class='line'>/usr/include/ni/XnTypes.h
</span><span class='line'>/usr/include/ni/XnThreadSafeQueue.h
</span><span class='line'>/usr/include/ni/XnStatusRegister.h
</span><span class='line'>/usr/include/ni/XnVersion.h
</span><span class='line'>/usr/include/ni/XnAlgorithms.h
</span><span class='line'>/usr/include/ni/XnPlatform.h
</span><span class='line'>/usr/include/ni/XnEventT.h
</span><span class='line'>/usr/include/ni/Linux-AArch64
</span><span class='line'>/usr/include/ni/Linux-AArch64/XnPlatformLinux-AArch64.h
</span><span class='line'>/usr/include/ni/Linux-x86
</span><span class='line'>/usr/include/ni/Linux-x86/XnOSLinux-x86.h
</span><span class='line'>/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h
</span><span class='line'>/usr/include/ni/XnPrdNode.h
</span><span class='line'>/usr/include/ni/MacOSX
</span><span class='line'>/usr/include/ni/MacOSX/XnPlatformMacOSX.h
</span><span class='line'>/usr/include/ni/XnEvent.h
</span><span class='line'>/usr/include/ni/IXnNodeAllocator.h
</span><span class='line'>/usr/include/ni/XnListT.h
</span><span class='line'>/usr/include/ni/XnContext.h
</span><span class='line'>/usr/include/ni/XnPrdNodeInfo.h
</span><span class='line'>/usr/include/ni/XnOSCpp.h
</span><span class='line'>/usr/include/ni/XnCyclicStackT.h
</span><span class='line'>/usr/include/ni/XnQueueT.h
</span><span class='line'>/usr/include/ni/XnList.h
</span><span class='line'>/usr/include/ni/XnStatus.h
</span><span class='line'>/usr/include/ni/XnNodeAllocator.h
</span><span class='line'>/usr/include/ni/XnLogTypes.h
</span><span class='line'>/usr/include/ni/Linux-Arm
</span><span class='line'>/usr/include/ni/Linux-Arm/XnPlatformLinux-Arm.h
</span><span class='line'>/usr/include/ni/XnQueries.h
</span><span class='line'>/usr/include/ni/XnLogWriterBase.h
</span><span class='line'>/usr/include/ni/XnNode.h
</span><span class='line'>/usr/include/ni/XnScheduler.h
</span><span class='line'>/usr/include/ni/XnUSBDevice.h
</span><span class='line'>/usr/include/ni/XnHashT.h
</span><span class='line'>/usr/lib
</span><span class='line'>/usr/lib/pkgconfig
</span><span class='line'>/usr/lib/pkgconfig/libopenni.pc
</span><span class='line'>/usr/share/doc/libopenni-dev/changelog.Debian.gz
</span><span class='line'>/usr/lib/libnimCodecs.so
</span><span class='line'>/usr/lib/libSample-NiSampleModule.so
</span><span class='line'>/usr/lib/libnimRecorder.so
</span><span class='line'>/usr/lib/libnimMockNodes.so
</span><span class='line'>/usr/lib/libOpenNI.so
</span><span class='line'>/usr/lib/libOpenNI.jni.so
</span><span class='line'>aobo@aobo-tp:~$ 
</span></code></pre></td></tr></table></div></figure>


<p>看一下<code>include</code>路径里面的<code>openni</code>文件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aobo@aobo-tp:~$ cd /usr/include/ni/
</span><span class='line'>aobo@aobo-tp:/usr/include/ni$ ls
</span><span class='line'>IXnNodeAllocator.h  XnCodecIDs.h           XnFPSCalculator.h  XnModuleCFunctions.h          XnPrdNode.h          XnStatus.h
</span><span class='line'>Linux-AArch64       XnContext.h            XnGeneralBuffer.h  XnModuleCppInterface.h        XnPrdNodeInfo.h      XnStatusRegister.h
</span><span class='line'>Linux-Arm           XnCppWrapper.h         XnHash.h           XnModuleCppRegistratration.h  XnPrdNodeInfoList.h  XnStringsHash.h
</span><span class='line'>Linux-Mips          XnCyclicQueueT.h       XnHashT.h          XnModuleInterface.h           XnProfiling.h        XnStringsHashT.h
</span><span class='line'>Linux-Powerpc       XnCyclicStackT.h       XnInternalDefs.h   XnNodeAllocator.h             XnPropNames.h        XnThreadSafeQueue.h
</span><span class='line'>Linux-x86           XnDataTypes.h          XnLicensing.h      XnNode.h                      XnQueries.h          XnTypes.h
</span><span class='line'>MacOSX              XnDerivedCast.h        XnList.h           XnOpenNI.h                    XnQueue.h            XnUSBDevice.h
</span><span class='line'>XnAlgorithms.h      XnDump.h               XnListT.h          XnOSCpp.h                     XnQueueT.h           XnUSB.h
</span><span class='line'>XnArray.h           XnDumpWriters.h        XnLog.h            XnOS.h                        XnScheduler.h        XnUtils.h
</span><span class='line'>XnBaseNode.h        XnEnumerationErrors.h  XnLogTypes.h       XnOSMemory.h                  XnStack.h            XnVersion.h
</span><span class='line'>XnBitSet.h          XnEvent.h              XnLogWriterBase.h  XnOSStrings.h                 XnStackT.h
</span><span class='line'>XnCallback.h        XnEventT.h             XnMacros.h         XnPlatform.h                  XnStatusCodes.h
</span><span class='line'>aobo@aobo-tp:/usr/include/ni$ 
</span></code></pre></td></tr></table></div></figure>


<p>我们现在查看一下<code>openni</code>安装的头文件和链接文件：</p>

<p>下面这两个命令是检测不到<code>openni</code>的头文件路径的。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aobo@aobo-tp:/usr/include/ni$ pkg-config --cflags openni
</span><span class='line'>Package openni was not found in the pkg-config search path.
</span><span class='line'>Perhaps you should add the directory containing `openni.pc'
</span><span class='line'>to the PKG_CONFIG_PATH environment variable
</span><span class='line'>No package 'openni' found
</span><span class='line'>aobo@aobo-tp:/usr/include/ni$ pkg-config --cflags ni
</span><span class='line'>Package ni was not found in the pkg-config search path.
</span><span class='line'>Perhaps you should add the directory containing `ni.pc'
</span><span class='line'>to the PKG_CONFIG_PATH environment variable
</span><span class='line'>No package 'ni' found
</span><span class='line'>aobo@aobo-tp:/usr/include/ni$ </span></code></pre></td></tr></table></div></figure>


<p>正确的命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aobo@aobo-tp:~$ pkg-config --cflags libopenni
</span><span class='line'>-I/usr/include/ni
</span><span class='line'>aobo@aobo-tp:~$ pkg-config --libs libopenni
</span><span class='line'>-lOpenNI
</span><span class='line'>aobo@aobo-tp:~$ </span></code></pre></td></tr></table></div></figure>


<hr />

<p>我当前的项目是在QT中的，解决办法就是：</p>

<p>在 <code>.pro</code> 文件里面，添加<code>openni</code>的头文件路径和链接文件路径。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INCLUDEPATH += /usr/include/ni
</span><span class='line'>
</span><span class='line'>LIBS += -L/usr/lib -lOpenNI</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PCL 使用 pcl::visualization::PCLVisualizer 类里面的键盘事件方法 如何使用及需要注意的事项]]></title>
    <link href="http://aobojaing.github.io/blog/2017/02/08/pcl-visualization-PCLVisualizer-register-keyboard-callback/"/>
    <updated>2017-02-08T14:16:42+08:00</updated>
    <id>http://aobojaing.github.io/blog/2017/02/08/pcl-visualization-PCLVisualizer-register-keyboard-callback</id>
    <content type="html"><![CDATA[<hr />

<h2>如何使用 pcl 库里面的可视化模块的键盘事件</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;pcl/visualization/pcl_visualizer.h&gt;
</span><span class='line'>
</span><span class='line'>bool iteration_flag = false;
</span><span class='line'>
</span><span class='line'>void keyboardEventOccurred(const pcl::visualization::KeyboardEvent& event, void* nothing){
</span><span class='line'>  if(event.getKeySym() == "space" && event.keyDown()){
</span><span class='line'>      iteration_flag = true;
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int main(){
</span><span class='line'>  pcl::visualization::PCLVisualizer *p;
</span><span class='line'>  p = new pcl::visualization::PCLVisualizer("PCL Windows");
</span><span class='line'>  p-&gt;registerKeyboardCallback(&keyboardEventOccurred, (void*)NULL);
</span><span class='line'>  
</span><span class='line'>  while(iteration_flag != true){
</span><span class='line'>      p-&gt;spinOnce();
</span><span class='line'>  }
</span><span class='line'>  return 0;
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>需要注意的事项：</h2>

<p>第一个：就是，你定义的这个<code>p</code>指针，必须要给它赋值实例化对象：<code>p = new pcl::visualization::PCLVisualizer("PCL Windows");</code>，否则程序编译不会出现错误，但是运行的时候会出现内存异常的运行错误。</p>

<hr />

<p>第二个：就是这个自定义的键盘事件函数了：<code>keyboardEventOccurred()</code>函数。想要让这个函数可以使用，我们不需要再程序中循环的调用<code>p-&gt;spinOnce()</code>方法，程序才能响应我们的这个键盘事件函数。</p>

<hr />

<p>第三个：一个也非常重要：其实上面的代码中，这段程序是不安全的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">while</span><span class="p">(</span><span class="n">iteration_flag</span> <span class="o">!=</span> <span class="nb">true</span><span class="p">){</span>
</span><span class='line'>  <span class="n">p</span><span class="o">-&gt;</span><span class="n">spinOnce</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为如何程序在这个地方一直的执行，如果你可视化的是一个点比较多的点云，那么一段时间后（大约不到5秒钟），你的电脑就会卡得要死！！！！</p>

<p>安全的程序应该是下面这个样子的：（参考网站：<a href="http://pointclouds.org/documentation/tutorials/pcl_visualizer.php#pcl-visualizer">这里</a>）</p>

<p>我们添加延时函数，不让它一直执行<code>spinOnce()</code>方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;boost/thread/thread.hpp&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">iteration_flag</span> <span class="o">!=</span> <span class="nb">true</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">p</span><span class="o">-&gt;</span><span class="n">spinOnce</span> <span class="p">(</span><span class="mi">100</span><span class="p">);</span>
</span><span class='line'>    <span class="n">boost</span><span class="o">::</span><span class="n">this_thread</span><span class="o">::</span><span class="n">sleep</span> <span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">posix_time</span><span class="o">::</span><span class="n">microseconds</span> <span class="p">(</span><span class="mi">100000</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中<a href="http://docs.pointclouds.org/trunk/classpcl_1_1visualization_1_1_p_c_l_visualizer.html#a896556f91ba6b45b12a9543a2b397193"><code>spinOnce()</code>函数</a>里面的<code>100</code>指的是：<strong>How long (in ms) should the visualization loop be allowed to run.</strong></p>

<p><img src="http://aobojaing.github.io/images/2017-2-8-pcl-visualization-PCLVisualizer-register-keyboard-callback/1486533744923.png" alt="Alt text" /></p>

<p>其中的<code>boost::this_thread::sleep (boost::posix_time::microseconds (100000));</code>是延时100000微秒，也就是0.1秒。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PCL 记录时间长度 — TicToc 类]]></title>
    <link href="http://aobojaing.github.io/blog/2017/02/08/pcl-console-time-TicToc/"/>
    <updated>2017-02-08T00:23:41+08:00</updated>
    <id>http://aobojaing.github.io/blog/2017/02/08/pcl-console-time-TicToc</id>
    <content type="html"><![CDATA[<hr />

<p>对于PCL在<strong>Windows</strong>和<strong>Linux</strong>上的环境的搭建请参考我写的这几篇博客。</p>

<hr />

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;pcl/console/time.h&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">pcl</span><span class="o">::</span><span class="n">console</span><span class="o">::</span><span class="n">TicToc</span> <span class="n">tt</span><span class="p">;</span>
</span><span class='line'><span class="n">tt</span><span class="p">.</span><span class="n">tic</span> <span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//需要记录执行多长时间的代码</span>
</span><span class='line'>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;[done, &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">tt</span><span class="p">.</span><span class="n">toc</span> <span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; ms ]&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++ 字符串融合 和 String 与 Int 之间最简单的转换方法]]></title>
    <link href="http://aobojaing.github.io/blog/2017/02/07/cpp-string-fusion-and-int-to-string/"/>
    <updated>2017-02-07T16:40:16+08:00</updated>
    <id>http://aobojaing.github.io/blog/2017/02/07/cpp-string-fusion-and-int-to-string</id>
    <content type="html"><![CDATA[<hr />

<h2>字符串融合</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">str</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">&quot;../pairAlginClass/capture0001&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">&quot;.pcd&quot;</span><span class="p">);</span>
</span><span class='line'><span class="err">或者</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">str</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">&quot;../pairAlginClass/capture0001&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">&quot;.pcd&quot;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>string 与 int 之间最简单的转换方法</h2>

<p>下面的代码，我们需要使用<strong>C++11</strong>，<strong>C++11</strong>里面有<code>std::to_string()</code>方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">str</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">to_string</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>给项目添加<strong>C++11</strong>：</h2>

<p>如果是<code>CMakeLists.txt</code>文件的项目。就在<code>CMakeLists.txt</code>文件中添加：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cmake'><span class='line'><span class="nb">cmake_minimum_required</span><span class="p">(</span><span class="s">VERSION</span> <span class="s">2.8</span><span class="p">)</span>
</span><span class='line'><span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_CXX_STANDARD</span> <span class="s">11</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果是<code>Qt</code>项目的，就在<code>.pro</code>文件里面添加：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cmake'><span class='line'><span class="err">CONFIG</span> <span class="err">+=</span> <span class="err">c++11</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>参考网站：</p>

<ul>
<li><a href="http://stackoverflow.com/questions/5590381/easiest-way-to-convert-int-to-string-in-c">在C ++中将int转换为字符串的最简单的方法</a></li>
<li><a href="http://stackoverflow.com/questions/10851247/how-to-activate-c-11-in-cmake">如何激活C ++ 11在CMake？</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++ 编写类文件的时候，需要注意的问题]]></title>
    <link href="http://aobojaing.github.io/blog/2017/02/07/cpp-cmake-aux_source_directory/"/>
    <updated>2017-02-07T00:13:15+08:00</updated>
    <id>http://aobojaing.github.io/blog/2017/02/07/cpp-cmake-aux_source_directory</id>
    <content type="html"><![CDATA[<hr />

<p>一段时间不编写程序了，基本上都忘记了。今天我来介绍一下：当我们编写类文件的时候，需要注意的问题：</p>

<hr />

<p>比如，我现在写了<code>pairAlgin.hpp</code>文件 和 <code>pairAlgin.cpp</code>文件。</p>

<p>我在<code>pairAlign.hpp</code>文件里面</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">PairAlign</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">PairAlign</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>你会发现：这个文件的名字和里面的类的名字不同。一个是<code>pairAlign</code>的文件名，一个是<code>PairAlign</code>类。这是没有关系的。这个随便。</p>

<hr />

<p>但是，我在使用<code>make</code>命令编译程序的时候，上面没有错误的程序竟然编译不了。</p>

<p>后来，我们知道了问题。其实是我们的<code>CMakeLists.txt</code>文件里面的问题。因为 <code>pairAlgin.hpp</code>文件 和 <code>pairAlgin.cpp</code>文件是放在<code>pairAlgin</code>文件夹里面的。而我却没有将这个文件夹添加的被编译的<code>SRC_LIST</code>变量里面。</p>

<p>我们需要在<code>CMakeLists.txt</code>文件里面的<code>aux_source_directory(. SRC_LIST)</code>下面添加下面这个代码，就可以解决问题：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cmake'><span class='line'><span class="nb">aux_source_directory</span><span class="p">(</span><span class="s">./pairAlign/</span> <span class="s">SRC_LIST</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>现在我们在重新执行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cmake'><span class='line'><span class="err">cmake</span> <span class="err">..</span>
</span><span class='line'><span class="err">make</span>
</span></code></pre></td></tr></table></div></figure>


<p>就可以编译成功了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arduino 005 ADC]]></title>
    <link href="http://aobojaing.github.io/blog/2017/02/05/Arduino-ADC-AREF/"/>
    <updated>2017-02-05T16:38:21+08:00</updated>
    <id>http://aobojaing.github.io/blog/2017/02/05/Arduino-ADC-AREF</id>
    <content type="html"><![CDATA[<hr />

<p>我使用的Arduino板子是：Arduino UNO R3 （<a href="http://www.aobosir.com/blog/2017/02/05/Arduino-UNO-R3-pin-definition/">这里</a> 关于这个板子的引脚介绍。）</p>

<p>参考文献：《Arduino程序设计基础》 3.4 设置ADC参考电压</p>

<hr />

<p>好的，现在我们知道使用<code>analogRead()</code>函数来获取模拟输入口的电压。</p>

<p><img src="http://aobojaing.github.io/images/2017-2-5-Arduino-ADC-AREF/1486283071912.png" alt="Alt text" /></p>

<h2>设置参考电压</h2>

<p>Arduino板子上有一个引脚：<strong>AREF</strong> 引脚，它就是用来连接参考电压的。如果我们没有设置参考电压的话，Arduino会默认使用工作电压作为参考电压。工作电压一般都是5V，所以默认的参考电压也为5V。</p>

<p>如果我们给Arduino的ADC设置参考电压，除了上面我们说的：要在Arduino板子上的<strong>AREF</strong>引脚上给一个参考电压外，我们可以还需要在程序初始化的地方使用<code>analogReference()</code>函数来设置Arduino使用外部参考电压。</p>

<p><img src="http://aobojaing.github.io/images/2017-2-5-Arduino-ADC-AREF/1486283448260.png" alt="Alt text" /></p>

<hr />

<h2>设置参考电压是需要注意</h2>

<p>如果你要设置参考电压，注意：这个电压必须大于0，并且小于当前的工作电压（Arduino的工作电压一般为5V），否则可能会损坏Arduino控制器。</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arduino 000 — Arduino UNO R3 板子引脚定义]]></title>
    <link href="http://aobojaing.github.io/blog/2017/02/05/Arduino-UNO-R3-pin-definition/"/>
    <updated>2017-02-05T15:59:01+08:00</updated>
    <id>http://aobojaing.github.io/blog/2017/02/05/Arduino-UNO-R3-pin-definition</id>
    <content type="html"><![CDATA[<hr />

<p><img src="http://aobojaing.github.io/images/2017-2-5-Arduino-UNO-R3-pin-definition/1486280649241.png" alt="Alt text" /></p>

<p>Arduino UNO R3 板子的官方介绍：<a href="https://www.arduino.cc/en/main/arduinoBoardUno?setlang=cn">https://www.arduino.cc/en/main/arduinoBoardUno?setlang=cn</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++ 的延时函数]]></title>
    <link href="http://aobojaing.github.io/blog/2017/02/05/cpp-sleep/"/>
    <updated>2017-02-05T01:32:23+08:00</updated>
    <id>http://aobojaing.github.io/blog/2017/02/05/cpp-sleep</id>
    <content type="html"><![CDATA[<hr />

<h2>方法一</h2>

<p>在Linux下，我们这样使用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Hello World!&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">//单位是秒</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们使用<code>#include &lt;unistd.h&gt;</code>头文件里面的<code>sleep()</code>函数，给这个函数传入的形参是以秒为单位的正整数。</p>

<hr />

<p>上面的程序执行的效果应该是：以一秒为单位打印<code>Hello World!</code>这个字符串。</p>

<p>或者形参传入以微秒为单位（<code>1000,000</code>微秒 = <code>1</code>秒）的数据：</p>

<p><code>usleep()</code>函数的详细介绍：<a href="http://pubs.opengroup.org/onlinepubs/007908799/xsh/usleep.html">这里</a>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Hello World!&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="n">usleep</span><span class="p">(</span><span class="mi">1000000</span><span class="p">);</span> <span class="c1">//单位是微秒 1000000us = 1s</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>方法三</h2>

<p>C++11里面，你可以这样使用：</p>

<p>我使用的是Qt5，在Qt5里面使用<code>C++11</code>，你需要在项目的<code>.pro</code>文件里面添加下面的这句代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">CONFIG</span> <span class="o">+=</span> <span class="n">c</span><span class="o">++</span><span class="mi">11</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>如果你不在<code>.pro</code>文件中添加上面的这句代码，你就使用不了下面代码里面的<code>std::this_thread</code>。</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;chrono&gt;</span>
</span><span class='line'><span class="cp">#include &lt;thread&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Hello World!&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">this_thread</span><span class="o">::</span><span class="n">sleep_for</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">milliseconds</span><span class="p">(</span><span class="mi">1000</span><span class="p">));</span> <span class="c1">//单位是毫秒</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>方法四</h2>

<p>如果你使用了<code>Boost</code>库，那么你可以使用下面的代码实现延时的功能：</p>

<blockquote><p>Linux系统安装<strong>Boost</strong>库很简单，只需要执行：
<code>
sudo apt-get install libboost-dev
</code></p></blockquote>

<p>我使用的是QT项目，所以我们需要在<code>.pro</code>文件中，添加<code>boost</code>库的头文件路径和链接文件的路径：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">HEADERS</span> <span class="o">+=</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">include</span><span class="o">/</span>
</span><span class='line'>
</span><span class='line'><span class="n">LIBS</span> <span class="o">+=</span> <span class="o">-</span><span class="n">L</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">x86_64</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">gnu</span> <span class="o">-</span><span class="n">lboost_system</span> <span class="o">-</span><span class="n">lboost_thread</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/thread/thread.hpp&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Hello World!&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="n">boost</span><span class="o">::</span><span class="n">this_thread</span><span class="o">::</span><span class="n">sleep</span><span class="p">(</span> <span class="n">boost</span><span class="o">::</span><span class="n">posix_time</span><span class="o">::</span><span class="n">milliseconds</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span> <span class="p">);</span> <span class="c1">//单位是毫秒</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">boost</span><span class="o">::</span><span class="n">this_thread</span><span class="o">::</span><span class="n">sleep</span><span class="p">(</span> <span class="n">boost</span><span class="o">::</span><span class="n">posix_time</span><span class="o">::</span><span class="n">seconds</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">);</span> <span class="c1">//单位是秒</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>参考网站：<a href="http://stackoverflow.com/questions/4184468/sleep-for-milliseconds">Sleep for milliseconds</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++ 构造函数使用`:成员变量(形参)`的形式给类里面成员变量赋值，如果成员变量和形参是指针，那么需要注意的事项]]></title>
    <link href="http://aobojaing.github.io/blog/2017/02/01/solve-cpp-error-constructor-pointers/"/>
    <updated>2017-02-01T00:38:20+08:00</updated>
    <id>http://aobojaing.github.io/blog/2017/02/01/solve-cpp-error-constructor-pointers</id>
    <content type="html"><![CDATA[<hr />

<p>我先把结论列出来：</p>

<p>当成员变量和形参是指针，最好不要使用<code>:成员变量(形参)</code>这样的形式。因为你可以不是进行：<code>成员变量 = 形参</code>这个方向的赋值，你可能是执行：<code>形参 = 成员变量</code>这个方向的赋值。因为前提，它们都是指针嘛。</p>

<hr />

<h2>今天我遇到了这样的一个错误：</h2>

<p>下面的程序，编译是正常通过的，但是运行却不行。（我只是将相关的代码贴了出来）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">PclView</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">PclView</span><span class="p">(</span><span class="n">pcl</span><span class="o">::</span><span class="n">visualization</span><span class="o">::</span><span class="n">PCLVisualizer</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">showCloudsLeft</span><span class="p">(</span><span class="k">const</span> <span class="n">pcl</span><span class="o">::</span><span class="n">PointCloud</span><span class="o">&lt;</span><span class="n">pcl</span><span class="o">::</span><span class="n">PointXYZ</span><span class="o">&gt;::</span><span class="n">Ptr</span> <span class="o">&amp;</span><span class="n">cloud_source</span><span class="p">,</span>
</span><span class='line'>                        <span class="k">const</span> <span class="n">pcl</span><span class="o">::</span><span class="n">PointCloud</span><span class="o">&lt;</span><span class="n">pcl</span><span class="o">::</span><span class="n">PointXYZ</span><span class="o">&gt;::</span><span class="n">Ptr</span> <span class="o">&amp;</span><span class="n">cloud_target</span><span class="p">);</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>    <span class="n">pcl</span><span class="o">::</span><span class="n">visualization</span><span class="o">::</span><span class="n">PCLVisualizer</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">PclView</span><span class="o">::</span><span class="n">PclView</span><span class="p">(</span><span class="n">pcl</span><span class="o">::</span><span class="n">visualization</span><span class="o">::</span><span class="n">PCLVisualizer</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">p</span><span class="p">)</span><span class="o">:</span><span class="n">p</span><span class="p">(</span><span class="n">p</span><span class="p">){</span>
</span><span class='line'>    <span class="n">vp_1</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">vp_2</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// Create a PCLVisualizer object</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">pcl</span><span class="o">::</span><span class="n">visualization</span><span class="o">::</span><span class="n">PCLVisualizer</span> <span class="p">(</span><span class="s">&quot;Pairwise Incremental Registration example&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">p</span><span class="o">-&gt;</span><span class="n">createViewPort</span> <span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="n">vp_1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">p</span><span class="o">-&gt;</span><span class="n">createViewPort</span> <span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="n">vp_2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">p</span><span class="o">-&gt;</span><span class="n">removePointCloud</span> <span class="p">(</span><span class="s">&quot;vp1_target&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">PclView</span><span class="o">::</span><span class="n">showCloudsLeft</span><span class="p">(</span><span class="k">const</span> <span class="n">pcl</span><span class="o">::</span><span class="n">PointCloud</span><span class="o">&lt;</span><span class="n">pcl</span><span class="o">::</span><span class="n">PointXYZ</span><span class="o">&gt;::</span><span class="n">Ptr</span> <span class="o">&amp;</span><span class="n">cloud_source</span><span class="p">,</span>
</span><span class='line'>                             <span class="k">const</span> <span class="n">pcl</span><span class="o">::</span><span class="n">PointCloud</span><span class="o">&lt;</span><span class="n">pcl</span><span class="o">::</span><span class="n">PointXYZ</span><span class="o">&gt;::</span><span class="n">Ptr</span> <span class="o">&amp;</span><span class="n">cloud_target</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">p</span><span class="o">-&gt;</span><span class="n">removePointCloud</span> <span class="p">(</span><span class="s">&quot;vp1_target&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">p</span><span class="o">-&gt;</span><span class="n">removePointCloud</span> <span class="p">(</span><span class="s">&quot;vp1_source&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pcl</span><span class="o">::</span><span class="n">visualization</span><span class="o">::</span><span class="n">PointCloudColorHandlerCustom</span><span class="o">&lt;</span><span class="n">pcl</span><span class="o">::</span><span class="n">PointXYZ</span><span class="o">&gt;</span> <span class="n">tgt_h</span> <span class="p">(</span><span class="n">cloud_target</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">pcl</span><span class="o">::</span><span class="n">visualization</span><span class="o">::</span><span class="n">PointCloudColorHandlerCustom</span><span class="o">&lt;</span><span class="n">pcl</span><span class="o">::</span><span class="n">PointXYZ</span><span class="o">&gt;</span> <span class="n">src_h</span> <span class="p">(</span><span class="n">cloud_source</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">p</span><span class="o">-&gt;</span><span class="n">addPointCloud</span> <span class="p">(</span><span class="n">cloud_target</span><span class="p">,</span> <span class="n">tgt_h</span><span class="p">,</span> <span class="s">&quot;vp1_target&quot;</span><span class="p">,</span> <span class="n">vp_1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">p</span><span class="o">-&gt;</span><span class="n">addPointCloud</span> <span class="p">(</span><span class="n">cloud_source</span><span class="p">,</span> <span class="n">src_h</span><span class="p">,</span> <span class="s">&quot;vp1_source&quot;</span><span class="p">,</span> <span class="n">vp_1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  PCL_INFO (&quot;Press Space to begin the registration.\n&quot;);</span>
</span><span class='line'>  <span class="n">p</span><span class="o">-&gt;</span> <span class="n">spinOnce</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当我们在<code>main.cpp</code>文件中定义了一个上面的类的实例化对象后，然后调用这个类的<code>showCloudsLeft()</code>方法。编译程序没有问题， 但是运行程序就会出现错误。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>  <span class="n">pcl</span><span class="o">::</span><span class="n">visualization</span><span class="o">::</span><span class="n">PCLVisualizer</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span><span class='line'>  <span class="n">PclView</span> <span class="n">viewer</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>  <span class="n">pcl</span><span class="o">::</span><span class="n">PointCloud</span><span class="o">&lt;</span><span class="n">pcl</span><span class="o">::</span><span class="n">PointXYZ</span><span class="o">&gt;::</span><span class="n">Ptr</span> <span class="o">&amp;</span><span class="n">cloud_source</span><span class="p">;</span>
</span><span class='line'>  <span class="n">pcl</span><span class="o">::</span><span class="n">PointCloud</span><span class="o">&lt;</span><span class="n">pcl</span><span class="o">::</span><span class="n">PointXYZ</span><span class="o">&gt;::</span><span class="n">Ptr</span> <span class="o">&amp;</span><span class="n">cloud_target</span><span class="p">;</span>
</span><span class='line'>  <span class="n">viewer</span><span class="p">.</span><span class="n">showCloudsLeft</span><span class="p">(</span><span class="n">cloud_source</span><span class="p">,</span> <span class="n">cloud_target</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的程序运行的时候程序会死在<code>showCloudsLeft()</code>函数里面的<code>p-&gt;removePointCloud ("vp1_target");</code>这段代码。原因是：<code>p</code>指针为空。</p>

<hr />

<h2>正确的写法：</h2>

<p>问题出现在<code>PclView::PclView(pcl::visualization::PCLVisualizer * &amp;p)</code>这个构造函数里面。</p>

<p>正确的写法有两种：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">PclView</span><span class="o">::</span><span class="n">PclView</span><span class="p">(</span><span class="n">pcl</span><span class="o">::</span><span class="n">visualization</span><span class="o">::</span><span class="n">PCLVisualizer</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">p</span><span class="p">){</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>    <span class="n">vp_1</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">vp_2</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// Create a PCLVisualizer object</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">pcl</span><span class="o">::</span><span class="n">visualization</span><span class="o">::</span><span class="n">PCLVisualizer</span> <span class="p">(</span><span class="s">&quot;Pairwise Incremental Registration example&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">createViewPort</span> <span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="n">vp_1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">createViewPort</span> <span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="n">vp_2</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">removePointCloud</span> <span class="p">(</span><span class="s">&quot;vp1_target&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">PclView</span><span class="o">::</span><span class="n">PclView</span><span class="p">(</span><span class="n">pcl</span><span class="o">::</span><span class="n">visualization</span><span class="o">::</span><span class="n">PCLVisualizer</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">p</span><span class="p">)</span><span class="o">:</span><span class="n">p</span><span class="p">(</span><span class="n">p</span><span class="p">){</span>
</span><span class='line'>    <span class="n">vp_1</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">vp_2</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// Create a PCLVisualizer object</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">pcl</span><span class="o">::</span><span class="n">visualization</span><span class="o">::</span><span class="n">PCLVisualizer</span> <span class="p">(</span><span class="s">&quot;Pairwise Incremental Registration example&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">createViewPort</span> <span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="n">vp_1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">createViewPort</span> <span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="n">vp_2</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">removePointCloud</span> <span class="p">(</span><span class="s">&quot;vp1_target&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>现在问题就解决了。</p>

<hr />

<p>但是虽然现在的问题是解决了，但是程序还是有潜在问题的。（现在的程序，还没有达到我们想要的目的。）我们最开始设计这个构造函数，是想将外部通过形参传入的这个指针能够与这个实例化对象里面<code>pcl::visualization::PCLVisualizer * p</code>指针能够指向同一个东西，然后它们两个都可以去改变这个东西。</p>

<p>但是现在我们并没有做到这一点。我们可以使用下面的代码验证：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>  <span class="n">pcl</span><span class="o">::</span><span class="n">visualization</span><span class="o">::</span><span class="n">PCLVisualizer</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span><span class='line'>  <span class="n">PclView</span> <span class="n">viewer</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>  <span class="n">pcl</span><span class="o">::</span><span class="n">PointCloud</span><span class="o">&lt;</span><span class="n">pcl</span><span class="o">::</span><span class="n">PointXYZ</span><span class="o">&gt;::</span><span class="n">Ptr</span> <span class="o">&amp;</span><span class="n">cloud_source</span><span class="p">;</span>
</span><span class='line'>  <span class="n">pcl</span><span class="o">::</span><span class="n">PointCloud</span><span class="o">&lt;</span><span class="n">pcl</span><span class="o">::</span><span class="n">PointXYZ</span><span class="o">&gt;::</span><span class="n">Ptr</span> <span class="o">&amp;</span><span class="n">cloud_target</span><span class="p">;</span>
</span><span class='line'>  <span class="n">viewer</span><span class="p">.</span><span class="n">showCloudsLeft</span><span class="p">(</span><span class="n">cloud_source</span><span class="p">,</span> <span class="n">cloud_target</span><span class="p">);</span>
</span><span class='line'>  <span class="n">p</span><span class="o">-&gt;</span><span class="n">removePointCloud</span> <span class="p">(</span><span class="s">&quot;vp1_target&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>编译程序不会出现什么问题，但是现在运行，程序就会在<code>main()</code>函数里面的<code>p-&gt;removePointCloud ("vp1_target");</code>这段代码出现问题。</p>

<hr />

<p>所以，正真正确的解决办法是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">PclView</span><span class="o">::</span><span class="n">PclView</span><span class="p">(</span><span class="n">pcl</span><span class="o">::</span><span class="n">visualization</span><span class="o">::</span><span class="n">PCLVisualizer</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">p</span><span class="p">){</span>
</span><span class='line'>    <span class="n">vp_1</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">vp_2</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// Create a PCLVisualizer object</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">pcl</span><span class="o">::</span><span class="n">visualization</span><span class="o">::</span><span class="n">PCLVisualizer</span> <span class="p">(</span><span class="s">&quot;Pairwise Incremental Registration example&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">createViewPort</span> <span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="n">vp_1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">createViewPort</span> <span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="n">vp_2</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">removePointCloud</span> <span class="p">(</span><span class="s">&quot;vp1_target&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">p</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在就变成了完美的程序，不会出现问题，也没有潜在的问题。</p>

<hr />

<h2>出现上面的问题的原因</h2>

<p>原因很简单，完美的设计思想是：希望两个指针都指向同一个存储空间，但是，实际上两个指针没有指向一个存储空间，一个指针指向了存储空间，而一个是空指针，所以就出现了错误。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 解决更新软件包的时候出现的 “Low Disk Space” 存储空间不足问题]]></title>
    <link href="http://aobojaing.github.io/blog/2017/01/19/Ubuntu-not-enough-free-disk-space-when-upgrading-low-disk-space/"/>
    <updated>2017-01-19T17:15:24+08:00</updated>
    <id>http://aobojaing.github.io/blog/2017/01/19/Ubuntu-not-enough-free-disk-space-when-upgrading-low-disk-space</id>
    <content type="html"><![CDATA[<hr />

<p>当你的Ubuntu系统的真机或者虚拟机使用时间长了，安装下载的软件包多了。同时你的电脑的存储空间本身又不多。这样，时间一长，就会出现下面的这个问题：</p>

<p><img src="http://aobojaing.github.io/images/2017-1-19-Ubuntu-not-enough-free-disk-space-when-upgrading-low-disk-space/1484814879456.png" alt="Alt text" /></p>

<p>系统提示你：现在系统的存储空间已经快要用没有了。</p>

<blockquote><p>我现在这个情况，我这个Ubuntu系统是安装在一个虚拟机里面的，我只是给它分配了20G的硬盘空间。所以，我使用了大约2个月的时间，就出现了存储空间不足的问题。</p></blockquote>

<p>下面就来解决这个问题。</p>

<p>其实解决这个问题很简单。我们只需要清理一下系统就可以。</p>

<p>参考网站：<a href="http://askubuntu.com/questions/298487/not-enough-free-disk-space-when-upgrading">http://askubuntu.com/questions/298487/not-enough-free-disk-space-when-upgrading</a></p>

<p>你需要安装一个<strong>ubuntu-tweak</strong>软件，具体步骤如下：（如果你的Ubuntu里面有，就可以跳过这一步）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo add-apt-repository ppa:tualatrix/ppa
</span><span class='line'>$ sudo apt-get update
</span><span class='line'>$ sudo apt-get install ubuntu-tweak</span></code></pre></td></tr></table></div></figure>


<p>现在启动ubuntu-tweak软件，进行清除缓存：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ubuntu-tweak</span></code></pre></td></tr></table></div></figure>


<p><img src="http://aobojaing.github.io/images/2017-1-19-Ubuntu-not-enough-free-disk-space-when-upgrading-low-disk-space/1484815204113.png" alt="Alt text" /></p>

<p>然后切换到"Janitor"标签，选择你要清除的Apps、Personal、System的复选框，然后点击"Clean"按钮进行清除。</p>

<p><img src="http://aobojaing.github.io/images/2017-1-19-Ubuntu-not-enough-free-disk-space-when-upgrading-low-disk-space/1484815455240.png" alt="Alt text" /></p>

<p>它这里面删除的是：比如， 我们下载的安装包，删除的就是这些安装包。</p>

<p><img src="http://aobojaing.github.io/images/2017-1-19-Ubuntu-not-enough-free-disk-space-when-upgrading-low-disk-space/1484816863268.png" alt="Alt text" /></p>

<p>Over 2016-5-11 16:38:02</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows 安装 cuteFTP 9.0 并破解]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/26/Windows-install-cuteFTP-and-crack/"/>
    <updated>2016-12-26T01:56:23+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/26/Windows-install-cuteFTP-and-crack</id>
    <content type="html"><![CDATA[<hr />

<p>下载链接：<a href="http://pan.baidu.com/s/1o8m8zcY">http://pan.baidu.com/s/1o8m8zcY</a> 密码：yfvc</p>

<hr />

<p>无需安装， 解压后直接运行 <strong>cuteftppro.exe</strong></p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-Windows-install-cuteFTP-and-crack/1482460633242.png" alt="Alt text" /></p>

<p>cuteFTP9.0破解版 序列号：WWW163263COMCUTEFTPPRO</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-Windows-install-cuteFTP-and-crack/1482460645051.png" alt="Alt text" /></p>

<hr />

<blockquote><p>缺点：每次启动软件，都要输入序列号。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows上使用SecureCRT软件连接Linux终端 — 解决问题；the Remote System Refused the Connection]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/26/SecureCRT-on-windows-connect-to-Linux-solve-remote-system-refused-the-connection/"/>
    <updated>2016-12-26T01:46:45+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/26/SecureCRT-on-windows-connect-to-Linux-solve-remote-system-refused-the-connection</id>
    <content type="html"><![CDATA[<hr />

<h2>正常的情况：</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ifconfig</span></code></pre></td></tr></table></div></figure>


<p><img src="http://aobojaing.github.io/images/2016-12-26-SecureCRT-on-windows-connect-to-Linux-solve-remote-system-refused-the-connection/1482552549436.png" alt="Alt text" /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>whoami</span></code></pre></td></tr></table></div></figure>


<p><img src="http://aobojaing.github.io/images/2016-12-26-SecureCRT-on-windows-connect-to-Linux-solve-remote-system-refused-the-connection/1482552591430.png" alt="Alt text" /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ps -e | grep ssh</span></code></pre></td></tr></table></div></figure>


<p><img src="http://aobojaing.github.io/images/2016-12-26-SecureCRT-on-windows-connect-to-Linux-solve-remote-system-refused-the-connection/1482552750155.png" alt="Alt text" /></p>

<hr />

<p><strong>secureCRT</strong>软件</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-SecureCRT-on-windows-connect-to-Linux-solve-remote-system-refused-the-connection/1482552633225.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-SecureCRT-on-windows-connect-to-Linux-solve-remote-system-refused-the-connection/1482552666663.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-SecureCRT-on-windows-connect-to-Linux-solve-remote-system-refused-the-connection/1482552793582.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-SecureCRT-on-windows-connect-to-Linux-solve-remote-system-refused-the-connection/1482552803114.png" alt="Alt text" /></p>

<hr />

<h2>不正常的情况：The remote system refused the connection.</h2>

<p>如果你遇到这个问题，说明你的Linux系统里面没有安装<code>openssh-server</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install openssh-server</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aobosir@ubuntu:~$ ps -e | grep ssh
</span><span class='line'> 3834 ?        00:00:00 sshd</span></code></pre></td></tr></table></div></figure>


<p>执行完下面的命令，系统会自动注销（Logout）。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh-agent restart
</span><span class='line'># 已经没有这个命令了。替代的方法就是:重启系统或者注销系统。</span></code></pre></td></tr></table></div></figure>


<hr />

<p>现在查看一下，现在就可以进入了正常使用的状态。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aobosir@ubuntu:~$ ps -e | grep ssh
</span><span class='line'> 3834 ?        00:00:00 sshd
</span><span class='line'> 4116 ?        00:00:00 ssh-agent
</span><span class='line'>aobosir@ubuntu:~$ </span></code></pre></td></tr></table></div></figure>


<hr />

<p>现在，我们在Windows系统这段使用<strong>SecureCRT</strong>软件连接这个Linux系统，就可以添加成功了。</p>

<p>连接成功之后，我们现在在<strong>SecureCRT</strong>软件连接的Linux系统终端中再次下面命令来查看当前运行着的<strong>ssh</strong>进程有哪些。（现在，我们已经可以在Windows端的<strong>SecureCRT</strong>软件里面控制Linux端了。）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ps -e | grep ssh</span></code></pre></td></tr></table></div></figure>


<p>查看<strong>Linux</strong>这端的当前进程：（正常你会看大下面的4个。（我也不知道是什么东西））</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-SecureCRT-on-windows-connect-to-Linux-solve-remote-system-refused-the-connection/1482552750155.png" alt="Alt text" /></p>

<h2>搞定</h2>

<hr />

<p>参考网站：<a href="http://blog.csdn.net/lifengxun20121019/article/details/13627757">http://blog.csdn.net/lifengxun20121019/article/details/13627757</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python3 大型网络爬虫实战 004 — Scrapy 大型静态商城网站爬虫项目编写及数据写入数据库实战 — 实战：爬取淘宝]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/26/python3-large-web-crawler-taobao-com-import-to-MySQL-database/"/>
    <updated>2016-12-26T00:56:25+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/26/python3-large-web-crawler-taobao-com-import-to-MySQL-database</id>
    <content type="html"><![CDATA[<hr />

<p>[TOC]</p>

<h2>开发环境</h2>

<ul>
<li>Python第三方库：lxml、Twisted、pywin32、scrapy</li>
<li>Python 版本：python-3.5.0-amd64</li>
<li>PyCharm软件版本：pycharm-professional-2016.1.4</li>
<li>电脑系统：Windows 10 64位</li>
</ul>


<p>如果你还没有搭建好开发环境，请到<a href="http://www.aobosir.com/blog/2016/11/26/python3-large-web-crawler-001-Build-development-environment/">这篇博客</a>。</p>

<hr />

<ul>
<li>本文中的源代码在github这里：<a href="https://github.com/AoboJaing/thirdDemo/">https://github.com/AoboJaing/thirdDemo/</a></li>
</ul>


<p>本篇博文的重点内容：</p>

<ul>
<li>有一些数据，在源码上找不到的，这个时候需要使用 &mdash; 抓包。</li>
<li>Python调用MySQL数据库</li>
</ul>


<hr />

<p>本爬虫项目的目的是：某个关键字在淘宝上搜索到的所有商品，获取所有商品的： 商品名字、商品链接、商品价格、商品的评论。</p>

<hr />

<h2>开始实战</h2>

<p>创建一个爬虫项目</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>scrapy startproject thirdDemo</span></code></pre></td></tr></table></div></figure>


<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-taobao-com-import-to-MySQL-database/1480949909390.png" alt="Alt text" /></p>

<h2>设置防反爬机制（settings.py 文件）</h2>

<p>请参考这篇博客：<a href="http://www.aobosir.com/blog/2016/12/06/python3-large-web-crawler-scrapy-project-Anti-reptile-settings/">给 Scrapy 爬虫项目设置为防反爬</a>。</p>

<h2>分析网站</h2>

<ul>
<li>分析网页界面</li>
<li>分析网址结构</li>
<li>分析网页源代码</li>
</ul>


<p>1 . 分析网页界面：</p>

<p>我们在淘宝网的搜索栏里面搜索关键字，比如“小吃”。它一共会输出100页。</p>

<blockquote><p>可见：100页的搜索结果是淘宝的上限。（最多100页）</p></blockquote>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-taobao-com-import-to-MySQL-database/1480951614377.png" alt="Alt text" /></p>

<p>2 . 分析网址结构：</p>

<p>当我们点击页面进行浏览时，我们发现不同的页面的网址有规律，并且下面是我们找到的规律：</p>

<ol>
<li>红色部分是一模一样的。</li>
<li>删除红色部分，将剩下的组成网址，一样可以正常的浏览原网页。</li>
<li><code>q=</code> 后面是“小吃”的编码形式。</li>
<li><code>s=</code> 后面的数值等于 <code>44*(当前页面-1)</code></li>
</ol>


<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-taobao-com-import-to-MySQL-database/1480951515511.png" alt="Alt text" /></p>

<h1>开始写爬虫程序（taobao.py 文件）</h1>

<h2>创建一个爬虫文件（taobao.py 文件）</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd thirdDemo
</span><span class='line'>scrapy genspider -t basic taobao taobao.com</span></code></pre></td></tr></table></div></figure>


<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-taobao-com-import-to-MySQL-database/1480949962287.png" alt="Alt text" /></p>

<p>使用PyCharm软件开发，使用PyCharm软件打开 <strong>thirdDemo</strong>项目。</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-taobao-com-import-to-MySQL-database/1480950062203.png" alt="Alt text" /></p>

<h2>添加需要使用的存储容器对象（items.py文件）</h2>

<p>先到 <code>items.py</code> 文件里面的<code>ThirddemoItem()</code>函数里面创建存储用到容器（类的实例化对象）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">ThirddemoItem</span><span class="p">(</span><span class="n">scrapy</span><span class="o">.</span><span class="n">Item</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># define the fields for your item here like:</span>
</span><span class='line'>    <span class="c"># name = scrapy.Field()</span>
</span><span class='line'>    <span class="n">title</span> <span class="o">=</span> <span class="n">scrapy</span><span class="o">.</span><span class="n">Field</span><span class="p">()</span>
</span><span class='line'>    <span class="n">link</span> <span class="o">=</span> <span class="n">scrapy</span><span class="o">.</span><span class="n">Field</span><span class="p">()</span>
</span><span class='line'>    <span class="n">price</span> <span class="o">=</span> <span class="n">scrapy</span><span class="o">.</span><span class="n">Field</span><span class="p">()</span>
</span><span class='line'>    <span class="n">comment</span> <span class="o">=</span> <span class="n">scrapy</span><span class="o">.</span><span class="n">Field</span><span class="p">()</span>
</span><span class='line'>    <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-taobao-com-import-to-MySQL-database/1480950185425.png" alt="Alt text" /></p>

<h2>得到搜索关键字对应的所有搜索页面（taobao.py文件）</h2>

<p>在回调函数<code>parse()</code>中，建立一个变量(<code>key</code>)来存储关键词（<code>零食</code>）。然后在使用一个<code>for</code>循环来爬取所有的网页。然后使用<code>scrapy.http</code>里面的<code>Request</code> 来在<code>parse()</code>函数返回（返回一个生成器（yield））一个网页源代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">scrapy</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">scrapy.http</span> <span class="kn">import</span> <span class="n">Request</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TaobaoSpider</span><span class="p">(</span><span class="n">scrapy</span><span class="o">.</span><span class="n">Spider</span><span class="p">):</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;taobao&quot;</span>
</span><span class='line'>    <span class="n">allowed_domains</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;taobao.com&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">start_urls</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;http://taobao.com/&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">parse</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
</span><span class='line'>        <span class="n">key</span> <span class="o">=</span> <span class="s">&#39;小吃&#39;</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">):</span>
</span><span class='line'>            <span class="n">url</span> <span class="o">=</span> <span class="s">&#39;https://s.taobao.com/search?q=&#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;&amp;s=&#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="mi">44</span><span class="o">*</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'>            <span class="k">yield</span> <span class="n">Request</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">url</span><span class="p">,</span> <span class="n">callback</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">page</span><span class="p">)</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">page</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-taobao-com-import-to-MySQL-database/1480952150312.png" alt="Alt text" /></p>

<p>（注意：我们上面通过观察网页已经知道了，搜索得到的页面有100页，但是我们现在是测试阶段，不爬这么多页，上面的代码我们只爬了2页）</p>

<hr />

<blockquote><p>运行一下：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-taobao-com-import-to-MySQL-database/1480952373465.png" alt="Alt text" /></p>

<p>程序没有问题。</p></blockquote>

<hr />

<h2>得到所有商品的id</h2>

<p>我们现在的目标是得到搜索页面中所有商品的链接。</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-taobao-com-import-to-MySQL-database/1480958203181.png" alt="Alt text" /></p>

<p>现在，我们观察搜索页面的源代码，我们找这些商品链接的规律，能否通过什么商品<code>id</code>之类的信息，然后通过商品<code>id</code>来构造出商品的链接网址。</p>

<p>幸运的是：确实可以这么做。</p>

<p>我发现，不管是搜索的商品，不管是在淘宝里、天猫里、天猫超市里，商品的链接网址都可以用下面的格式去构造：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">item</span><span class="o">.</span><span class="n">taobao</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">item</span><span class="o">.</span><span class="n">htm</span><span class="err">?</span><span class="nb">id</span><span class="o">=</span><span class="err">商品的</span><span class="nb">id</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以，现在我们要做的是：先提取商品的id：（使用正则表达式）</p>

<p>对搜索结果的网页随便一个地方右键：<strong>查看网页源代码(V)</strong>：</p>

<blockquote><p>（我发现：通过在浏览器中按<strong>F12</strong> 和 右键来 <strong>查看网页源代码</strong> 这两种查看源代码得到的源代码不一样，后者得到的源代码和爬虫爬取的源代码一致，而前者和爬虫爬取的不一致。）</p>

<p> 所有我们不能使用<strong>Xpath</strong>表达式来用过标签获取商品id了。只能使用<strong>正则表达式</strong>了。</p>

<p>我想可能的原因是：搜索页面可能是动态构造出来的，所以使用<strong>Xpath</strong>表达式是不能对这种网址的源码进行提取信息的。（我瞎想的，不知道是否正确。不过事实其实是：使用<strong>Xpath</strong>表达式是提取不了有效信息的。）</p></blockquote>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-taobao-com-import-to-MySQL-database/1480965022146.png" alt="Alt text" /></p>

<p>然后随便点击进入一个商品的链接网页，在这个网页的网址里面就可以找到这个商品的id：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-taobao-com-import-to-MySQL-database/1480965129366.png" alt="Alt text" /></p>

<p>然后在刚刚打开的源代码中，查找这个id:</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-taobao-com-import-to-MySQL-database/1480965212130.png" alt="Alt text" /></p>

<p>我们通过观察发现，使用<code>"nid":"</code>就可以找到这个搜索结果页面里面所有商品的id：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-taobao-com-import-to-MySQL-database/1480965247629.png" alt="Alt text" /></p>

<blockquote><p>这个页面里面一共是36个商品，没错。</p>

<p><strong>Q：</strong> 你可能发现了，这个搜索网页里面搜索到结果是48个商品，我们得到的是36个，是不是少了？</p>

<p><strong>A：</strong> 没有少，这就是淘宝的营销策略。一个搜索页面一共有48个商品，但是其中有10多个商品是重复的！其中甚至有个商品在这个搜索页面中重复出现了三次，不信，你可以仔细的找找。</p></blockquote>

<p>所以，商品的id可以使用下面的<strong>正则表达式</strong>获取：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="s">&#39;&quot;nid&quot;:&quot;(.*?)&quot;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们在<code>page()</code>方法中得到爬取到的网页源代码的 <code>body</code> 标签里面的所有信息：</p>

<blockquote><p>先声明一点：</p>

<p> 爬取到的网页源代码是：以网页源代码中指定的编码方式编码得到的bytes信息。</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-taobao-com-import-to-MySQL-database/1480954729660.png" alt="Alt text" /></p></blockquote>

<p>我们需要得到对应的解码信息：</p>

<p>参考网站：<a href="http://www.runoob.com/python3/python3-string-decode.html">Python3 bytes.decode()方法</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="n">body</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><code>response.body</code> 它默认是二进制格式，所以我们在使用它之前要给它解码：<code>decode('utf-8')</code>，为了避免出错，我给它传第二个参数：<code>ignore</code>。</p></blockquote>

<p><code>page()</code>函数中的代码现在是下面这个样子的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">page</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
</span><span class='line'>    <span class="n">body</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">,</span><span class="s">&#39;ignore&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">pattam_id</span> <span class="o">=</span> <span class="s">&#39;&quot;nid&quot;:&quot;(.*?)&quot;&#39;</span>
</span><span class='line'>    <span class="n">all_id</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">pattam_id</span><span class="p">)</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">body</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">all_id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>运行试试看：</p>

<p> <img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-taobao-com-import-to-MySQL-database/1480965691671.png" alt="Alt text" /></p></blockquote>

<hr />

<h2>得到所有商品的链接网址</h2>

<p>现在得到了所有商品的ip，现在通过这些ip，构造出所有商品的网址。得到了链接后，就可以去爬这个网页的源代码了：（下面的代码中，在<code>next()</code>方法中将商品的网页网址打印了出来）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">page</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
</span><span class='line'>    <span class="n">body</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">,</span><span class="s">&#39;ignore&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">pattam_id</span> <span class="o">=</span> <span class="s">&#39;&quot;nid&quot;:&quot;(.*?)&quot;&#39;</span>
</span><span class='line'>    <span class="n">all_id</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">pattam_id</span><span class="p">)</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">body</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># print(all_id)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">all_id</span><span class="p">)):</span>
</span><span class='line'>        <span class="n">this_id</span> <span class="o">=</span> <span class="n">all_id</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>        <span class="n">url</span> <span class="o">=</span> <span class="s">&#39;https://item.taobao.com/item.htm?id=&#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">this_id</span><span class="p">)</span>
</span><span class='line'>        <span class="k">yield</span> <span class="n">Request</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">url</span><span class="p">,</span> <span class="n">callback</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">next</span><span class="p">)</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>    <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">next</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'>    <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>运行试试看：（自动的将网址调整到正确的网址上。比如<strong>天猫</strong>或者<strong>天猫超市</strong>之类的子域名）</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-taobao-com-import-to-MySQL-database/1480966453270.png" alt="Alt text" /></p></blockquote>

<hr />

<h1>获取商品的具体信息（taobao.py 文件）</h1>

<h2>获取商品的名字</h2>

<p>现在在<code>next()</code>回调函数中实例化一个开始时在<code>items.py</code>文件里面创建的项目的存储容器对象。然后，我们就可以直接使用它了。</p>

<p>所以现在在 <code>taobao.py</code> 文件的上面添加这个文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">thirdDemo.items</span> <span class="kn">import</span> <span class="n">ThirddemoItem</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在我们要得到商品的标题。</p>

<blockquote><p>我们尽量从源代码中的信息提取，如果源代码中没有的信息，我们在使用抓包的凡是提取。</p></blockquote>

<p>标题是可以直接在源代码中提取的：（观察网页源代码，直接中<code>Xpath</code>表达式）</p>

<p>天猫或者天猫超市的商品的标题可以使用下面的<strong>Xpath</strong>表达式提取：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">title</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&quot;//div[@class=&#39;tb-detail-hd&#39;]/h1/text()&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>淘宝的商品的标题可以使用下面的<strong>Xpath</strong>表达式提取：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">title</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&quot;//h3[@class=&#39;tb-main-title&#39;]/@data-title&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以，这里提取标题，我们需要一个判断语句，判断这个商品的网址链接是天猫的还是淘宝的。</p>

<p>伪码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">if</span> <span class="err">不是淘宝的网址</span><span class="p">:</span>
</span><span class='line'>  <span class="n">title</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&quot;//div[@class=&#39;tb-detail-hd&#39;]/h1/text()&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span> <span class="c"># 天猫或者天猫超市</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>  <span class="n">title</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&quot;//h3[@class=&#39;tb-main-title&#39;]/@data-title&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span> <span class="c"># 淘宝</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们的判断标准就是商品网址的子域名。子域名大致一共有三种：<code>detail.tmall</code>（天猫）、<code>chaoshi.detail.tmall</code>（天猫超市）、<code>item.taobao</code>（淘宝）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">next</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># print(response.url)</span>
</span><span class='line'>    <span class="n">url</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">url</span>
</span><span class='line'>    <span class="n">pattam_url</span> <span class="o">=</span> <span class="s">&#39;https://(.*?).com&#39;</span>
</span><span class='line'>    <span class="n">subdomain</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">pattam_url</span><span class="p">)</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># print(subdomain)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">subdomain</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="s">&#39;item.taobao&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">title</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&quot;//div[@class=&#39;tb-detail-hd&#39;]/h1/text()&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">title</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&quot;//h3[@class=&#39;tb-main-title&#39;]/@data-title&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">num</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">num</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">title</span><span class="p">)</span>
</span><span class='line'>    <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>运行试试看：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-taobao-com-import-to-MySQL-database/1480971492185.png" alt="Alt text" /></p>

<p>有的时候，偶尔会得到几个 <code>[]</code>，这是因为，你爬的太快的，淘宝的服务器没有同意你爬取这个商品的网页。（所以提高防反爬机制，效果会好一些。）</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-taobao-com-import-to-MySQL-database/1480971883848.png" alt="Alt text" /></p></blockquote>

<h2>获取商品的链接网址（taobao.py 文件）</h2>

<p>（直接得到）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="n">item</span><span class="p">[</span><span class="s">&#39;link&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">url</span>
</span></code></pre></td></tr></table></div></figure>


<h2>获取商品的价格信息（原价）（taobao.py 文件）</h2>

<blockquote><p>正常的价格可以在商品网页的源代码里面获取，但是淘宝价（促销价）在商品源代码里面没有，这时就需要通过抓包来获取。</p></blockquote>

<p>淘宝：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-taobao-com-import-to-MySQL-database/1480973755825.png" alt="Alt text" /></p>

<p>天猫：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-taobao-com-import-to-MySQL-database/1480973520884.png" alt="Alt text" /></p>

<p>我们先获取正常的价格。这里也需要分淘宝和天猫，它们获取正常价格的<strong>Xpath</strong>表达式或者<strong>正则表达式</strong>不同。</p>

<blockquote><p>注意：这里总结表达式，通过对商品页面右键 -> <strong>查看网页源代码</strong> 的方式查看源代码。</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">if</span> <span class="n">subdomain</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="s">&#39;item.taobao&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">pattam_price</span> <span class="o">=</span> <span class="s">&#39;&quot;defaultItemPrice&quot;:&quot;(.*?)&quot;&#39;</span>
</span><span class='line'>        <span class="n">price</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">pattam_price</span><span class="p">)</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">,</span> <span class="s">&#39;ignore&#39;</span><span class="p">))</span> <span class="c"># 天猫</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">price</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&quot;//em[@class = &#39;tb-rmb-num&#39;]/text()&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span> <span class="c"># 淘宝</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">price</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>提取商品的累计评论数量：（使用抓包的方式）（taobao.py 文件）</h2>

<p>淘宝：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-taobao-com-import-to-MySQL-database/1480973770234.png" alt="Alt text" /></p>

<p>天猫：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-taobao-com-import-to-MySQL-database/1480973787179.png" alt="Alt text" /></p>

<blockquote><p>可以使用 ： <strong>Fiddler4抓包软件</strong> 或者 浏览器按<strong>F12->Network->Name->Response</strong>查看抓包信息</p></blockquote>

<p>这里，我通过浏览器进行抓包，找到了评论数所在的包：（一个一个的找）</p>

<blockquote><p>淘宝：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-taobao-com-import-to-MySQL-database/1480990614603.png" alt="Alt text" /></p>

<p>观察这个包的网址：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-taobao-com-import-to-MySQL-database/1480990661164.png" alt="Alt text" /></p>

<p>这个网址，我们可以在浏览器中复制，再访问以下：（是可以正常访问的）</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-taobao-com-import-to-MySQL-database/1480990914346.png" alt="Alt text" /></p>

<pre><code>https://rate.taobao.com/detailCommon.htm?auctionNumId=533237707421&amp;userNumId=1990097437&amp;ua=097UW5TcyMNYQwiAiwQRHhBfEF8QXtHcklnMWc%3D%7CUm5Ockt%2BQ3dDfkB8R35Eey0%3D%7CU2xMHDJ7G2AHYg8hAS8XKQcnCVU0Uj5ZJ11zJXM%3D%7CVGhXd1llXGlUYFRpV2tQaVFvWGVHekV8RHtBf0Z%2FQXRKdUx1T3VOYDY%3D%7CVWldfS0TMw8xBD8fIAAubQslcyU%3D%7CVmJCbEIU%7CV2lJGSQEORklGCMYOAI%2FADkZJREuEzMPMgc6GiYSLRAwDDEJNGI0%7CWGFcYUF8XGNDf0Z6WmRcZkZ8R2dZDw%3D%3D&amp;callback=json_tbc_rate_summary
</code></pre>

<p>我发现上面的这个网址可以缩减为：</p>

<pre><code>https://rate.taobao.com/detailCommon.htm?auctionNumId=533237707421
</code></pre>

<pre><code>https://rate.taobao.com/detailCount.do?_ksTS=1480993623725_99&amp;callback=jsonp100&amp;itemId=533237707421
</code></pre>

<p>而这个<code>533237707421</code>就是商品的id。好了，找到这个网址的规律，现在可以> 手动构造这个评论数的网址了：</p>

<p>天猫：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-taobao-com-import-to-MySQL-database/1480993211429.png" alt="Alt text" /></p>

<pre><code>https://dsr-rate.tmall.com/list_dsr_info.htm?itemId=35338957824&amp;spuId=235704813&amp;sellerId=628189716&amp;_ksTS=1480992656788_203&amp;callback=jsonp204
</code></pre>

<p>可以缩减为：</p>

<pre><code>https://dsr-rate.tmall.com/list_dsr_info.htm?itemId=35338957824
</code></pre></blockquote>

<p>最后，我们发现：不管是淘宝还是天猫，都可以使用下面这个构造方式来得到含有正确评论数量的网址：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">dsr</span><span class="o">-</span><span class="n">rate</span><span class="o">.</span><span class="n">tmall</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">list_dsr_info</span><span class="o">.</span><span class="n">htm</span><span class="err">?</span><span class="n">itemId</span><span class="o">=</span><span class="err">商品</span><span class="nb">id</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>注意：使用<code>https://rate.taobao.com/detailCommon.htm?auctionNumId=商品id</code> 这种网址也可以，但是在对天猫商品得到评价数量和网页里面显示的不同。所以我们不使用这个构造方法。</p>

<p> <img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-taobao-com-import-to-MySQL-database/1480994835425.png" alt="Alt text" /></p>

<p>  <img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-taobao-com-import-to-MySQL-database/1480994874358.png" alt="Alt text" /></p></blockquote>

<p>所以通过商品id就可以得到含有评论数量信息的包的网址。现在在<code>next()</code>方法中需要通过商品的URL获取商品的id。</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-taobao-com-import-to-MySQL-database/1480995644556.png" alt="Alt text" /></p>

<p>我们从上面的图中看到：天猫和淘宝的网址不同，所以，从网址中获取商品id的正则表达式也就不同。下面的代码的功能就是从商品的url中提取商品id：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="c"># 获取商品的id（用于构造商品评论数量的抓包网址）</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">subdomain</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="s">&#39;item.taobao&#39;</span><span class="p">:</span>  <span class="c"># 如果不属于淘宝子域名，执行if语句里面的代码</span>
</span><span class='line'>        <span class="n">pattam_id</span> <span class="o">=</span> <span class="s">&#39;id=(.*?)&amp;&#39;</span>
</span><span class='line'>        <span class="n">this_id</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">pattam_id</span><span class="p">)</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">url</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># 这种情况是不能使用正则表达式的，正则表达式不能获取字符串最末端的字符串</span>
</span><span class='line'>        <span class="n">pattam_id</span> <span class="o">=</span> <span class="s">&#39;id=(.*?)$&#39;</span>
</span><span class='line'>        <span class="n">this_id</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">pattam_id</span><span class="p">)</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">url</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">this_id</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>注意：<code>$</code> : 在<strong>正则表达式</strong>里面的作用是：匹配字符串末尾。</p>

<p>举例：当<code>url = 'https://item.taobao.com/item.htm?id=535023141744'</code> 时，这是一个淘宝网站里面的一个商品，现在我们想得到这个网址里面的商品id。</p>

<p>如果你把正则表达式写成这个样子：<code>pattam_id = 'id=(.*?)'</code>，是匹配不到结果的（商品id）。</p>

<p><strong>正则表达式是通过字符串上下文来匹配你需要的信息的，如果只有“上文”，没有“下文”时，对于使用正则表达式匹配字符串末端字符串，需要在正则表达式中使用<code>$</code>。</strong></p></blockquote>

<hr />

<blockquote><p>运行试试看，一切都在掌控之中。</p></blockquote>

<h2>构造具有评论数量信息的包的网址，并获取商品的评论数量</h2>

<p>得到目标抓包网址，获取它的源代码，然后提取评论数量：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">urllib</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="c"># 构造具有评论数量信息的包的网址</span>
</span><span class='line'>    <span class="n">comment_url</span> <span class="o">=</span> <span class="s">&#39;https://dsr-rate.tmall.com/list_dsr_info.htm?itemId=&#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">this_id</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># 这个获取网址源代码的代码永远也不会出现错误，因为这个URL的问题，就算URL是错误的，也可以获取到对应错误网址的源代码。</span>
</span><span class='line'>    <span class="c"># 所以不需要使用 try 和 except urllib.URLError as e 来包装。</span>
</span><span class='line'>    <span class="n">comment_data</span> <span class="o">=</span> <span class="n">urllib</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">comment_url</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">,</span> <span class="s">&#39;ignore&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">pattam_comment</span> <span class="o">=</span> <span class="s">&#39;&quot;rateTotal&quot;:(.*?),&quot;&#39;</span>
</span><span class='line'>    <span class="n">comment</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">pattam_comment</span><span class="p">)</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">comment_data</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># print(comment)</span>
</span><span class='line'>    <span class="n">item</span><span class="p">[</span><span class="s">&#39;comment&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">comment</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在返回<code>item</code>对象：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>   <span class="k">yield</span> <span class="n">item</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-taobao-com-import-to-MySQL-database/1480999254433.png" alt="Alt text" /></p>

<hr />

<p>现在，我们就可以在<code>pipline.py</code>文件里面来对我们得到的这些商品数据进行一些操作了，比如打印到终端或者保存到数据库中。</p>

<p>但在这之前，我们需要设置一下<code>settings.py</code>文件，将下面的代码的注释去掉：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-taobao-com-import-to-MySQL-database/1480999396253.png" alt="Alt text" /></p>

<hr />

<p>在<code>pipline.py</code>文件中对<code>taobao.py</code>爬虫文件返回的<code>item</code>对象进行处理（比如打印到终端，或者保存到数据库中）</p>

<p>将得到的信息打印到终端中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">ThirddemoPipeline</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">process_item</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">,</span> <span class="n">spider</span><span class="p">):</span>
</span><span class='line'>        <span class="n">title</span> <span class="o">=</span> <span class="n">item</span><span class="p">[</span><span class="s">&#39;title&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>        <span class="n">link</span> <span class="o">=</span> <span class="n">item</span><span class="p">[</span><span class="s">&#39;link&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">price</span> <span class="o">=</span> <span class="n">item</span><span class="p">[</span><span class="s">&#39;price&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>        <span class="n">comment</span> <span class="o">=</span> <span class="n">item</span><span class="p">[</span><span class="s">&#39;comment&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39;商品名字&#39;</span><span class="p">,</span> <span class="n">title</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39;商品链接&#39;</span><span class="p">,</span> <span class="n">link</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39;商品正常价格&#39;</span><span class="p">,</span> <span class="n">price</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39;商品评论数量&#39;</span><span class="p">,</span> <span class="n">comment</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39;------------------------------</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">item</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>运行试试看：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-taobao-com-import-to-MySQL-database/1480999663330.png" alt="Alt text" /></p></blockquote>

<hr />

<p>下面是将得到的信息保存到数据库中的操作：</p>

<p>第一件事情就是 启动数据库，启动数据库的代码一般我们是将它写到默认的<code>__init__(self)</code>函数中，这个方法就是最开始做的事情。</p>

<p>要想连接到数据库，首先要有数据库：使用MySQL数据库</p>

<p>在python上要想使用MySqL数据库，需要先安装<code>pymysql</code>库这个模块。</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-taobao-com-import-to-MySQL-database/1480855800994.png" alt="Alt text" /></p>

<p>有打开数据库的函数，就要有关闭数据库的方法。</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-taobao-com-import-to-MySQL-database/1480855810885.png" alt="Alt text" /></p>

<p>现在，我们在<code>process()</code>函数中处理数据，将数据插入到数据库里面。并且加一个异常处理，因为我不希望程序运行的时候会出现错误而终止，并且我也不想</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-taobao-com-import-to-MySQL-database/1480856115248.png" alt="Alt text" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python3 大型网络爬虫实战 003 — Scrapy 大型静态图片网站爬虫项目实战 — 实战：爬取 169美女图片网 高清图片]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/26/python3-large-web-crawler-169bb-com-HD-beautiful-pictures/"/>
    <updated>2016-12-26T00:14:57+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/26/python3-large-web-crawler-169bb-com-HD-beautiful-pictures</id>
    <content type="html"><![CDATA[<hr />

<p>[TOC]</p>

<h2>开发环境</h2>

<ul>
<li>Python第三方库：lxml、Twisted、pywin32、scrapy</li>
<li>Python 版本：python-3.5.0-amd64</li>
<li>PyCharm软件版本：pycharm-professional-2016.1.4</li>
<li>电脑系统：Windows 10 64位</li>
</ul>


<p>如果你还没有搭建好开发环境，请到<a href="http://www.aobosir.com/blog/2016/11/26/python3-large-web-crawler-001-Build-development-environment/">这篇博客</a>。</p>

<hr />

<ul>
<li>本篇博客源代码GitHub里：<a href="https://github.com/AoboJaing/secondDemo/">这里</a>。</li>
</ul>


<p>这一篇博客的目的是爬取 <a href="http://www.169bb.com/">169美女图片网</a> 里面的所有的“<a href="http://www.169bb.com/xiyangmeinv/">西洋美女</a>”的高清图片。</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480187579013.png" alt="Alt text" /></p>

<hr />

<p>爬虫程序设计思路：</p>

<p>1 . 先得到 <a href="http://www.169bb.com/xiyangmeinv/">http://www.169bb.com/xiyangmeinv/</a> 页面里面所有的照片后面对应的URL网页链接（<a href="http://www.169bb.com/xiyangmeinv/2016/1123/37380.html">如</a>）。</p>

<p>2 . 接着在得到的URL链接网页里面得到里面所有高清图片的下载地址，进行下载。</p>

<p>3 . 得到所有 “西洋美女” 网页的页数。</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480187965472.png" alt="Alt text" /></p>

<hr />

<h2>观察网页 和 网页源代码</h2>

<p>1 . 打开 169美女图片网：<a href="http://www.169bb.com/">http://www.169bb.com/</a></p>

<p>2 . 我们的目的是爬取这个站点里面所有 “西洋美女” 的高清图片。所以点击进入“西洋美女” 标签里。（<a href="http://www.169bb.com/xiyangmeinv/%EF%BC%89">http://www.169bb.com/xiyangmeinv/%EF%BC%89</a></p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480188171424.png" alt="Alt text" /></p>

<p>3 . 观察这个页面，在页面最下面，显示了，当前一共311页。</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480188308560.png" alt="Alt text" /></p>

<p>4 . 我们再来观察每页的网址有什么共同点，我们发现：</p>

<ul>
<li>第2页的网站是：<a href="http://www.169bb.com/xiyangmeinv/list_4_2.html">http://www.169bb.com/xiyangmeinv/list_4_2.html</a></li>
<li>第3页的网址是：<a href="http://www.169bb.com/xiyangmeinv/list_4_3.html">http://www.169bb.com/xiyangmeinv/list_4_3.html</a></li>
<li>第1页的网站是：<a href="http://www.169bb.com/xiyangmeinv/list_4_1.html">http://www.169bb.com/xiyangmeinv/list_4_1.html</a></li>
</ul>


<p>这样每页的网址是有规律的，按照这个规律，我们可以推测出“西洋美女” 的第120页的网址就应该是：<a href="http://www.169bb.com/xiyangmeinv/list_4_120.html">http://www.169bb.com/xiyangmeinv/list_4_120.html</a>
。事实的确是这样的。好。</p>

<p>5 . 现在，我们随便点击一个图片，进去看看这个美女的高清图片集。</p>

<p>里面都是高清的图片，并且有很多，并且，不止一页。就我随机点击的这个美女的链接就有11页，并且一页里面有5张左右的高清图片。</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480188754820.png" alt="Alt text" /></p>

<p>6 . 并且它的每页的网址也是有规律的。</p>

<ul>
<li>第2页是：<a href="http://www.169bb.com/xiyangmeinv/2016/1117/37333_2.html">http://www.169bb.com/xiyangmeinv/2016/1117/37333_2.html</a></li>
<li>第3页是：<a href="http://www.169bb.com/xiyangmeinv/2016/1117/37333_3.html">http://www.169bb.com/xiyangmeinv/2016/1117/37333_3.html</a></li>
<li>第1页是：<a href="http://www.169bb.com/xiyangmeinv/2016/1117/37333.html">http://www.169bb.com/xiyangmeinv/2016/1117/37333.html</a></li>
<li>&hellip;</li>
</ul>


<p>但是有的美女的网址里只有一页，比如这个：<a href="http://www.169bb.com/xiyangmeinv/2016/0103/5974.html">http://www.169bb.com/xiyangmeinv/2016/0103/5974.html</a></p>

<hr />

<p>好了，现在这个目标网页，我们已经分析完了。现在就可以编程。</p>

<hr />

<h2>写程序</h2>

<p>源代码GitHub里：<a href="https://github.com/AoboJaing/secondDemo/">这里</a>。</p>

<p>接下来我们为大家讲解大型图片爬虫项目编写实战。</p>

<p><strong>Step 1 . </strong></p>

<p>创建一个Scrapy爬虫项目：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>scrapy startproject secondDemo</span></code></pre></td></tr></table></div></figure>


<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480190424967.png" alt="Alt text" /></p>

<p>创建一个scrapy爬虫文件，我们就在这个文件里面写爬取目标网站里面图片的爬虫程序。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd secondDemo
</span><span class='line'>scrapy genspider -t basic pic_169bb 169bb.com</span></code></pre></td></tr></table></div></figure>


<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480190488955.png" alt="Alt text" /></p>

<hr />

<p>用 <strong>PyCharm</strong> 软件打开刚刚创建的 <code>secondDemo</code> 工程。</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480190609159.png" alt="Alt text" /></p>

<p><strong>Step 2 . </strong> 在 <code>items.py</code> 文件里面的<code>SeconddemoItem()</code>函数里面创建一个对象，这个对象在其他的文件里面会使用到。</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480191956323.png" alt="Alt text" /></p>

<p><strong>Step 3 . </strong> 现在开始爬虫的编写。进入<code>pic_169bb.py</code>文件。</p>

<p>爬虫（<code>pic_169bb.py</code>文件）会自动的先爬首页（<a href="http://169bb.com/">169bb.com</a>），爬完首页之后，会自动的进入<code>parse()</code>回调函数。</p>

<p>这个回调函数中，我们需要写些东西。</p>

<p>先获取所有栏目的名字和地址。</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480192407198.png" alt="Alt text" /></p>

<p>查看源代码：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480192613372.png" alt="Alt text" /></p>

<p>在<code>pic_169bb.py</code> 文件中的 <code>parse()</code>回调函数中添加下面的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="n">urldata</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&quot;/html/body/div[@class=&#39;header&#39;]/div[@class=&#39;hd_nav&#39;]/div[@class=&#39;w1000&#39;]//a/@href&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">urldata</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480196844577.png" alt="Alt text" /></p>

<p>现在运行一下，输出：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480196997090.png" alt="Alt text" /></p>

<hr />

<p>继续进行下一次的爬取：</p>

<p>先导入一个模块</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">scrapy.http</span> <span class="kn">import</span> <span class="n">Request</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>爬取子栏目的第一页，即西洋美女网址的第一页。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="n">xiyangurldata</span> <span class="o">=</span> <span class="n">urldata</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span>  <span class="c"># 获取西洋美女首页网址</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">xiyangurldata</span><span class="p">)</span>
</span><span class='line'>    <span class="k">yield</span> <span class="n">Request</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">xiyangurldata</span><span class="p">,</span> <span class="n">callback</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">next</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">next</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
</span><span class='line'>    <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480198132160.png" alt="Alt text" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">next</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
</span><span class='line'>    <span class="n">page_title_list</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&quot;/html/body//div[@class=&#39;w1000 box03&#39;]/ul[@class=&#39;product01&#39;]//li/a/@alt&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">page_title_list</span><span class="p">)</span>
</span><span class='line'>    <span class="n">page_url_list</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&quot;/html/body//div[@class=&#39;w1000 box03&#39;]/ul[@class=&#39;product01&#39;]//li/a/@href&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">page_url_list</span><span class="p">)</span>
</span><span class='line'>    <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480200182166.png" alt="Alt text" /></p>

<p>运行输出一下：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480200281135.png" alt="Alt text" /></p>

<hr />

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480200630246.png" alt="Alt text" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="n">page_num</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&quot;//span[@class=&#39;pageinfo&#39;]//strong/text()&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span> <span class="c"># 得到西洋美女总页数</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">page_num</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">page_num</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>        <span class="n">page_url</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">url</span> <span class="o">+</span> <span class="s">&#39;list_4_&#39;</span><span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;.html&#39;</span> <span class="c"># 得到西洋美女每一个页面的网址</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">page_url</span><span class="p">)</span>
</span><span class='line'>    <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480201913887.png" alt="Alt text" /></p>

<p>运行输出一下：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480201965248.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480201944373.png" alt="Alt text" /></p>

<hr />

<p>继续下一次：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">page_num</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>        <span class="n">page_url</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">url</span> <span class="o">+</span> <span class="s">&#39;list_4_&#39;</span><span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;.html&#39;</span> <span class="c"># 得到西洋美女每一个页面的网址</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">page_url</span><span class="p">)</span>
</span><span class='line'>        <span class="k">yield</span> <span class="n">Request</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">page_url</span><span class="p">,</span> <span class="n">callback</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">next2</span><span class="p">)</span>
</span><span class='line'>    <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">next2</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
</span><span class='line'>    <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480202151141.png" alt="Alt text" /></p>

<hr />

<p>现在获取每一个美女的网页网址：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">next2</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
</span><span class='line'>    <span class="n">page_title_list</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&quot;/html/body//div[@class=&#39;w1000 box03&#39;]/ul[@class=&#39;product01&#39;]//li/a/@alt&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span>
</span><span class='line'>    <span class="c"># print(page_title_list)</span>
</span><span class='line'>    <span class="n">page_url_list</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&quot;/html/body//div[@class=&#39;w1000 box03&#39;]/ul[@class=&#39;product01&#39;]//li/a/@href&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span>
</span><span class='line'>    <span class="c"># print(page_url_list)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">page_url_list</span><span class="p">)):</span>
</span><span class='line'>        <span class="n">gril_page_url</span> <span class="o">=</span> <span class="n">page_url_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">gril_page_url</span><span class="p">)</span>
</span><span class='line'>        <span class="k">yield</span> <span class="n">Request</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">gril_page_url</span><span class="p">,</span> <span class="n">callback</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">next3</span><span class="p">)</span>
</span><span class='line'>    <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">next3</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
</span><span class='line'>    <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480203708834.png" alt="Alt text" /></p>

<p>运行程序看看：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480203763527.png" alt="Alt text" /></p>

<hr />

<p><code>next3()</code> 这个回调函数的功能就是得到一个美女网页里面的所有的页面的网址。</p>

<p>有的美女的网页里面只有一个页面，有的美女的网页里面有多个页面：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1482656828793.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1482656883815.png" alt="Alt text" /></p>

<p>可以统一解决。</p>

<hr />

<p>测试：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480204459567.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480204419920.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480205200021.png" alt="Alt text" /></p>

<p>输出：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480205472599.png" alt="Alt text" /></p>

<hr />

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1482656683950.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480205432817.png" alt="Alt text" /></p>

<p>同样的回调函数</p>

<p>输出：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480205458465.png" alt="Alt text" /></p>

<hr />

<p>所以，我们可以这样写程序：</p>

<p>当得到的页码为-3，说明这个美女的网页是单页的；如果得到的页码数不等于-3，说明这个美女的网页是多也的。</p>

<p>测试程序：</p>

<p>对于多页面的美女网页网址</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480229614160.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480229673684.png" alt="Alt text" /></p>

<p>运行输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">D</span><span class="p">:</span>\<span class="n">WorkSpace</span>\<span class="n">python_ws</span>\<span class="n">python</span><span class="o">-</span><span class="n">large</span><span class="o">-</span><span class="n">web</span><span class="o">-</span><span class="n">crawler</span>\<span class="n">secondDemo</span><span class="o">&gt;</span><span class="n">scrapy</span> <span class="n">crawl</span> <span class="n">pic_169bb</span> <span class="o">--</span><span class="n">nolog</span>
</span><span class='line'><span class="mi">10</span>
</span><span class='line'><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">www</span><span class="o">.</span><span class="mi">169</span><span class="n">bb</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">xiyangmeinv</span><span class="o">/</span><span class="mi">2016</span><span class="o">/</span><span class="mo">0717</span><span class="o">/</span><span class="mf">36463.</span><span class="n">html</span>
</span><span class='line'><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">www</span><span class="o">.</span><span class="mi">169</span><span class="n">bb</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">xiyangmeinv</span><span class="o">/</span><span class="mi">2016</span><span class="o">/</span><span class="mo">0717</span><span class="o">/</span><span class="mi">36463</span><span class="n">_5</span><span class="o">.</span><span class="n">html</span>
</span><span class='line'><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">www</span><span class="o">.</span><span class="mi">169</span><span class="n">bb</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">xiyangmeinv</span><span class="o">/</span><span class="mi">2016</span><span class="o">/</span><span class="mo">0717</span><span class="o">/</span><span class="mi">36463</span><span class="n">_10</span><span class="o">.</span><span class="n">html</span>
</span><span class='line'><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">www</span><span class="o">.</span><span class="mi">169</span><span class="n">bb</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">xiyangmeinv</span><span class="o">/</span><span class="mi">2016</span><span class="o">/</span><span class="mo">0717</span><span class="o">/</span><span class="mi">36463</span><span class="n">_9</span><span class="o">.</span><span class="n">html</span>
</span><span class='line'><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">www</span><span class="o">.</span><span class="mi">169</span><span class="n">bb</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">xiyangmeinv</span><span class="o">/</span><span class="mi">2016</span><span class="o">/</span><span class="mo">0717</span><span class="o">/</span><span class="mi">36463</span><span class="n">_6</span><span class="o">.</span><span class="n">html</span>
</span><span class='line'><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">www</span><span class="o">.</span><span class="mi">169</span><span class="n">bb</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">xiyangmeinv</span><span class="o">/</span><span class="mi">2016</span><span class="o">/</span><span class="mo">0717</span><span class="o">/</span><span class="mi">36463</span><span class="n">_8</span><span class="o">.</span><span class="n">html</span>
</span><span class='line'><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">www</span><span class="o">.</span><span class="mi">169</span><span class="n">bb</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">xiyangmeinv</span><span class="o">/</span><span class="mi">2016</span><span class="o">/</span><span class="mo">0717</span><span class="o">/</span><span class="mi">36463</span><span class="n">_7</span><span class="o">.</span><span class="n">html</span>
</span><span class='line'><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">www</span><span class="o">.</span><span class="mi">169</span><span class="n">bb</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">xiyangmeinv</span><span class="o">/</span><span class="mi">2016</span><span class="o">/</span><span class="mo">0717</span><span class="o">/</span><span class="mi">36463</span><span class="n">_3</span><span class="o">.</span><span class="n">html</span>
</span><span class='line'><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">www</span><span class="o">.</span><span class="mi">169</span><span class="n">bb</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">xiyangmeinv</span><span class="o">/</span><span class="mi">2016</span><span class="o">/</span><span class="mo">0717</span><span class="o">/</span><span class="mi">36463</span><span class="n">_4</span><span class="o">.</span><span class="n">html</span>
</span><span class='line'><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">www</span><span class="o">.</span><span class="mi">169</span><span class="n">bb</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">xiyangmeinv</span><span class="o">/</span><span class="mi">2016</span><span class="o">/</span><span class="mo">0717</span><span class="o">/</span><span class="mi">36463</span><span class="n">_2</span><span class="o">.</span><span class="n">html</span>
</span><span class='line'>
</span><span class='line'><span class="n">D</span><span class="p">:</span>\<span class="n">WorkSpace</span>\<span class="n">python_ws</span>\<span class="n">python</span><span class="o">-</span><span class="n">large</span><span class="o">-</span><span class="n">web</span><span class="o">-</span><span class="n">crawler</span>\<span class="n">secondDemo</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于单页面的美女网页：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">parse</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>    <span class="k">yield</span> <span class="n">Request</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="s">&#39;http://www.169bb.com/xiyangmeinv/2016/0103/2268.html&#39;</span><span class="p">,</span> <span class="n">callback</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">demo</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>回调函输一样。</p>

<p>运行输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">D</span><span class="p">:</span>\<span class="n">WorkSpace</span>\<span class="n">python_ws</span>\<span class="n">python</span><span class="o">-</span><span class="n">large</span><span class="o">-</span><span class="n">web</span><span class="o">-</span><span class="n">crawler</span>\<span class="n">secondDemo</span><span class="o">&gt;</span><span class="n">scrapy</span> <span class="n">crawl</span> <span class="n">pic_169bb</span> <span class="o">--</span><span class="n">nolog</span>
</span><span class='line'><span class="o">-</span><span class="mi">3</span>
</span><span class='line'><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">www</span><span class="o">.</span><span class="mi">169</span><span class="n">bb</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">xiyangmeinv</span><span class="o">/</span><span class="mi">2016</span><span class="o">/</span><span class="mo">0103</span><span class="o">/</span><span class="mf">2268.</span><span class="n">html</span>
</span><span class='line'>
</span><span class='line'><span class="n">D</span><span class="p">:</span>\<span class="n">WorkSpace</span>\<span class="n">python_ws</span>\<span class="n">python</span><span class="o">-</span><span class="n">large</span><span class="o">-</span><span class="n">web</span><span class="o">-</span><span class="n">crawler</span>\<span class="n">secondDemo</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>成功。</p>

<p>所以现在的爬虫代码应该是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">scrapy</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">scrapy.http</span> <span class="kn">import</span> <span class="n">Request</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Pic169bbSpider</span><span class="p">(</span><span class="n">scrapy</span><span class="o">.</span><span class="n">Spider</span><span class="p">):</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;pic_169bb&quot;</span>
</span><span class='line'>    <span class="n">allowed_domains</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;169bb.com&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">start_urls</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;http://169bb.com/&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">parse</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
</span><span class='line'>        <span class="n">title_list</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&quot;/html/body/div[@class=&#39;header&#39;]/div[@class=&#39;hd_nav&#39;]/div[@class=&#39;w1000&#39;]//a/text()&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span>
</span><span class='line'>        <span class="c"># print(title_list)</span>
</span><span class='line'>        <span class="n">urldata</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&quot;/html/body/div[@class=&#39;header&#39;]/div[@class=&#39;hd_nav&#39;]/div[@class=&#39;w1000&#39;]//a/@href&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span>
</span><span class='line'>        <span class="c">#print(urldata)</span>
</span><span class='line'>        <span class="n">xiyang_title</span> <span class="o">=</span> <span class="n">title_list</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="c"># 获取西洋美女标签的文本内容</span>
</span><span class='line'>        <span class="n">xiyang_urldata</span> <span class="o">=</span> <span class="n">urldata</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span>  <span class="c"># 获取西洋美女首页网址</span>
</span><span class='line'>        <span class="c"># print(xiyang_title, xiyang_urldata)</span>
</span><span class='line'>        <span class="k">yield</span> <span class="n">Request</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">xiyang_urldata</span><span class="p">,</span> <span class="n">callback</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">next</span><span class="p">)</span>
</span><span class='line'>        <span class="c"># yield Request(url=&#39;http://www.169bb.com/xiyangmeinv/2016/0717/36463.html&#39;, callback=self.demo)</span>
</span><span class='line'>        <span class="c"># yield Request(url=&#39;http://www.169bb.com/xiyangmeinv/2016/0103/2268.html&#39;, callback=self.demo)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">next</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
</span><span class='line'>        <span class="n">page_num_str</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&quot;//span[@class=&#39;pageinfo&#39;]//strong/text()&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span> <span class="c"># 得到西洋美女总页数</span>
</span><span class='line'>        <span class="c"># print(page_num_str)</span>
</span><span class='line'>        <span class="c"># print(response.url)</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">page_num_str</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>            <span class="n">page_url</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">url</span> <span class="o">+</span> <span class="s">&#39;list_4_&#39;</span><span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;.html&#39;</span> <span class="c"># 得到西洋美女每一个页面的网址</span>
</span><span class='line'>            <span class="c"># print(page_url)</span>
</span><span class='line'>            <span class="k">yield</span> <span class="n">Request</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">page_url</span><span class="p">,</span> <span class="n">callback</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">next2</span><span class="p">)</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">next2</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
</span><span class='line'>        <span class="n">page_title_list</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&quot;/html/body//div[@class=&#39;w1000 box03&#39;]/ul[@class=&#39;product01&#39;]//li/a/@alt&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span>
</span><span class='line'>        <span class="c"># print(page_title_list)</span>
</span><span class='line'>        <span class="n">page_url_list</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&quot;/html/body//div[@class=&#39;w1000 box03&#39;]/ul[@class=&#39;product01&#39;]//li/a/@href&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span>
</span><span class='line'>        <span class="c"># print(page_url_list)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">page_url_list</span><span class="p">)):</span>
</span><span class='line'>            <span class="n">gril_page_url</span> <span class="o">=</span> <span class="n">page_url_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="c"># 得到西洋美女页面里面每一个美女的网页网址</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="n">gril_page_url</span><span class="p">)</span>
</span><span class='line'>            <span class="k">yield</span> <span class="n">Request</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">gril_page_url</span><span class="p">,</span> <span class="n">callback</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">next3</span><span class="p">)</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">next3</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
</span><span class='line'>        <span class="n">rela_pages_list</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&quot;//div[@class=&#39;dede_pages&#39;]/ul//li/a/text()&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span>
</span><span class='line'>        <span class="n">pages_num</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">rela_pages_list</span><span class="p">)</span> <span class="o">-</span> <span class="mi">3</span>
</span><span class='line'>        <span class="c"># print(pages_num)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">getPic</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">pages_num</span> <span class="o">==</span> <span class="o">-</span><span class="mi">3</span><span class="p">:</span>
</span><span class='line'>            <span class="c"># pages_num = 1</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">pages_num</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>            <span class="n">girl_page_url</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">url</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;.html&#39;</span><span class="p">,</span> <span class="s">&#39;_&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;.html&#39;</span>
</span><span class='line'>            <span class="c"># print(girl_page_url)</span>
</span><span class='line'>            <span class="k">yield</span> <span class="n">Request</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">girl_page_url</span><span class="p">,</span> <span class="n">callback</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">next4</span><span class="p">)</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># def demo(self, response):</span>
</span><span class='line'>    <span class="c"># #     rela_pages_list = response.xpath(&quot;//div[@class=&#39;dede_pages&#39;]/ul//li/a/text()&quot;).extract()</span>
</span><span class='line'>    <span class="c"># #     pages_num = len(rela_pages_list)-3</span>
</span><span class='line'>    <span class="c"># #     print(pages_num)</span>
</span><span class='line'>    <span class="c"># #     pass</span>
</span><span class='line'>    <span class="c">#     rela_pages_list = response.xpath(&quot;//div[@class=&#39;dede_pages&#39;]/ul//li/a/text()&quot;).extract()</span>
</span><span class='line'>    <span class="c">#     pages_num = len(rela_pages_list) - 3</span>
</span><span class='line'>    <span class="c">#     # print(pages_num)</span>
</span><span class='line'>    <span class="c">#     self.getPic(response)</span>
</span><span class='line'>    <span class="c">#     if pages_num == -3:</span>
</span><span class='line'>    <span class="c">#         # pages_num = 1</span>
</span><span class='line'>    <span class="c">#         return</span>
</span><span class='line'>    <span class="c">#     for i in range(2, pages_num+1):</span>
</span><span class='line'>    <span class="c">#         girl_page_url = response.url.replace(&#39;.html&#39;, &#39;_&#39;) + str(i) + &#39;.html&#39;</span>
</span><span class='line'>    <span class="c">#         # print(girl_page_url)</span>
</span><span class='line'>    <span class="c">#         yield Request(url=girl_page_url, callback=self.next4)</span>
</span><span class='line'>    <span class="c">#     pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">next4</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">getPic</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">getPic</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'>        <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>现在，我们需要在<code>getPic()</code> 函数中获取每一个美女网页的每一个页面里面的所有高清图片。</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480231492634.png" alt="Alt text" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">getPic</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># print(response.url)</span>
</span><span class='line'>    <span class="n">item</span> <span class="o">=</span> <span class="n">SeconddemoItem</span><span class="p">()</span>
</span><span class='line'>    <span class="n">item</span><span class="p">[</span><span class="s">&#39;url&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&quot;//div[@class=&#39;big-pic&#39;]/div[@class=&#39;big_img&#39;]//p/img/@src&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">item</span><span class="p">[</span><span class="s">&#39;url&#39;</span><span class="p">])</span>
</span><span class='line'>    <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>


<p>测试运行：</p>

<p>测试多页的美女网页：</p>

<p>先将<code>parse()</code>函数的最后一行改为：<code>yield Request(url='http://www.169bb.com/xiyangmeinv/2016/0717/36463.html', callback=self.demo)</code></p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480230996305.png" alt="Alt text" /></p>

<p>测试单页的美女网页：</p>

<p>将<code>parse()</code>函数的最后一行改为：<code>yield Request(url='http://www.169bb.com/xiyangmeinv/2016/0103/2268.html', callback=self.demo)</code></p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480237427282.png" alt="Alt text" /></p>

<p>成功。</p>

<hr />

<h3>下载高清图片</h3>

<p>OK，现在我们就已经得到了所有西洋美女的所有高清图片的下载地址，我们在<code>piplines.py</code> 文件中使用它们。</p>

<p>删除了<code>next4()</code>回调函数。在<code>demo()</code>回调函数里面调用的都是<code>getPic()</code>回调函数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">demo</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
</span><span class='line'><span class="c">#     rela_pages_list = response.xpath(&quot;//div[@class=&#39;dede_pages&#39;]/ul//li/a/text()&quot;).extract()</span>
</span><span class='line'><span class="c">#     pages_num = len(rela_pages_list)-3</span>
</span><span class='line'><span class="c">#     print(pages_num)</span>
</span><span class='line'><span class="c">#     pass</span>
</span><span class='line'>    <span class="n">rela_pages_list</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&quot;//div[@class=&#39;dede_pages&#39;]/ul//li/a/text()&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span>
</span><span class='line'>    <span class="n">pages_num</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">rela_pages_list</span><span class="p">)</span> <span class="o">-</span> <span class="mi">3</span>
</span><span class='line'>    <span class="c"># print(pages_num)</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">getPic</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">pages_num</span> <span class="o">==</span> <span class="o">-</span><span class="mi">3</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># pages_num = 1</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">pages_num</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>        <span class="n">girl_page_url</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">url</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;.html&#39;</span><span class="p">,</span> <span class="s">&#39;_&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;.html&#39;</span>
</span><span class='line'>        <span class="c"># print(girl_page_url)</span>
</span><span class='line'>        <span class="k">yield</span> <span class="n">Request</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">girl_page_url</span><span class="p">,</span> <span class="n">callback</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">getPic</span><span class="p">)</span>
</span><span class='line'>    <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="c"># error : yield 经过了一个中间函数，运行就有问题。我现在还不知道为什么</span>
</span><span class='line'><span class="c"># def next4(self, response):</span>
</span><span class='line'><span class="c">#     self.getPic(response)</span>
</span><span class='line'><span class="c">#     pass</span>
</span></code></pre></td></tr></table></div></figure>


<p>并将<code>getPic()</code>函数里面的item写到生成器里面：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">getPic</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># print(response.url)</span>
</span><span class='line'>    <span class="n">item</span> <span class="o">=</span> <span class="n">SeconddemoItem</span><span class="p">()</span>
</span><span class='line'>    <span class="n">item</span><span class="p">[</span><span class="s">&#39;url&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&quot;//div[@class=&#39;big-pic&#39;]/div[@class=&#39;big_img&#39;]//p/img/@src&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span>
</span><span class='line'>    <span class="c"># print(item[&#39;url&#39;])</span>
</span><span class='line'>    <span class="c"># pass</span>
</span><span class='line'>    <span class="k">yield</span> <span class="n">item</span>
</span></code></pre></td></tr></table></div></figure>


<p>测试：</p>

<p>测试单页的美女网页：</p>

<p>将<code>parse()</code>函数的最后一行改为：<code>yield Request(url='http://www.169bb.com/xiyangmeinv/2016/0103/2268.html', callback=self.getPic)</code></p>

<p>成功。</p>

<p>测试多页的美女网页：</p>

<p>先将<code>parse()</code>函数的最后一行改为：<code>yield Request(url='http://www.169bb.com/xiyangmeinv/2016/0717/36463.html', callback=self.demo)</code></p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480230996305.png" alt="Alt text" /></p>

<p>也算算成功，因为有重复的文件名，所以自动替换，所以这里需要做修改。</p>

<p>我们可以使用美女图片网址里面的数字作为图片文件名的固定前缀来给图片命名，使用正则表达式获取网址的数字。</p>

<hr />

<p>在 <code>pipelines.py</code> 文件 中的 <code>process_item()</code> 函数中使用正则表达式得到图片下载网址的数字：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">urllib.request</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SeconddemoPipeline</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">process_item</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">,</span> <span class="n">spider</span><span class="p">):</span>
</span><span class='line'>        <span class="c"># print(len(item[&#39;url&#39;]))</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">item</span><span class="p">[</span><span class="s">&#39;url&#39;</span><span class="p">])):</span>
</span><span class='line'>            <span class="n">this_url</span> <span class="o">=</span> <span class="n">item</span><span class="p">[</span><span class="s">&#39;url&#39;</span><span class="p">][</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>            <span class="nb">id</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s">&#39;http://724.169pp.net/169mm/(.*?).jpg&#39;</span><span class="p">,</span> <span class="n">this_url</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>            <span class="nb">id</span> <span class="o">=</span> <span class="nb">id</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;/&#39;</span><span class="p">,</span> <span class="s">&#39;_&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
</span><span class='line'>            <span class="c"># file = &#39;D:/WorkSpace/python_ws/python-large-web-crawler/xiyangmeinv/&#39; + str(i) + &#39;.jpg&#39;</span>
</span><span class='line'>            <span class="c"># print(&#39;Downloading :&#39; , file)</span>
</span><span class='line'>            <span class="c"># urllib.request.urlretrieve(this_url, filename=file)</span>
</span><span class='line'>            <span class="c"># print(&#39;Final Download :&#39; , file)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">item</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480241683726.png" alt="Alt text" /></p>

<p>要想使用 <code>pipelines.py</code> 文件 中的 <code>SeconddemoPipeline</code> 类，需要在 <code>settings.py</code> 文件里面设置 <code>ITEM_PIPELINES</code> 项：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">ITEM_PIPELINES</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>   <span class="s">&#39;secondDemo.pipelines.SeconddemoPipeline&#39;</span><span class="p">:</span> <span class="mi">300</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480242336499.png" alt="Alt text" /></p>

<blockquote><p>这里，我有一件事情不懂，关于正则表达式的： 网址里面的<code>.</code> 也是正则表达式中的工具字符，也是数据中中的内容，那么正则表达式是如何分辨它在这里是功能字符还是内容字符？</p></blockquote>

<p>在<code>pic_169bb.py</code> 文件的<code>demo()</code> 回调函数中，这样写才能获取到美女网页的第一页的图片地址：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="c"># error</span>
</span><span class='line'>    <span class="c"># self.getPic(response)</span>
</span><span class='line'>    <span class="c"># succes 为啥将下面的代码用self.getPic(response)的形式不能正常的获取到，而使用下面的代码却能获取到？</span>
</span><span class='line'>    <span class="n">item</span> <span class="o">=</span> <span class="n">SeconddemoItem</span><span class="p">()</span>
</span><span class='line'>    <span class="n">item</span><span class="p">[</span><span class="s">&#39;url&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&quot;//div[@class=&#39;big-pic&#39;]/div[@class=&#39;big_img&#39;]//p/img/@src&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span>
</span><span class='line'>    <span class="c"># print(item[&#39;url&#39;])</span>
</span><span class='line'>    <span class="c"># pass</span>
</span><span class='line'>    <span class="k">yield</span> <span class="n">item</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480241496168.png" alt="Alt text" /></p>

<p>运行程序试试：</p>

<p>测试单页的美女网页：</p>

<p>将<code>parse()</code>函数的最后一行改为：<code>yield Request(url='http://www.169bb.com/xiyangmeinv/2016/0103/2268.html', callback=self.getPic)</code></p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480241922348.png" alt="Alt text" /></p>

<p>成功。</p>

<p>测试多页的美女网页：</p>

<p>先将<code>parse()</code>函数的最后一行改为：<code>yield Request(url='http://www.169bb.com/xiyangmeinv/2016/0717/36463.html', callback=self.demo)</code></p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480241935773.png" alt="Alt text" /></p>

<p>都成功。</p>

<hr />

<p>先测试下载图片：</p>

<p>将 <code>pipelines.py</code> 文件 中的 <code>SeconddemoPipeline</code> 类的<code>process_item()</code> 函数里面，添加代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">process_item</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">,</span> <span class="n">spider</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># print(len(item[&#39;url&#39;]))</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">item</span><span class="p">[</span><span class="s">&#39;url&#39;</span><span class="p">])):</span>
</span><span class='line'>        <span class="n">this_url</span> <span class="o">=</span> <span class="n">item</span><span class="p">[</span><span class="s">&#39;url&#39;</span><span class="p">][</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>        <span class="nb">id</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s">&#39;http://724.169pp.net/169mm/(.*?).jpg&#39;</span><span class="p">,</span> <span class="n">this_url</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>        <span class="nb">id</span> <span class="o">=</span> <span class="nb">id</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;/&#39;</span><span class="p">,</span> <span class="s">&#39;_&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="c"># print(id)</span>
</span><span class='line'>        <span class="nb">file</span> <span class="o">=</span> <span class="s">&#39;D:/WorkSpace/python_ws/python-large-web-crawler/xiyangmeinv/&#39;</span> <span class="o">+</span> <span class="nb">id</span> <span class="o">+</span> <span class="s">&#39;.jpg&#39;</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39;Downloading :&#39;</span> <span class="p">,</span> <span class="nb">file</span><span class="p">)</span>
</span><span class='line'>        <span class="n">urllib</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">urlretrieve</span><span class="p">(</span><span class="n">this_url</span><span class="p">,</span> <span class="n">filename</span><span class="o">=</span><span class="nb">file</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39;Final Download :&#39;</span> <span class="p">,</span> <span class="nb">file</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">item</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480242553614.png" alt="Alt text" /></p>

<p>运行程序，没有毛病：（除了下载速度有点慢）</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480242613763.png" alt="Alt text" /></p>

<hr />

<h2>下载 169美女图片网 的所有西洋美女的图片</h2>

<p>在 <code>pic_169bb.py</code>文件里， 将<code>parse()</code>函数的最后一行改为：<code>yield Request(url=xiyang_urldata, callback=self.next)</code></p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480242895996.png" alt="Alt text" /></p>

<p>将 <code>demo()</code> 函数里面的所有代码复制一份到 <code>next3()</code>函数里：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480242867282.png" alt="Alt text" /></p>

<p>现在，运行程序：（最终的程序）</p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480243169351.png" alt="Alt text" /></p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480243201173.png" alt="Alt text" /></p>

<p>成功！</p>

<hr />

<h2>防反爬技术</h2>

<p><strong>Step 4 . </strong> 不遵循 <code>robots.txt</code> 协议。</p>

<p>将 <code>settings.py</code> 文件里面的 <code>ROBOTSTXT_OBEY</code> 项设置为：<code>False</code></p>

<p><img src="http://aobojaing.github.io/images/2016-12-26-python3-large-web-crawler-169bb-com-HD-beautiful-pictures/1480195250963.png" alt="Alt text" /></p>

<hr />

<p><strong>Step 6 . </strong> 模仿浏览器</p>

<blockquote><p>请先查看这篇博客：<a href="http://blog.csdn.net/github_35160620/article/details/52489709">http://blog.csdn.net/github_35160620/article/details/52489709</a> 里面是：<strong>六 . 设置 用户代理（user_agent）</strong>。</p></blockquote>

<p>将 <code>settings.py</code> 文件里面的 <code>USER_AGENT</code> 项设置为：浏览器的用户代理信息。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">USER_AGENT</span> <span class="o">=</span> <span class="s">&#39;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.22 Safari/537.36 SE 2.X MetaSr 1.0&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p><strong>Step 7 . </strong>  禁止缓存</p>

<p>将 <code>settings.py</code> 文件里面的 <code>COOKIES_ENABLED</code> 项设置为：<code>False</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">COOKIES_ENABLED</span> <span class="o">=</span> <span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>搞定</h2>

<hr />

<p>需要升级的地方:（2016-11-27 19:34:34）</p>

<ol>
<li>在易错的代码段加上异常检测程序</li>
<li>在下载图片的代码加上：超时异常检测程序</li>
<li>记录成功下载的、超时失败下载的、链接失败下载的 信息</li>
<li>添加断点续下功能。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 网络爬虫 011 (高级功能) 支持代理proxy — 让爬虫可以翻墙爬取网站]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/25/python-Web-crawler-proxy-support/"/>
    <updated>2016-12-25T16:27:20+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/25/python-Web-crawler-proxy-support</id>
    <content type="html"><![CDATA[<h1>支持代理</h1>

<ul>
<li>使用的系统：<strong>Windows 10 64位</strong></li>
<li><strong>Python</strong> 语言版本：<strong>Python 2.7.10 V</strong></li>
<li>使用的编程 <strong>Python</strong> 的集成开发环境：<strong>PyCharm 2016 04</strong></li>
<li>我使用的 <strong>urllib</strong> 的版本：<strong>urllib2</strong></li>
</ul>


<p><strong>注意：</strong> 我没这里使用的是 <strong>Python2</strong> ，而不是<strong>Python3</strong></p>

<hr />

<h2>一 . 前言</h2>

<p>在国内一些网站已经被屏蔽，比如<strong>google</strong>、<strong>Facebook</strong>等等。如果我们想要访问这些被屏蔽的网站，需要翻墙，术语叫：代理。简单的说就是，我们访问这些网站都是通过国内的服务器来访问这些网站，但是在你与服务器之间有一道长城防火墙，它会判断你访问的这个网站是不是在屏蔽列表里的网站。假如你现在访问<strong>google</strong>网站，长城防火墙就会屏蔽这个网站，不让你访问它。
那么代理又是什么呢？ 简单的说就是你不是直接访问的<strong>google</strong>网站，而是访问的国外的一个服务器。你在电脑上输入<strong>google</strong>的网站后，信息的运输是这样的： 国外服务器接受到你访问的网站，它帮你访问，然后将访问得到的结果返回给你。</p>

<h2>二 .  测试</h2>

<p>我们可以使用 <code>urllib2</code> 支持代理。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">proxy</span> <span class="o">=</span> <span class="o">...</span>
</span><span class='line'><span class="n">opener</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">build_opener</span><span class="p">()</span>
</span><span class='line'><span class="n">proxy_params</span> <span class="o">=</span> <span class="p">{</span><span class="n">urlparse</span><span class="o">.</span><span class="n">urlparse</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">scheme</span><span class="p">:</span> <span class="n">proxy</span><span class="p">}</span>
</span><span class='line'><span class="n">opener</span><span class="o">.</span><span class="n">add_handler</span><span class="p">(</span><span class="n">urllib2</span><span class="o">.</span><span class="n">ProxyHandler</span><span class="p">(</span><span class="n">proxy_params</span><span class="p">))</span>
</span><span class='line'><span class="n">response</span> <span class="o">=</span> <span class="n">opener</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>三 . 代码</h2>

<p>代码在<a href="https://github.com/AoboJaing/web-scraping-with-python-learning/blob/master/ch1/1-4-4-2-proxy.py">这里</a>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#-*- coding:utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">urllib2</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">chardet</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">urlparse</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">download</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">user_agent</span><span class="o">=</span><span class="s">&#39;wswp&#39;</span><span class="p">,</span> <span class="n">proxy</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">num_retries</span><span class="o">=</span><span class="mi">2</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Downloading: &#39;</span><span class="p">,</span> <span class="n">url</span>
</span><span class='line'>    <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;User-agent&#39;</span> <span class="p">:</span> <span class="n">user_agent</span><span class="p">}</span>
</span><span class='line'>    <span class="n">request</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">Request</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">opener</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">build_opener</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">proxy</span><span class="p">:</span>
</span><span class='line'>        <span class="n">proxy_params</span> <span class="o">=</span> <span class="p">{</span><span class="n">urlparse</span><span class="o">.</span><span class="n">urlparse</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">scheme</span><span class="p">:</span> <span class="n">proxy</span><span class="p">}</span>
</span><span class='line'>        <span class="n">opener</span><span class="o">.</span><span class="n">add_handler</span><span class="p">(</span><span class="n">urllib2</span><span class="o">.</span><span class="n">ProxyHandler</span><span class="p">(</span><span class="n">proxy_params</span><span class="p">))</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">html</span> <span class="o">=</span> <span class="n">opener</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">request</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>        <span class="n">charset</span> <span class="o">=</span> <span class="n">chardet</span><span class="o">.</span><span class="n">detect</span><span class="p">(</span><span class="n">html</span><span class="p">)[</span><span class="s">&#39;encoding&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">charset</span> <span class="o">==</span> <span class="s">&#39;GB2312&#39;</span> <span class="ow">or</span> <span class="n">charset</span> <span class="o">==</span> <span class="s">&#39;gb2312&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">html</span> <span class="o">=</span> <span class="n">html</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;GBK&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;GB18030&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">html</span> <span class="o">=</span> <span class="n">html</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="n">charset</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;GB18030&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">except</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">URLError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;Download error&#39;</span><span class="p">,</span> <span class="n">e</span><span class="o">.</span><span class="n">reason</span>
</span><span class='line'>        <span class="n">html</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">num_retries</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">num_retries</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="s">&#39;code&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="mi">500</span> <span class="o">&lt;=</span> <span class="n">e</span><span class="o">.</span><span class="n">code</span> <span class="o">&lt;</span> <span class="mi">600</span><span class="p">:</span>
</span><span class='line'>                    <span class="c"># recursively retry 5xx HTTP errors</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">download</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">user_agent</span><span class="p">,</span> <span class="n">proxy</span><span class="p">,</span> <span class="n">num_retries</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">html</span>
</span></code></pre></td></tr></table></div></figure>


<h2>四 . 运行</h2>

<p>如何使用这个最新的 <code>download()</code> 函数。<code>download()</code> 函数里面的形参 <code>proxy</code> 究竟要传入什么？</p>

<p>如果直接运行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">download</span><span class="p">(</span><span class="s">&#39;https://www.google.co.jp/&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">Downloading</span><span class="p">:</span>  <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">www</span><span class="o">.</span><span class="n">google</span><span class="o">.</span><span class="n">co</span><span class="o">.</span><span class="n">jp</span><span class="o">/</span>
</span><span class='line'><span class="n">Download</span> <span class="n">error</span> <span class="p">[</span><span class="n">Errno</span> <span class="mi">11002</span><span class="p">]</span> <span class="n">getaddrinfo</span> <span class="n">failed</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在，我们启动<strong>proxy</strong>代理：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-25-python-Web-crawler-proxy-support/1478797401564.png" alt="Alt text" /></p>

<p><strong>proxy</strong> 的本地端口为：<code>127.0.0.1:1080</code></p>

<p>所以，我们给<code>download()</code> 函数的 <code>proxy</code> 参数的值设置为：<code>127.0.0.1:1080</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">download</span><span class="p">(</span><span class="s">&#39;https://www.google.co.jp/&#39;</span><span class="p">,</span> <span class="n">proxy</span><span class="o">=</span><span class="s">&#39;127.0.0.1:1080&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>成功输出了<strong>google</strong>日本的网站源代码：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-25-python-Web-crawler-proxy-support/1478797631818.png" alt="Alt text" /></p>

<hr />

<h2>五 . 讲解代码中重点部分</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">if</span> <span class="n">proxy</span><span class="p">:</span>
</span><span class='line'>    <span class="n">proxy_params</span> <span class="o">=</span> <span class="p">{</span><span class="n">urlparse</span><span class="o">.</span><span class="n">urlparse</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">scheme</span><span class="p">:</span> <span class="n">proxy</span><span class="p">}</span>
</span><span class='line'>    <span class="n">opener</span><span class="o">.</span><span class="n">add_handler</span><span class="p">(</span><span class="n">urllib2</span><span class="o">.</span><span class="n">ProxyHandler</span><span class="p">(</span><span class="n">proxy_params</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果用户给<code>proxy</code>参数赋值了，那么就执行里面的代码。</p>

<p>其中<code>urlparse.urlparse(url).scheme</code> 得到的是网页的协议类型，比如：<code>http</code>、<code>https</code>、<code>ftp</code>等等。</p>

<p>所以<code>proxy_params = {urlparse.urlparse(url).scheme: proxy}</code>这句代码现在这个情况就等于：<code>proxy_params = {'https', '127.0.0.1:1080'}</code>。所以，<code>proxy_params</code>是一个字典，里面存放在代理的端口号。</p>

<p>在<code>urllib2</code>包中有<code>ProxyHandler</code>类，通过此类可以设置代理访问网页。</p>

<p>所以，上面完整的代码所执行的功能，和下面这一小段代码执行所得到的效果是一样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#coding=utf8</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">urllib2</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">chardet</span>
</span><span class='line'>
</span><span class='line'><span class="n">proxy</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">ProxyHandler</span><span class="p">({</span><span class="s">&#39;https&#39;</span><span class="p">:</span> <span class="s">&#39;127.0.0.1:1080&#39;</span><span class="p">})</span>
</span><span class='line'><span class="n">opener</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">build_opener</span><span class="p">(</span><span class="n">proxy</span><span class="p">)</span>
</span><span class='line'><span class="n">html</span> <span class="o">=</span> <span class="n">opener</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s">&#39;https://www.google.co.jp/&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'><span class="n">charset</span> <span class="o">=</span> <span class="n">chardet</span><span class="o">.</span><span class="n">detect</span><span class="p">(</span><span class="n">html</span><span class="p">)[</span><span class="s">&#39;encoding&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">html</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="n">charset</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;GB18030&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>参考网站：</p>

<p><a href="http://outofmemory.cn/code-snippet/2625/python-urllib2-usage-ProxyHandler-through-Proxy-call-wangye">http://outofmemory.cn/code-snippet/2625/python-urllib2-usage-ProxyHandler-through-Proxy-call-wangye</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git(GitHub) 007 如何删除一个库]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/25/git-how-to-delete-a-library/"/>
    <updated>2016-12-25T16:15:20+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/25/git-how-to-delete-a-library</id>
    <content type="html"><![CDATA[<hr />

<p>来到将要删除的库：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-25-git-how-to-delete-a-library/1475648554835.png" alt="Alt text" /></p>

<p>点击右上角的 <strong>Settings</strong></p>

<p><img src="http://aobojaing.github.io/images/2016-12-25-git-how-to-delete-a-library/1475648576420.png" alt="Alt text" /></p>

<p>调到 <strong>Settings</strong>网页，拉倒最后，你会看到下面这个样子：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-25-git-how-to-delete-a-library/1475648609056.png" alt="Alt text" /></p>

<p>点击 <strong>Delelte this repository</strong> 按钮。</p>

<p>弹出下面的提示窗口：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-25-git-how-to-delete-a-library/1475649572270.png" alt="Alt text" /></p>

<p>意思是说：</p>

<p>你是否真的真的真的要这样做？</p>

<p>如果你不阅读下面这些东西的话，不好的事情可能会意外地发生！</p>

<p>这个动作不能撤消。这将永久删除AoboJaing/ AoboJaing.github.io库，维基，问题和评论，并删除所有合作者协会。</p>

<p>为了再次确认，请输入资源库的名称。</p>

<p>所以我如果真的想要删除这个资源库的话，输入这个资源库的名称，再点击 <strong>I understand the consequences, delete this repoitory</strong>  按钮。</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git(GitHub) 006 如何新建一个库]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/25/git-how-to-create-a-new-library/"/>
    <updated>2016-12-25T16:04:40+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/25/git-how-to-create-a-new-library</id>
    <content type="html"><![CDATA[<hr />

<p>在<strong>GitHub</strong>网页，登录你的 <strong>GitHub 账号</strong> 之后。</p>

<p>点击右上角的图标 -> 然后选择 <strong>Your profile</strong></p>

<p><img src="http://aobojaing.github.io/images/2016-12-25-git-how-to-create-a-new-library/1475649961304.png" alt="Alt text" /></p>

<p>接着点击： <strong>Repositories</strong></p>

<p><img src="http://aobojaing.github.io/images/2016-12-25-git-how-to-create-a-new-library/1475650812663.png" alt="Alt text" /></p>

<p>现在，点击 <strong>New</strong></p>

<p><img src="http://aobojaing.github.io/images/2016-12-25-git-how-to-create-a-new-library/1475651019664.png" alt="Alt text" /></p>

<p>现在，你就可以输入你要创建的资源库的名称了：</p>

<p><img src="http://aobojaing.github.io/images/2016-12-25-git-how-to-create-a-new-library/1475651787525.png" alt="Alt text" /></p>

<p>输入完成之后，点击 <strong>Create repository</strong> 按钮</p>

<p><img src="http://aobojaing.github.io/images/2016-12-25-git-how-to-create-a-new-library/1475651897109.png" alt="Alt text" /></p>

<h2>OK，搞定</h2>

<p>现在你所看到的，说明这个库里面什么都没有。</p>

<p><img src="http://aobojaing.github.io/images/2016-12-25-git-how-to-create-a-new-library/1475651954810.png" alt="Alt text" /></p>
]]></content>
  </entry>
  
</feed>
