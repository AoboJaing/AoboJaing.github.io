<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Intel RealSense | AoboSir 博客]]></title>
  <link href="http://aobojaing.github.io/tags/intel-realsense/atom.xml" rel="self"/>
  <link href="http://aobojaing.github.io/"/>
  <updated>2016-12-15T05:30:58+08:00</updated>
  <id>http://aobojaing.github.io/</id>
  <author>
    <name><![CDATA[Aobo Jaing]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Intel RealSense 003(Learning RealSense SDK 002) 给Visual Studio 2010搭建 Intel RealSense SDK开发环境]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/15/Intel-RealSense-SDK-Development-environment-build-in-Visual-Studio-2010/"/>
    <updated>2016-12-15T05:29:14+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/15/Intel-RealSense-SDK-Development-environment-build-in-Visual-Studio-2010</id>
    <content type="html"><![CDATA[<hr />

<ul>
<li>我使用的Intel RealSense 硬件：<a href="http://www.aobosir.com/blog/2016/12/14/Intel-RealSense-Camera-Introduction-F200-SR300-R200/">F200、SR300 和 R200 摄像头</a> 都可以</li>
<li>Intel RealSense SDK：intel_rs_sdk_offline_package_10.0.26.0396（安装教程<a href="http://www.aobosir.com/blog/2016/12/07/Intel-RealSense-Windows-download-install-intel-RealSense-SDK/">这里</a>）</li>
<li>电脑系统：Windows 10 64位</li>
<li>编程语言：C++</li>
<li>开发工具软件：Visual Studio 2010 （安装教程<a href="http://blog.csdn.net/github_35160620/article/details/52365464">这里</a>）</li>
</ul>


<hr />

<h2>准备工作</h2>

<p>先新建一个项目：（一些简单的操作步骤，我忽略不记录）</p>

<p><img src="/images/2016-12-14-Intel-RealSense-SDK-Development-environment-build-in-Visual-Studio-2010/1481715171782.png" alt="Alt text" /></p>

<p><img src="/images/2016-12-14-Intel-RealSense-SDK-Development-environment-build-in-Visual-Studio-2010/1481722365940.png" alt="Alt text" /></p>

<p>在项目里面新建一个<code>.cpp</code>文件：<code>camera_viewer.cpp</code>。并将下面的代码拷贝到里面。</p>

<blockquote><p>这段代码是Intel RealSense SDK 中的一个示例程序。在这个路径里面可以找到它：<code>C:\Program Files (x86)\Intel\RSSDK\sample\DF_CameraViewer\src\camera_viewer.cpp</code></p></blockquote>

<hr />

<blockquote><p>现在我们先不管代码里面写的是什么，这一节我们重点介绍搭建开发环境。下一节，我们讲解这段代码。</p></blockquote>

<pre><code class="cpp">/*******************************************************************************

INTEL CORPORATION PROPRIETARY INFORMATION
This software is supplied under the terms of a license agreement or nondisclosure
agreement with Intel Corporation and may not be copied or disclosed except in
accordance with the terms of that agreement
Copyright(c) 2011-2014 Intel Corporation. All Rights Reserved.

*******************************************************************************/
#include &lt;windows.h&gt;
#include "pxcsensemanager.h"
#include "pxcmetadata.h"
#include "util_cmdline.h"
#include "util_render.h"
#include &lt;conio.h&gt;

int wmain(int argc, WCHAR* argv[]) {
    /* Creates an instance of the PXCSenseManager */
    PXCSenseManager *pp = PXCSenseManager::CreateInstance();
    if (!pp) {
        wprintf_s(L"Unable to create the SenseManager\n");
        return 3;
    }

    /* Collects command line arguments */
    UtilCmdLine cmdl(pp-&gt;QuerySession());
    if (!cmdl.Parse(L"-listio-nframes-sdname-csize-dsize-isize-lsize-rsize-file-record-noRender-mirror",argc,argv)) return 3;

    /* Sets file recording or playback */
    PXCCaptureManager *cm=pp-&gt;QueryCaptureManager();
    cm-&gt;SetFileName(cmdl.m_recordedFile, cmdl.m_bRecord);
    if (cmdl.m_sdname) cm-&gt;FilterByDeviceInfo(cmdl.m_sdname,0,0);

    // Create stream renders
    UtilRender renderc(L"Color"), renderd(L"Depth"), renderi(L"IR"), renderr(L"Right"), renderl(L"Left");
    pxcStatus sts;
    do {
        /* Apply command line arguments */
        pxcBool revert = false;
        if (cmdl.m_csize.size()&gt;0) {
            pp-&gt;EnableStream(PXCCapture::STREAM_TYPE_COLOR, cmdl.m_csize.front().first.width, cmdl.m_csize.front().first.height, (pxcF32)cmdl.m_csize.front().second);
        }
        if (cmdl.m_dsize.size()&gt;0) {
            pp-&gt;EnableStream(PXCCapture::STREAM_TYPE_DEPTH, cmdl.m_dsize.front().first.width, cmdl.m_dsize.front().first.height, (pxcF32)cmdl.m_dsize.front().second);
        }
        if (cmdl.m_isize.size() &gt; 0) {
            pp-&gt;EnableStream(PXCCapture::STREAM_TYPE_IR, cmdl.m_isize.front().first.width, cmdl.m_isize.front().first.height, (pxcF32)cmdl.m_isize.front().second);
        }
        if (cmdl.m_rsize.size() &gt; 0) {
            pp-&gt;EnableStream(PXCCapture::STREAM_TYPE_RIGHT, cmdl.m_rsize.front().first.width, cmdl.m_rsize.front().first.height, (pxcF32)cmdl.m_rsize.front().second);
        }
        if (cmdl.m_lsize.size() &gt; 0) {
            pp-&gt;EnableStream(PXCCapture::STREAM_TYPE_LEFT, cmdl.m_lsize.front().first.width, cmdl.m_lsize.front().first.height, (pxcF32)cmdl.m_lsize.front().second);
        }
        if (cmdl.m_csize.size() == 0 &amp;&amp; cmdl.m_dsize.size() == 0 &amp;&amp; cmdl.m_isize.size() == 0 &amp;&amp; cmdl.m_rsize.size() == 0 &amp;&amp; cmdl.m_lsize.size() == 0) {
            PXCVideoModule::DataDesc desc={};
            if (cm-&gt;QueryCapture()) {
                cm-&gt;QueryCapture()-&gt;QueryDeviceInfo(0, &amp;desc.deviceInfo);
            } else {
                desc.deviceInfo.streams = PXCCapture::STREAM_TYPE_COLOR | PXCCapture::STREAM_TYPE_DEPTH;
                revert = true;
            }
            pp-&gt;EnableStreams(&amp;desc);
        }

        /* Initializes the pipeline */
        sts = pp-&gt;Init();
        if (sts&lt;PXC_STATUS_NO_ERROR) {
            if (revert) {
                /* Enable a single stream */
                pp-&gt;Close();
                pp-&gt;EnableStream(PXCCapture::STREAM_TYPE_DEPTH);
                sts = pp-&gt;Init();
                if (sts&lt;PXC_STATUS_NO_ERROR) {
                    pp-&gt;Close();
                    pp-&gt;EnableStream(PXCCapture::STREAM_TYPE_COLOR);
                    sts = pp-&gt;Init();
                }
            }
            if (sts&lt;PXC_STATUS_NO_ERROR) {
                wprintf_s(L"Failed to locate any video stream(s)\n");
                pp-&gt;Release();
                return sts;
            }
        }

        /* Reset all properties */
        PXCCapture::Device *device = pp-&gt;QueryCaptureManager()-&gt;QueryDevice();
        device-&gt;ResetProperties(PXCCapture::STREAM_TYPE_ANY);

        /* Set mirror mode */
        if (cmdl.m_bMirror) {
            device-&gt;SetMirrorMode(PXCCapture::Device::MirrorMode::MIRROR_MODE_HORIZONTAL);
        } else {
            device-&gt;SetMirrorMode(PXCCapture::Device::MirrorMode::MIRROR_MODE_DISABLED);
        }

        /* Stream Data */
        for (int nframes=0;nframes&lt;cmdl.m_nframes;nframes++) {
            /* Waits until new frame is available and locks it for application processing */
            sts=pp-&gt;AcquireFrame(false);

            if (sts&lt;PXC_STATUS_NO_ERROR) {
                if (sts==PXC_STATUS_STREAM_CONFIG_CHANGED) {
                    wprintf_s(L"Stream configuration was changed, re-initilizing\n");
                    pp-&gt;Close();
                }
                break;
            }

            /* Render streams, unless -noRender is selected */
            if (cmdl.m_bNoRender == false) {
                const PXCCapture::Sample *sample = pp-&gt;QuerySample();
                if (sample) {
                    if (sample-&gt;depth &amp;&amp; !renderd.RenderFrame(sample-&gt;depth)) break;
                    if (sample-&gt;color &amp;&amp; !renderc.RenderFrame(sample-&gt;color)) break;
                    if (sample-&gt;ir    &amp;&amp; !renderi.RenderFrame(sample-&gt;ir))    break;
                    if (sample-&gt;right &amp;&amp; !renderr.RenderFrame(sample-&gt;right)) break;
                    if (sample-&gt;left  &amp;&amp; !renderl.RenderFrame(sample-&gt;left))  break;
                }
            }

            /* Releases lock so pipeline can process next frame */
            pp-&gt;ReleaseFrame();

            if( _kbhit() ) { // Break loop
                int c = _getch() &amp; 255;
                if( c == 27 || c == 'q' || c == 'Q') break; // ESC|q|Q for Exit
            }
        }
    } while (sts == PXC_STATUS_STREAM_CONFIG_CHANGED);

    wprintf_s(L"Exiting\n");

    // Clean Up
    pp-&gt;Release();
    return 0;
}
</code></pre>

<p>现在编译程序是不会通过的，有很多错误。下面开始搭建开发环境。</p>

<h1>搭建VS2010使用C++编写Intel RealSense的程序的开发环境</h1>

<p>现在开始搭建Intel RealSense在VS2010中的开发环境，这里有两种方法，我都介绍一遍，你可以选择任何一种方法。</p>

<h2>方法一</h2>

<p>这个方法是最简单，最直接的。我们直接使用集成<strong>属性表</strong>。</p>

<blockquote><p>参考文献：C:\Program Files (x86)\Intel\RSSDK\doc\CHM\sdkdevguide.chm -> Importing the SDK Property Sheets</p></blockquote>

<p><strong>Intel RealSense SDK</strong>已经为我们配置好了属性表，并且这些属性表在VS2010~VS2015软件里都能使用。它的所在路径是：<code>C:\Program Files (x86)\Intel\RSSDK\props</code></p>

<p><img src="/images/2016-12-14-Intel-RealSense-SDK-Development-environment-build-in-Visual-Studio-2010/1481722801194.png" alt="Alt text" /></p>

<p><strong>视图(V)</strong> -> <strong>属性管理器(M)</strong></p>

<p><img src="/images/2016-12-14-Intel-RealSense-SDK-Development-environment-build-in-Visual-Studio-2010/1481724000917.png" alt="Alt text" /></p>

<p><strong>项目名</strong> -> <strong>添加现有属性表(E)&hellip;</strong></p>

<p><img src="/images/2016-12-14-Intel-RealSense-SDK-Development-environment-build-in-Visual-Studio-2010/1481724042648.png" alt="Alt text" /></p>

<p>随便选择哪一个都可以。</p>

<ul>
<li>VS2010-15.Integration.MD.props：动态编译</li>
<li>VS2010-15.Integration.MT.props：静态编译</li>
</ul>


<p><img src="/images/2016-12-14-Intel-RealSense-SDK-Development-environment-build-in-Visual-Studio-2010/1481724159863.png" alt="Alt text" /></p>

<p>一次添加，自动添加到<strong>Debug</strong>和<strong>Release</strong>里面。</p>

<p><img src="/images/2016-12-14-Intel-RealSense-SDK-Development-environment-build-in-Visual-Studio-2010/1481724929372.png" alt="Alt text" /></p>

<p>所有步骤操作完成了，环境搭建好了，是不是很简单。OK，现在编译程序就成功了。（生成成功：（但是有一个警告，这个警告不用管。））</p>

<blockquote><p>运行程序之前注意：要将Intel RealSense模块连接到电脑的USB3.0接口</p></blockquote>

<hr />

<blockquote><p><strong>注意：</strong> 下次重新建新的工程，还需要重新搭建环境。</p></blockquote>

<p>如果你觉得这个<strong>方法一</strong>太简单了，学不到什么东西。那么下面的<strong>方法二</strong>就是所有的环境都自己手动搭建，不使用Intel RealSense SDK提供的现成的属性表了。</p>

<hr />

<h2>方法二</h2>

<blockquote><p>如果你操作了<strong>方法一</strong>，现在先把刚刚添加的属性表删除，让属性管理器变成原来的样子：</p>

<p><img src="/images/2016-12-14-Intel-RealSense-SDK-Development-environment-build-in-Visual-Studio-2010/1481725209664.png" alt="Alt text" /></p></blockquote>

<p>参考文献：C:\Program Files (x86)\Intel\RSSDK\doc\CHM\sdkdevguide.chm  -> Configuring Project Settings</p>

<p>一共分三步：</p>

<p><strong>Step 1 . </strong>  添加 <strong>包含目录</strong></p>

<p>在 <strong>解决方案资源管理器</strong> 里，对着项目名右键 -> 属性</p>

<p><img src="/images/2016-12-14-Intel-RealSense-SDK-Development-environment-build-in-Visual-Studio-2010/1481725399945.png" alt="Alt text" /></p>

<p>添加：</p>

<pre><code>C:\Program Files %28x86%29\Intel\RSSDK\sample\common\include
C:\Program Files %28x86%29\Intel\RSSDK\include
</code></pre>

<p><img src="/images/2016-12-14-Intel-RealSense-SDK-Development-environment-build-in-Visual-Studio-2010/1481725633507.png" alt="Alt text" /></p>

<p><strong>Step 2 . </strong> 添加 <strong>库目录</strong></p>

<pre><code>C:\Program Files %28x86%29\Intel\RSSDK\sample\common\lib\win32\v100
C:\Program Files %28x86%29\Intel\RSSDK\lib\Win32
</code></pre>

<p><img src="/images/2016-12-14-Intel-RealSense-SDK-Development-environment-build-in-Visual-Studio-2010/1481726214296.png" alt="Alt text" /></p>

<p><strong>Step 3 . </strong> 添加 <strong>附加依赖项</strong></p>

<p>先查看：查看当前项目使用的运行库是动态多线程调试（<code>/MDd</code>）还是静态多线程调试（<code>/MTd</code>）的。</p>

<p>如果是<code>/MDd</code>（新建的项目默认都是<code>/MDd</code>）</p>

<p><img src="/images/2016-12-14-Intel-RealSense-SDK-Development-environment-build-in-Visual-Studio-2010/1481725955088.png" alt="Alt text" /></p>

<pre><code>libpxcutilsmd_d.lib
libpxcmd_d.lib
libpxcmd.lib
libpxcutilsmd.lib
</code></pre>

<blockquote><p><strong>注意：</strong> 这里 文件名后有<code>_d</code>的是<strong>Debug</strong>使用的链接文件。<strong>Debug</strong>的链接文件一定要添加在<strong>Release</strong>链接文件前面。否则会出现<a href="http://blog.csdn.net/u012771236/article/details/29850169"><code>error LNK2038</code>错误</a>。</p></blockquote>

<p><img src="/images/2016-12-14-Intel-RealSense-SDK-Development-environment-build-in-Visual-Studio-2010/1481726928633.png" alt="Alt text" /></p>

<p>OK，环境搭建完成，可以运行程序了。（生成成功：（但是有一个警告，这个警告不用管。））</p>

<hr />

<p>如果是<code>/MTd</code>:</p>

<p><img src="/images/2016-12-14-Intel-RealSense-SDK-Development-environment-build-in-Visual-Studio-2010/1481727314579.png" alt="Alt text" /></p>

<pre><code>libpxc_d.lib
libpxcutils_d.lib
libpxc.lib
libpxcutils.lib
</code></pre>

<p><img src="/images/2016-12-14-Intel-RealSense-SDK-Development-environment-build-in-Visual-Studio-2010/1481727464696.png" alt="Alt text" /></p>

<p>OK，环境搭建完成，可以运行程序了。（生成成功：（但是有一个警告，这个警告不用管。））</p>

<hr />

<h2>运行 （测试环境是否搭建成功）</h2>

<blockquote><p>运行程序之前注意：要将Intel RealSense模块连接到电脑的USB3.0接口</p></blockquote>

<p>（编译成功：（但是有一个警告，这个警告不用管。））</p>

<pre><code>1&gt;  camera_viewer.cpp
1&gt;d:\workspace\test_ws\intel_realsense_sdk_ws\hello_intel_realsense_sdk\hello_intel_realsense_sdk\camera_viewer.cpp(93): warning C4482: 使用了非标准扩展: 限定名中使用了枚举“PXCCapture::Device::MirrorMode”
1&gt;d:\workspace\test_ws\intel_realsense_sdk_ws\hello_intel_realsense_sdk\hello_intel_realsense_sdk\camera_viewer.cpp(95): warning C4482: 使用了非标准扩展: 限定名中使用了枚举“PXCCapture::Device::MirrorMode”
1&gt;生成成功。
</code></pre>

<p>默认输出两个图片，一个是彩色图片（1080p），一个是深度图片（640x480）。（彩色图片太大了，这里只截了一半的图）</p>

<p><img src="/images/2016-12-14-Intel-RealSense-SDK-Development-environment-build-in-Visual-Studio-2010/1481727693063.png" alt="Alt text" /></p>

<hr />

<p><strong>总结：</strong> 这一讲，我们以 <strong>VS2010开发平台</strong> 和 <strong>C++语言</strong> 为例，讲解了如何搭建Intel RealSense SDK 的开发环境。这个方法在VS2012、VS2013、VS2015上一样适用。</p>

<p>下一节，我们详细讲解本篇博客里面使用的<code>camera_viewer.cpp</code>的代码。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intel RealSense 001 开发环境的选择]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/14/Intel-RealSense-Development-environment-select/"/>
    <updated>2016-12-14T18:58:23+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/14/Intel-RealSense-Development-environment-select</id>
    <content type="html"><![CDATA[<hr />

<blockquote><p>不管你使用Intel RealSense的哪款摄像头，本文都适合你。</p></blockquote>

<p>对于开发环境（就是你编写程序），你有两个选择：</p>

<ul>
<li><a href="http://www.aobosir.com/blog/2016/12/07/Intel-RealSense-Windows-download-install-intel-RealSense-SDK/">Intel RealSense SDK</a>（有要求：Windows 10系统）</li>
<li><a href="https://github.com/IntelRealSense/librealsense">librealsense</a>（Intel RealSense跨平台API）</li>
</ul>


<p>我个人推荐使用<code>librealsense</code>这个跨平台库，它让Intel RealSense摄像头在Linux系统上使用。并且同时可以在Linux系统里面的ROS机器人操作系统里面使用Intel RealSense。（<a href="http://wiki.ros.org/librealsense">这里</a>）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intel RealSense 000 Intel RealSense摄像头介绍：F200、SR300、R200]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/14/Intel-RealSense-Camera-Introduction-F200-SR300-R200/"/>
    <updated>2016-12-14T18:47:00+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/14/Intel-RealSense-Camera-Introduction-F200-SR300-R200</id>
    <content type="html"><![CDATA[<hr />

<hr />

<p>目前的Intel RealSense摄像头一共有三款：<strong>F200</strong>、<strong>SR300</strong>、<strong>R200</strong>。</p>

<ul>
<li>SR300 和 F200 都属于：近距离摄像头（Front Facing）。</li>
<li>R200 属于：远距离摄像头（Rear Facing）</li>
<li>在Intel RealSense 官方示例程序中，总会在程序的前缀出现：<code>FF_</code>、<code>RF_</code>或者<code>DF_</code>，它们分别表示：<strong>适用于近距离摄像头</strong>（Front Facing）、<strong>适用于远距离摄像头</strong>（Rear Facing） 和 <strong>两者都适用</strong>（Dual Facing）。</li>
</ul>


<hr />

<h2>SR300</h2>

<p>官网介绍：<a href="https://software.intel.com/en-us/articles/introducing-the-intel-realsense-camera-sr300">Introducing the Intel® RealSense™ Camera SR300</a></p>

<p>外部：</p>

<p><img src="/images/2016-12-14-Intel-RealSense-Camera-Introduction-F200-SR300-R200/1481614405367.png" alt="Alt text" /></p>

<p>内部：</p>

<p><img src="/images/2016-12-14-Intel-RealSense-Camera-Introduction-F200-SR300-R200/1481614321225.png" alt="Alt text" /></p>

<hr />

<p><img src="/images/2016-12-14-Intel-RealSense-Camera-Introduction-F200-SR300-R200/1481614483853.png" alt="Alt text" /></p>

<p>SR300 只有：</p>

<ul>
<li>测量范围：0.2m ~ 1.2m （要求：室内，并且）</li>
<li>深度摄像头（640x480 60fps）</li>
<li>彩色摄像头（1080p 30fps 或者 720p 60fps 可调）</li>
<li>红外线摄像头（640x480 200fps ）</li>
<li>无<strong>左</strong>（left）、<strong>右</strong>（right）摄像头</li>
</ul>


<hr />

<h2>R200</h2>

<p>参考网站：<a href="https://software.intel.com/en-us/articles/realsense-r200-camera">Developing for the Intel® RealSense™ Camera (R200)</a></p>

<p>外部：</p>

<p><img src="/images/2016-12-14-Intel-RealSense-Camera-Introduction-F200-SR300-R200/1481707509944.png" alt="Alt text" /></p>

<p>内部：</p>

<p><img src="/images/2016-12-14-Intel-RealSense-Camera-Introduction-F200-SR300-R200/1481707878472.png" alt="Alt text" /></p>

<p>R200 有：</p>

<ul>
<li>测量范围：</li>
</ul>


<hr />

<h2><a href="https://software.intel.com/en-us/articles/intel-realsense-data-ranges">Intel RealSense 测量范围</a></h2>

<p><img src="/images/2016-12-14-Intel-RealSense-Camera-Introduction-F200-SR300-R200/1481708072967.png" alt="Alt text" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intel RealSense 002(Learning RealSense SDK 001) Windows安装 Intel RealSense SDK]]></title>
    <link href="http://aobojaing.github.io/blog/2016/12/07/Intel-RealSense-Windows-download-install-intel-RealSense-SDK/"/>
    <updated>2016-12-07T12:18:38+08:00</updated>
    <id>http://aobojaing.github.io/blog/2016/12/07/Intel-RealSense-Windows-download-install-intel-RealSense-SDK</id>
    <content type="html"><![CDATA[<hr />

<p>我使用的Intel RealSense 硬件：SR300 摄像头</p>

<p>参考网站：</p>

<ul>
<li><a href="https://www.youtube.com/watch?v=dFVUiwyWyFo&amp;list=PLg-UKERBljNwbHO7R9t0mnIA52xd65LUT&amp;index=6">Downloading and Installing the Intel® RealSense SDK</a></li>
<li><a href="https://software.intel.com/blogs/2015/09/13/detailed-instructions-for-getting-started-with-intel-realsense-app-development?utm_source=ISTV&amp;utm_medium=Video&amp;utm_campaign=ISTV_2016&amp;utm_content=Video">Getting Started with Intel® RealSense™ App Development: Step-by-Step Install Instructions</a></li>
</ul>


<h2><a href="https://software.intel.com/zh-cn/intel-realsense-sdk/download">下载</a> 并安装</h2>

<p><strong>Step 0 . </strong> 先将SR300摄像头通过USB3.0接口插到电脑上。</p>

<blockquote><p>注意：</p>

<ol>
<li>必须要将SR300摄像头连接到USB3.0接口上。（这是一个非常重要的步骤）</li>
<li>不要通过USB延长线连接。</li>
</ol>
</blockquote>

<p><img src="/images/2016-12-7-Intel-RealSense-Windows-download-install-intel-RealSense-SDK/1481009695299.png" alt="Alt text" /></p>

<p>等待大约5分钟，驱动就自动安装完成了。</p>

<p><img src="/images/2016-12-7-Intel-RealSense-Windows-download-install-intel-RealSense-SDK/1481009996712.png" alt="Alt text" /></p>

<blockquote><p>如果电脑没有帮你自动安装，你需要手动安装：<strong>Step 1</strong>。电脑帮你自动安装了SR300 摄像头的驱动程序，你就可以跳过<strong>Step 1</strong>。</p></blockquote>

<p><strong>Step 1 . </strong> 下载<a href="https://software.intel.com/zh-cn/intel-realsense-sdk/download">SR300 深度摄像头管理程序</a>（intel_rs_dcm_sr300_3.3.27.5718.exe）</p>

<blockquote><p><strong>DCM</strong> 是全称：Depth Camera Manager</p></blockquote>

<p>安装：按照提示，一步一步的进行操作即可。</p>

<blockquote><p>如果你需要这个问题：</p>

<p><img src="/images/2016-12-7-Intel-RealSense-Windows-download-install-intel-RealSense-SDK/1481008202698.png" alt="Alt text" /></p>

<p>说明：SR300 摄像头没有与电脑连接，请先将SR300 摄像头于电脑通过USB3.0接口连接。</p></blockquote>

<p><strong>Step 2 . </strong> 下载 <a href="https://software.intel.com/zh-cn/intel-realsense-sdk/download">英特尔® 实感™ 软件开发套件（必备）</a>（Intel® RealSense™ SDK for Windows*）</p>

<blockquote><p>下载这里，你需要先注册一个inteld的用户，才能下载它。</p></blockquote>

<p>安装：intel_rs_sdk_offline_package_10.0.26.0396.exe</p>

<p>一步一步的安装，即可。</p>

<blockquote><p>如果你在安装的时候遇到这个问题：</p>

<p><img src="/images/2016-12-7-Intel-RealSense-Windows-download-install-intel-RealSense-SDK/1481021331695.png" alt="Alt text" /></p>

<p><strong>The Installer failed to detect OpenCL™ 1.2 support on your system. Certain SDK samples/modules may not be functional. Please upgrade your graphics driver for full SDK functionalities.</strong></p>

<p>点击<strong>Next</strong> 按钮忽略即可。</p>

<h2>出现这个问题的原因：</h2>

<p>你先下载 <a href="http://www.ozone3d.net/gpu_caps_viewer/">GPU Caps Viewer</a> 软件来查看<strong>我当前的电脑安装的OpenCL的版本</strong>和<strong>我的电脑有没有GPU</strong>。</p>

<p><img src="/images/2016-12-7-Intel-RealSense-Windows-download-install-intel-RealSense-SDK/1481048947084.png" alt="Alt text" /></p>

<p><img src="/images/2016-12-7-Intel-RealSense-Windows-download-install-intel-RealSense-SDK/1481048958442.png" alt="Alt text" /> <img src="/images/2016-12-7-Intel-RealSense-Windows-download-install-intel-RealSense-SDK/1481049035444.png" alt="Alt text" /></p>

<p>通过GPU Caps Viewer软件得到的结果，我知道了：</p>

<ul>
<li>我的电脑里面是有GPU的：(NVIDIA CUDA公司的)<a href="http://www.geforce.com/hardware/notebook-gpus/geforce-705m/specifications">GeForce GT 705</a>。</li>
<li>这个显卡（GPU）支持的OpenCL版本是1.1</li>
</ul>


<p>现在你应该大概知道了：安装的 Intel RealSense SDK 提示的安装问题的原因了吧：</p>

<p><img src="/images/2016-12-7-Intel-RealSense-Windows-download-install-intel-RealSense-SDK/1481049133289.png" alt="Alt text" /></p>

<p>它说：您当前电脑的显卡太喽了，Intel RealSense SDK需要的是OpenCL1.2，而你的电脑里面没有，你电脑里面的显卡所支持的OpenCL版本是OpenCL1.1。</p>

<h2>解决办法</h2>

<p>没有办法，唯一可以解决下面这个问题的办法就是：提升（换一个好的）图形驱动硬件。（即：支持OpenCL1.2以上的显卡）。我们直接直接忽略这个问题也可以。对后面基本没有什么影响。</p></blockquote>

<hr />

<blockquote><p><strong>总结：</strong> 对于你的电脑，你想检测是否有GPU（显卡）（不管是<strong>NVIDIA CUDA 公司</strong>的还是 <strong>Intel公司</strong>的 都可以）。然后查看GPU（显卡）支持的OpenCL版本，必须要大于等于OpenCL1.2，否则 Intel RealSense SDK 安装不能成功。</p></blockquote>

<hr />

<p>注意安装的时候要连着网，因为在安装的时候会从网上下载一下安装包。</p>

<p><img src="/images/2016-12-7-Intel-RealSense-Windows-download-install-intel-RealSense-SDK/1481072982805.png" alt="Alt text" /></p>

<p>如果你想要拥有 <strong>China</strong> 的语音识别和合成包，可以将下面的选项勾选。</p>

<p><img src="/images/2016-12-7-Intel-RealSense-Windows-download-install-intel-RealSense-SDK/1481073189997.png" alt="Alt text" /></p>

<hr />

<h2>搞定</h2>

<h2>测试</h2>

<p>启动 <strong>Intel RealSense SDK Sample Browser</strong></p>

<p><img src="/images/2016-12-7-Intel-RealSense-Windows-download-install-intel-RealSense-SDK/1481083199264.png" alt="Alt text" /></p>

<p>里面有很多的示例可以运行：（每个程序都运行一下，试试看。）</p>

<p><img src="/images/2016-12-7-Intel-RealSense-Windows-download-install-intel-RealSense-SDK/1481083256629.png" alt="Alt text" /></p>

<hr />

<p>学习文档：<a href="https://software.intel.com/zh-cn/intel-realsense-sdk/documentation">英特尔® 实感™ SDK 文档</a></p>
]]></content>
  </entry>
  
</feed>
